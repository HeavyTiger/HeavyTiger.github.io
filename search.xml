<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaEE_Servlet初探</title>
      <link href="/articles/JavaEE-Servlet%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/JavaEE-Servlet%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>Servlet（Server Applet）是 Java Servlet 的简称，是使用 Java 语言编写的运行在服务器端的程序。具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。通常来说，Servlet 是指所有实现了 Servlet 接口的类，主要用于处理客户端传来的 HTTP 请求，并返回一个响应，它能够处理的请求有 doGet() 和 doPost() 等。Servlet 由 Servlet 容器提供，Servlet 容器是指提供了 Servlet 功能的服务器（如 Tomcat），Servlet 容器会将 Servlet 动态加载到服务器上，然后通过 HTTP 请求和 HTTP 应与客户端进行交互。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="1、Java-Servlet基本认识"><a href="#1、Java-Servlet基本认识" class="headerlink" title="1、Java Servlet基本认识"></a>1、Java Servlet基本认识</h2><p><strong>Servlet的应用体系为：</strong>首先 Servlet 的请求首先会被 HTTP 服务器（如 Apache Tomcat）接收，HTTP 服务器只负责静态 HTML 页面的解析，而对于 Servlet 的请求会转交给 Servlet 容器，Servlet 容器会根据 web.xml 文件中的映射关系，调用相应的 Servlet程序，Servlet 再将处理的结果返回给 Servlet 容器，并通过 HTTP 服务器将响应传输给客户端。</p><p><strong>Servlet具有如下的特点：</strong></p><p><strong>1）方便</strong></p><p>Servlet 提供了大量的实用工具例程，如处理很难完成的 HTML 表单数据、读取和设置 HTTP 头，以及处理 Cookie 和跟踪会话等。</p><p><strong>2）跨平台</strong></p><p>Servlet 使用 Java 类编写，可以在不同的操作系统平台和不同的应用服务器平台运行。</p><p><strong>3）灵活性和可扩展性强</strong></p><p>采用 Servlet 开发的 Web 应用程序，由于 Java 类的继承性及构造函数等特点，使得应用灵活，可随意扩展。</p><h2 id="2、与Servlet相关的接口和类"><a href="#2、与Servlet相关的接口和类" class="headerlink" title="2、与Servlet相关的接口和类"></a>2、与Servlet相关的接口和类</h2><p>Sun 公司提供了一系列的接口和类用于 Servlet 技术的开发，其中最重要的接口是 <code>javax.servlet.Servlet</code>。在 Servlet 接口中定义了 5 个抽象方法</p><table><thead><tr><th>方法声明</th><th>功能描述</th></tr></thead><tbody><tr><td>void init(ServletConfig config)</td><td>容器在创建好 Servlet 对象后，就会自动调用此方法。该方法接收一个 ServletConfig 类型的参数，Servlet 容器通过该参数向 Servlet 传递初始化配置信息</td></tr><tr><td>ServletConfig getSendetConfig()</td><td>用于获取 Servlet 对象的配置信息，返回 Servlet 的 ServletConfig 对象</td></tr><tr><td>String getServletInfo()</td><td>返回一个字符串，其中包含关于 Servlet 的信息，如作者、版本和版权等信息</td></tr><tr><td>void service(ServletRequest request,ServletResponse response)</td><td>负责响应用户的请求，当容器接收到客户端访问 Servlet 对象的请求时，就会调用此方法。<br/>容器会构造一个表示客户端请求信息的 ServletRequest 对象和一个用于响应客户端的 ServletResponse 对象作为参数传递给 service() 方法。<br/>在 service() 方法中，可以通过 ServletRequest 对象得到客户端的相关信息和请求信息，在对请求进行处理后，调用 ServletResponse 对象的方法设置响应信息</td></tr><tr><td>void destroy()</td><td>负责释放 Servlet 对象占用的资源。当服务器关闭或者 Servlet 对象被移除时，Servlet 对象会被销毁，容器会调用此方法</td></tr></tbody></table><p>在以上的五个方法中，init(), service(), destroy()方法可以表现Servlet的生命周期，会在某个特定的时期被调用</p><p>针对 Servlet 的接口，Sun 公司提供了两个默认的接口实现类：GenericServlet 和 HttpServlet。其中，GenericServlet 是一个抽象类，该类为 Servlet 接口提供了部分实现，它并没有实现 HTTP 请求处理。</p><p>Servlet的继承结构如下图所示：</p><p><img src="1007017-20180617005127662-1291521530.png" alt="img"></p><p>HttpServlet 是 GenericServlet 的子类，它继承了 GenericServlet 的所有方法，并且为 HTTP 请求中的 GET 和 POST 等类型提供了具体的操作方法。通常情况下，编写的 Servlet 类都继承自 HttpServlet，在开发中使用的也是 HttpServlet 对象。</p><p>HttpServlet 类中包含两个常用方法：</p><table><thead><tr><th><strong>方法声明</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>protected void doGet (HttpServletRequest req, HttpServletResponse resp)</td><td>用于处理 GET 类型的 HTTP 请求的方法</td></tr><tr><td>protected void doPost(HttpServletRequest req, HttpServletResponse resp)</td><td>用于处理 POST 类型的 HTTP 请求的方法</td></tr></tbody></table><p>HttpServlet 主要有两大功能，具体如下。</p><ol><li>根据用户请求方式的不同，定义相应的 doXxx() 方法处理用户请求。例如，与 GET 请求方式对应的 doGet() 方法，与 POST 方式对应的 doPost() 方法。</li><li>通过 service() 方法将 HTTP 请求和响应分别强转为 HttpServletRequest 和 HttpServletResponse 类型的对象。</li></ol><blockquote><p>由于 HttpServlet 类在重写的 service() 方法中，为每一种 HTTP 请求方式都定义了对应的 doXxx() 方法，因此，当定义的类继承 HttpServlet 后，只需要根据请求方式重写对应的 doXxx() 方法即可，而不需要重写 service() 方法。</p></blockquote><h2 id="3、Servlet程序的简单示例"><a href="#3、Servlet程序的简单示例" class="headerlink" title="3、Servlet程序的简单示例"></a>3、Servlet程序的简单示例</h2><p>构造一个testServlet类，让其实现Servlet接口，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init方法被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service方法被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy方法被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置<code>web.xml</code>文件，使得 Servlet 的请求转交给 Servlet 容器，Servlet 容器会根据 web.xml 文件中的映射关系，调用相应的 Servlet程序，Servlet 再将处理的结果返回给 Servlet 容器，并通过 HTTP 服务器将响应传输给客户端。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置servlet映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.demoTest.testServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，开启服务器，访问localhost:8080端口</p><p><img src="image-20210924180728525.png" alt="image-20210924180728525"></p><p>点击Hello Servlet链接，可以看到服务器端的init， service方法等被执行，在关闭服务后，还会调用destroy方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">init方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">D:\SourceFiles\apache-tomcat-9.0.52\bin\catalina.bat stop</span><br><span class="line">Using CATALINA_BASE:   &quot;C:\Users\DCM\AppData\Local\JetBrains\IntelliJIdea2021.1\tomcat\f3e13ab7-4fb7-4ebc-8f15-28b7c708560d&quot;</span><br><span class="line">Using CATALINA_HOME:   &quot;D:\SourceFiles\apache-tomcat-9.0.52&quot;</span><br><span class="line">Using CATALINA_TMPDIR: &quot;D:\SourceFiles\apache-tomcat-9.0.52\temp&quot;</span><br><span class="line">Using JRE_HOME:        &quot;D:\SourceFiles\Java\jdk-11.0.5&quot;</span><br><span class="line">Using CLASSPATH:       &quot;D:\SourceFiles\apache-tomcat-9.0.52\bin\bootstrap.jar;D:\SourceFiles\apache-tomcat-9.0.52\bin\tomcat-juli.jar&quot;</span><br><span class="line">Using CATALINA_OPTS:   &quot;&quot;</span><br><span class="line">24-Sep-2021 18:50:16.711 信息 [main] org.apache.catalina.core.StandardServer.await 通过关闭端口接收到有效的关闭命令。正在停止服务器实例。</span><br><span class="line">24-Sep-2021 18:50:16.712 信息 [main] org.apache.coyote.AbstractProtocol.pause 暂停ProtocolHandler[&quot;http-nio-8080&quot;]</span><br><span class="line">NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</span><br><span class="line">24-Sep-2021 18:50:16.831 信息 [main] org.apache.catalina.core.StandardService.stopInternal 正在停止服务[Catalina]</span><br><span class="line">24-Sep-2021 18:50:16.842 信息 [main] org.apache.coyote.AbstractProtocol.stop 正在停止ProtocolHandler [&quot;http-nio-8080&quot;]</span><br><span class="line">destroy方法被调用！</span><br><span class="line">24-Sep-2021 18:50:16.876 信息 [main] org.apache.coyote.AbstractProtocol.destroy 正在摧毁协议处理器 [&quot;http-nio-8080&quot;]</span><br><span class="line">NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</span><br><span class="line">已与服务器断开连接</span><br></pre></td></tr></table></figure><h2 id="4、Servlet的生命周期"><a href="#4、Servlet的生命周期" class="headerlink" title="4、Servlet的生命周期"></a>4、Servlet的生命周期</h2><p><img src="5-1Z610101ZS51.png" alt="Servlet生命周期"></p><p>按照功能的不同，大致可以将 Servlet 的生命周期分为三个阶段，分别是初始化阶段、运行阶段和销毁阶段。</p><h3 id="4-1、初始化阶段"><a href="#4-1、初始化阶段" class="headerlink" title="4.1、初始化阶段"></a>4.1、初始化阶段</h3><p>当客户端向 Servlet 容器发出 HTTP 请求要求访问 Servlet 时，Servlet 容器首先会解析请求，检查内存中是否已经有了该 Servlet 对象，如果有，则直接使用该 Servlet 对象，如果没有，则创建 Servlet 实例对象，然后通过调用 init() 方法实现 Servlet 的初始化工作。<strong>需要注意的是，在 Servlet 的整个生命周期内，它的 init() 方法只能被调用一次。</strong></p><h3 id="4-2、运行阶段"><a href="#4-2、运行阶段" class="headerlink" title="4.2、运行阶段"></a>4.2、运行阶段</h3><p>这是 Servlet 生命周期中最重要的阶段，在这个阶段中，Servlet 容器会为这个请求创建代表 HTTP 请求的 ServletRequest 对象和代表 HTTP 响应的 ServletResponse 对象，然后将它们作为参数传递给 Servlet 的 service() 方法。</p><p>service() 方法从 ServletRequest 对象中获得客户请求信息并处理该请求，通过 ServletResponse 对象生成响应结果。</p><p><strong>在 Servlet 的整个生命周期内，对于 Servlet 的每一次访问请求，Servlet 容器都会调用一次 Servlet 的 service() 方法，并且创建新的 ServletRequest 和 ServletResponse 对象，也就是说，service() 方法在 Servlet 的整个生命周期中会被调用多次。</strong></p><h3 id="4-3、销毁阶段"><a href="#4-3、销毁阶段" class="headerlink" title="4.3、销毁阶段"></a>4.3、销毁阶段</h3><p>当服务器关闭或 Web 应用被移除出容器时，Servlet 随着 Web 应用的关闭而销毁。在销毁 Servlet 之前，Servlet 容器会调用 Servlet 的 destroy() 方法，以便让 Servlet 对象释放它所占用的资源。在 Servlet 的整个生命周期中，destroy() 方法也只能被调用一次。</p><p><strong>需要注意的是，Servlet 对象一旦创建就会驻留在内存中等待客户端的访问，直到服务器关闭或 Web 应用被移除出容器时，Servlet 对象才会销毁。</strong></p><h2 id="5、Servlet配置虚拟路径映射"><a href="#5、Servlet配置虚拟路径映射" class="headerlink" title="5、Servlet配置虚拟路径映射"></a>5、Servlet配置虚拟路径映射</h2><p>创建好的 Servlet 只有映射成虚拟路径，客户端才能对其进行访问。但是在映射 Servlet 时，还存在如 Servlet 的多重映射、在映射路径中使用通配符、配置默认的 Servlet 等内容。</p><h3 id="5-1、Servlet多重映射"><a href="#5-1、Servlet多重映射" class="headerlink" title="5.1、Servlet多重映射"></a>5.1、Servlet多重映射</h3><p>Servlet 的多重映射指同一个 Servlet 可以被映射成多条虚拟路径。</p><p>有两种方法可以实现多重映射：</p><ol><li>配置多个 <servlet-mapping> 元素；</li><li>配置多个 <url-pattern> 子元素；</li></ol><p>我们使用第二个方法实现多重映射：</p><p>即在web.xml中配置例如下图所示的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.demoTest.TestServlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射为TestServlet01和Test02 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testServlet01<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test01<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，即可通过两种URL对该servlet进行访问：</p><p><code>http://localhost:8080/servlet/testServlet01</code></p><p><code>http://localhost:8080/servlet/test01</code></p><h3 id="5-2、Servlet映射路径中使用通配符"><a href="#5-2、Servlet映射路径中使用通配符" class="headerlink" title="5.2、Servlet映射路径中使用通配符"></a>5.2、Servlet映射路径中使用通配符</h3><p>在实际开发过程中，开发者有时会希望某个目录下的所有路径都可以访问同一个 Servlet，这时，可以在 Servlet 映射的路径中使用通配符*。通配符的格式有两种，具体如下。</p><ul><li><p>格式为<code>*.扩展名</code>，例如 *.do 匹配以 .do 结尾的所有 URL 地址。</p></li><li><p>格式为 <code>/*</code>，例如 /abc/* 匹配以 /abc 开始的所有 URL 地址。</p></li></ul><p>当客户端访问一个 Servlet 时，如果请求的 URL 地址能够匹配多条虚拟路径，那么 Tomcat 将采取最具体匹配原则查找与请求 URL 最接近的虚拟映射路径。</p><blockquote><p>/abc/*   映射到 Servlet1<br>/*       映射到 Servlet2<br>/abc     映射到 Servlet3<br>*.do     映射到 Servlet4</p></blockquote><ul><li>当请求 URL 为 <code>/abc/a.html </code>; <code>/abc/*</code> 和 <code>/*</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet1。</li><li>当请求 URL 为 <code>/abc </code>; <code>/*</code>、<code>/abc/*</code> 和 <code>/abc</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet3。</li><li>当请求 URL 为 <code>/abc/a.do</code>; <code>/*</code> 、<code>*.do</code> 和 <code>/abc/*</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet1。</li><li>当请求 URL 为 <code>/a.do</code>; <code>/*</code> 和 <code>*.do</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet2。</li><li>当请求 URL 为 <code>/xxx/yyy/a.do</code>; <code>*.do</code> 和 <code>/*</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet2。</li></ul><h3 id="5-3、默认Servlet"><a href="#5-3、默认Servlet" class="headerlink" title="5.3、默认Servlet"></a>5.3、默认Servlet</h3><p>如果某个 Servlet 的映射路径仅仅是一个正斜线（/），那么这个 Servlet 就是当前 Web 应用的默认 Servlet。Servlet 服务器在接收到访问请求时，如果在 web.xml 文件中找不到匹配的 <servlet-mapping> 元素的 URL，则会将访问请求交给默认 Servlet 处理，也就是说，默认 Servlet 用于处理其他 Servlet 都不处理的访问请求。</p><p>下面对web.xml文件进行修改，将TestServlet01设置为默认的 Servlet，具体如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mengma.servlet.TestServlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动 Tomcat 服务器，在浏览器的地址栏中输入任意地址，如 <a href="http://localhost:8080/servletDemo01/abcde%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C%E9%83%BD%E5%B0%86%E6%98%AF%E8%B0%83%E7%94%A8TestServlet01%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82">http://localhost:8080/servletDemo01/abcde，浏览器的显示结果都将是调用TestServlet01的结果。</a></p><p>需要注意的是，在 Tomcat 安装目录下的 web.xml 文件中也配置了一个默认的 Servlet，配置信息如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">serlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">serlet-class</span>&gt;</span>    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的配置信息中，org.apache.catalina.servlets.DefaultServlet 被设置为默认的 Servlet，它对 Tomcat 服务器上所有的 Web 应用都起作用。</p><p>当 Tomcat 服务器中的某个 Web 应用没有默认 Servlet 时，都会将 DefaultServlet 作为默认的 Servlet。当客户端访问 Tomcat 服务器中的某个静态 HTML 文件时，DefaultServlet 会判断 HTML 是否存在，如果存在，则会将数据以流的形式回送给客户端，否则会报告 404 错误。</p><h2 id="6、ServletConfig和ServletContext接口及其使用方法"><a href="#6、ServletConfig和ServletContext接口及其使用方法" class="headerlink" title="6、ServletConfig和ServletContext接口及其使用方法"></a>6、ServletConfig和ServletContext接口及其使用方法</h2><h3 id="6-1、ServletConfig接口"><a href="#6-1、ServletConfig接口" class="headerlink" title="6.1、ServletConfig接口"></a>6.1、ServletConfig接口</h3><p>在运行 Servlet 程序时，可能需要一些辅助信息，例如，文件使用的编码、使用 Servlet 程序的共享信息等，这些信息可以在 web.xml 文件中使用一个或多个 <init-param> 元素进行配置。当 Tomcat 初始化一个 Servlet 时，会将该 Servlet 的配置信息封装到 ServletConfig 对象中，此时可以通过调用 init（ServletConfig config）方法将 ServletConfig 对象传递给 Servlet。</p><table><caption>表 1 ServletConfig接口的常用方法</caption><thead><tr><th scope="col">方法说明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getInitParameter(String name)</td><td>根据初始化参数名返回对应的初始化参数值</td></tr><tr><td>Enumeration getInitParameterNames()</td><td>返回一个 Enumeration 对象，其中包含了所有的初始化参数名</td></tr><tr><td>ServletContext getServletContext()</td><td>返回一个代表当前 Web 应用的 ServletContext 对象</td></tr><tr><td>String getServletName()</td><td>返回 Servlet 的名字，即 web.xml 中 &lt;servlet-name&gt;元素的值</td></tr></tbody></table><p>例如：</p><p>Servlet代码如下，用于获得该Servlet的编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        ServletConfig config = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">        String param = config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;encoding=&quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet02<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mengma.servlet.TestServlet02<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--可以通过config.getInitParameter(&quot;encoding&quot;); 获得编码值，类似于key-value--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet02<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServlet02<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2、ServletContext接口"><a href="#6-2、ServletContext接口" class="headerlink" title="6.2、ServletContext接口"></a>6.2、ServletContext接口</h3><p>当 Tomcat 启动时，Tomcat 会为每个 Web 应用创建一个<strong>唯一</strong>的 ServletContext 对象代表当前的 Web 应用，该对象封装了当前 Web 应用的所有信息。可以利用该对象获取 Web 应用程序的初始化信息、读取资源文件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet03<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mengma.servlet.TestServlet03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet03<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServlet03<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>读取全局的初始化信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">// 得到ServletContext对象</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">// 得到包含所有初始化参数名的Enumeration对象</span></span><br><span class="line">        Enumeration&lt;String&gt; paramNames = context.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 遍历所有的初始化参数名，得到相应的参数值并打印</span></span><br><span class="line">        <span class="keyword">while</span> (paramNames.hasMoreElements()) &#123;</span><br><span class="line">          String name = paramNames.nextElement();</span><br><span class="line">          <span class="comment">//直接获取键值对相关的值</span></span><br><span class="line">          String value = context.getInitParameter(name);</span><br><span class="line">          out.println(name + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">          out.println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用来临时存放数据：</p><p>使用setAttribute可以写入数据（保存在内存中），当web进程结束时，数据会丢失</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextTest1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//解决中文乱码</span></span><br><span class="line">res.setContentType(<span class="string">&quot;text/html;charset=gbk&quot;</span>);</span><br><span class="line">PrintWriter pw = res.getWriter();</span><br><span class="line"><span class="comment">//1：得到Servlet Context</span></span><br><span class="line">ServletContext sc = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//2: 添加属性</span></span><br><span class="line">sc.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">pw.println(<span class="string">&quot;给ServletContext添加了一个属性&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(req,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以读取Web应用下的资源文件：</p><p>ServletContext 接口中定义了一些读取 Web 资源的方法，这些方法是依靠 Servlet 容器实现的。Servlet 容器根据资源文件相对于 Web 应用的路径，返回关联资源文件的 I/O 流或资源文件在系统的绝对路径等。</p><table><caption>ServletContext接口的常用方法</caption><thead><tr><th scope="col">方法说明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>Set getResourcePaths(String path)</td><td><br>返回一个 Set 集合，集合中包含资源目录中子目录和文件的路径名 称。参数 path 必须以正斜线（/）开始，指定匹配资源的部分路径</td></tr><tr><td>String getRealPath(String path)&nbsp;</td><td>返回资源文件在服务器文件系统上的真实路径（文件的绝对路径）。参数 path 代表资源文件的虚拟路径，它应该以正斜线（/）开始，/ 表示当前 Web 应用的根目录，如果 Servlet 容器不能将虚拟路径转换为文 件系统的真实路径，则返回 null</td></tr><tr><td><br>URL getResource(String path)</td><td>返回映射到某个资源文件的 URL 对象。参数 path 必须以正斜线（/）开始，/ 表示当前 Web 应用的根目录</td></tr><tr><td>InputStream getResourceAsStream(String path)</td><td>返回映射到某个资源文件的 InputStream 输入流对象。参数 path 的传递规则和 getResource() 方法完全一致</td></tr></tbody></table><p>例如：</p><p>/WEB-INF/classes/itcast.properties文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">// 获取相对路径中的输入流对象</span></span><br><span class="line">        InputStream in = context</span><br><span class="line">            .getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/itcast.properties&quot;</span>);</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(in);</span><br><span class="line">        out.println(<span class="string">&quot;username=&quot;</span> + pros.getProperty(<span class="string">&quot;username&quot;</span>) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;password=&quot;</span> + pros.getProperty(<span class="string">&quot;password&quot;</span>) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、HttpServletRequest"><a href="#7、HttpServletRequest" class="headerlink" title="7、HttpServletRequest"></a>7、HttpServletRequest</h2><p>当访问 Servlet 时，所有请求消息将被封装到 HttpServletRequest 对象中，请求消息的请求行中包含请求方法、请求资源名、请求路径等信息，为了获取这些信息，HttpServletRequest 接口定义了一系列方法。</p><table><caption><br>获取请求行信息的常用方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getMethod()</td><td>该方法用于获取 HTTP 请求消息中的请求方式（如 GET、POST 等）</td></tr><tr><td>String getRequestURI()</td><td>该方法用于获取请求行中的资源名称部分即位于 URL 的主机和端门之后、参数部分之前的部分</td></tr><tr><td>String getQueryString()</td><td>该方法用于获取请求行中的参数部分，也就是资源路径后问号（？）以后的所有内容</td></tr><tr><td>String getContextPath()</td><td>该方法用于获取请求 URL 中属于 Web 应用程序的路径，这个路径以 / 开头，表示相对于整个 Web 站点的根目录，路径结尾不含 /。如果请求 URL 属于 Web 站点的根目录，那么返回结果为空字符串（""）</td></tr><tr><td>String getServletPath()</td><td>该方法用于获取 Servlet 的名称或 Servlet 所映射的路径</td></tr><tr><td>String getRemoteAddr()</td><td>该方法用于获取请求客户端的 IP 地址，其格式类似于 192.168.0.3</td></tr><tr><td>String getRemoteHost()</td><td>该方法用于获取请求客户端的完整主机名，其格式类似于 pcl.mengma.com。需要注意的是，如果无法解析出客户机的完整主机名，那么该方法将会返回客户端的 IP 地址</td></tr><tr><td>int getRemotePort()</td><td>该方法用于获取请求客户端网络连接的端口号</td></tr><tr><td>String getLocaIAddr()</td><td>该方法用于获取 Web 服务器上接收当前请求网络连接的 IP 地址</td></tr><tr><td>String getLocalName()</td><td><br>该方法用于获取 Web 服务器上接收当前网络连接 IP 所对应的主机名</td></tr><tr><td>int getLocalPort()</td><td>该方法用于获取 Web 服务器上接收当前网络连接的端口号</td></tr><tr><td>String getServerName()</td><td>该方法用于获取当前请求所指向的主机名，即 HTTP 请求消息中 Host 头字段所对应的主机名部分</td></tr><tr><td>int gctServcrPort()</td><td>该方法用于获取当前请求所连接的服务器端口号，即 HTTP 请求消息中 Host 头字段所对应的端口号部分</td></tr><tr><td>StringBuffcr getRequestURL()</td><td>该方法用于获取客户端发出请求时的完整 URL，包括协议、服务器名、端口号、 资源路径等信息，但不包括后面的査询参数部分。注意，getRequcstURL() 方法返冋的结果是 StringBuffer 类型，而不是 String 类型，这样更便于对结果进行修改</td></tr></tbody></table><p>当浏览器发送 Servlet 请求时，需要通过请求消息头向服务器传递附加信息，例如，客户端可以接收的数据类型、压缩方式、语言等。为此，在 HttpServletRequest 接口中定义了一系列用于获取 HTTP 请求头字段的方法。</p><table><caption><br>获取请求消息头的方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getHeader(String name)</td><td>该方法用于获取一个指定头字段的值，如果请求消息中没有包含指定的头字段，则 getHeader() 方法返回 null；如果请求消息中包含多个指定名称的头字段，则 getHeader() 方法返回其中第一个头字段的值</td></tr><tr><td>Enumeration getHeaders(String name)</td><td><br>该方法返回一个 Enumeration 集合对象，该集合对象由请求消息中出现的某个指定名称的所有头字段值组成。在多数情况下，一个头字段名在请求消息中只出现一次，但有时可能会出现多次</td></tr><tr><td>Enumeration getHeaderNames()</td><td>该方法用于获取一个包含所有请求头字段的 Enumeration 对象</td></tr><tr><td>int getIntHeader(String name)</td><td>该方法用于获取指定名称的头字段，并且将其值转为 int 类型。需要注意的是，如果指定名称的头字段不存在，则返回值为 -1；如果获取到的头字段的值不能转为 int 类型，则将发生 NumberFormatException 异常</td></tr><tr><td>long getDateHeader(String name)</td><td>该方法用于获取指定头字段的值，并将其按 GMT 时间格式转换为一个代表日期/时间的长整数，该长整数是自 1970 年 1 月 1 日 0 时 0 分 0 秒算起的以毫秒为单位的时间值</td></tr><tr><td>String getContentType()</td><td>该方法用于获取 Content-Type 头字段的值，结果为 String 类型</td></tr><tr><td>int getContentLength()</td><td>该方法用于获取 Content-Length 头字段的值，结果为 int 类型</td></tr><tr><td>String getCharacterEncoding()</td><td>该方法用于返回请求消息的实体部分的字符集编码，通常是从 Content-Type 头字段中进行提取，结果为 String 类型</td></tr></tbody></table><h2 id="8、获取表单数据"><a href="#8、获取表单数据" class="headerlink" title="8、获取表单数据"></a>8、获取表单数据</h2><p>在实际开发中，经常需要获取用户提交的表单数据，例如用户名和密码等，为了方便获取表单中的请求参数，在 HttpServletRequest 接口的父类 ServletRequest 中定义了一系列获取请求参数的方法</p><table><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getParameter(String name)</td><td>该方法用于获取某个指定名称的参数值。<br>如果请求消息中没有包含指定名称的参数，则 getParameter() 方法返回 null。<br>如果指定名称的参数存在但没有设置值，则返回一个空串。<br>如果请求消息中包含多个该指定名称的参数，则 getParameter() 方法返回第一个出现的参数值。</td></tr><tr><td><br>String [] getParameterValues (String name)</td><td>HTTP 请求消息中可以有多个相同名称的参数（通常由一个包含多个同名的字段元素的 form 表单生成），如果要获得 HTTP 请求消息中的同一个参数名所对应的所有参数值，那么就应该使用 getParameterValues() 方法，该方法用于返回一个 String 类型的数组。</td></tr><tr><td>Enumeration getParameterNames()</td><td>方法用于返回一个包含请求消息中所有参数名的 Enumeration 对象，在此基础上，可以对请求消息中的所有参数进行遍历处理。</td></tr><tr><td>Map getParameterMap()</td><td>getParameterMap() 方法用于将请求消息中的所有参数名和值装入一个 Map 对象中返回。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servletDemo02/RequestsParamServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>/&gt;</span>唱歌</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dance&quot;</span>/&gt;</span>跳舞</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>/&gt;</span>玩游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用该 Servlet 获取请求参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParamsServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码&quot;</span> + password);</span><br><span class="line">        <span class="comment">// 获取参数名为&quot;hobby&quot;的值</span></span><br><span class="line">        String[] hobbys = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;爱好:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hobbys.length; i++) &#123;</span><br><span class="line">            System.out.println(hobbys[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过 Request 对象传递数据</strong></p><p>Request 对象不仅可以获取一系列数据，还可以通过属性传递数据。ServletRequest 接口中定义了一系列操作属性的方法。</p><p><strong>1）setAttribute() 方法</strong></p><p>该方法用于将一个对象与一个名称关联后存储到 ServletRequest 对象中，其完整语法定义如下：</p><p><code>public void setAttribute(java.lang.String name,java.lang.Object o);</code></p><p>需要注意的是，如果 ServletRequest 对象中已经存在指定名称的属性，则 setAttribute() 方法将会先删除原来的属性，然后再添加新的属性。如果传递给 setAttribute() 方法的属性值对象为 null，则删除指定名称的属性，这时的效果等同于 removeAttribute() 方法。</p><p><strong>2）getAttribute() 方法</strong></p><p>该方法用于从 ServletRequest 对象中返回指定名称的属性对象，其完整的语法定义如下：</p><p><code>public java.lang.Object getAttribute(java.lang.String name);</code></p><p><strong>3）removeAttribute() 方法</strong></p><p>该方法用于从 ServletRequest 对象中删除指定名称的属性，其完整的语法定义如下：</p><p><code>public void removeAttribute(java.lang.String name);</code></p><p><strong>4）getAttributeNames() 方法</strong></p><p>该方法用于返回一个包含 ServletRequest 对象中的所有属性名的 Enumeration 对象，在此基础上，可以对 ServletRequest 对象中的所有属性进行遍历处理。getAttributeNames() 方法的完整语法定义如下：</p><p><code>public java.util.Enumeration getAttributeNames();</code></p><p>需要注意的是，只有属于同一个请求中的数据才可以通过 ServletRequest 对象传递数据。</p><h2 id="9、请求转发"><a href="#9、请求转发" class="headerlink" title="9、请求转发"></a>9、请求转发</h2><p>当一个 Web 资源收到客户端的请求后，如果希望服务器通知另外一个资源处理请求，那么这时可以通过 RequestDispatcher 接口的实例对象实现。ServletRequest 接口中定义了一个获取 RequestDispatcher 对象的方法：</p><p><code>RequestDispatcher getRequestDispatcher (String path)</code></p><p>该方法返回封装了某条路径所指定资源的 <code>RequestDispatcher</code> 对象。其中，参数 path 必须以 <code>/</code> 开头，用于表示当前 Web 应用的根目录。需要注意的是，<code>WEB-INF</code> 目录中的内容对 RequestDispatcher 对象也是可见的。因此，传递给 getRequestDispatcher(String path) 方法的资源可以是 <code>WEB-INF</code> 目录中的文件。</p><table><caption>表 2 RequestDispatcher 接口的方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>forward(ServletRequest request,ServletResponse response)</td><td>该方法用于将请求从一个 Servlet 传递给另一个 Web 资源。在 Servlet 中，可以对请求做一个初步处理，然后通过调用这个方法，将请求传递给其他资源进行响应。需要注意的是，该方法必须在响应提交给客户端之前被调用，否则将抛出 IllegalStateException 异常</td></tr><tr><td>include(ServletRequest request,ServletResponse response)</td><td><br>该方法用于将其他的资源作为当前响应内容包含进来</td></tr></tbody></table><p><code>servlet01：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);    <span class="comment">// 将数据存储到request对象中</span></span><br><span class="line">        RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/ResultServlet&quot;</span>);<span class="comment">//注意，可以使用WEB-INF中的文件</span></span><br><span class="line">        dispatcher.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>servlet02：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String username = (String) request.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;用户名：&quot;</span> + username + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、HttpServletResponse"><a href="#10、HttpServletResponse" class="headerlink" title="10、HttpServletResponse"></a>10、HttpServletResponse</h2><p>HttpServletResponse 接口继承自 ServletResponse 接口，主要用于封装 HTTP 响应消息。由于 HTTP 响应消息分为状态行、响应消息头、消息体三部分。因此，在 HttpServletResponse 接口中定义了向客户端发送响应状态码、响应消息头、响应消息体的方法。</p><h3 id="10-1、发送状态码相关的方法"><a href="#10-1、发送状态码相关的方法" class="headerlink" title="10.1、发送状态码相关的方法"></a>10.1、发送状态码相关的方法</h3><p>当 Servlet 向客户端回送响应消息时，需要在响应消息中设置状态码。因此，HttpServletResponse 接口定义了两个发送状态码的方法。</p><h4 id="10-1-1、setStatus（int-status）方法"><a href="#10-1-1、setStatus（int-status）方法" class="headerlink" title="10.1.1、setStatus（int status）方法"></a>10.1.1、setStatus（int status）方法</h4><p>该方法用于设置 HTTP 响应消息的状态码，并生成响应状态行。由于响应状态行中的状态描述信息直接与状态码相关，而 HTTP 版本由服务器确定，因此，只要通过 setStatus（int status）方法设置了状态码，即可实现状态行的发送。需要注意的是，在正常情况下，Web 服务器会默认产生一个状态码为 200 的状态行。</p><h4 id="10-1-2、sendError（int-sc）方法"><a href="#10-1-2、sendError（int-sc）方法" class="headerlink" title="10.1.2、sendError（int sc）方法"></a>10.1.2、sendError（int sc）方法</h4><p>该方法用于发送表示错误信息的状态码。例如，404 状态码表示找不到客户端请求的资源。response 对象提供了两个重载的 sendError（int sc）方法，具体如下：</p><p><code>public void sendError(int code) throws java.io.IOException</code><br><code>public void sendError(int code,String message)throws java.io.IOException</code></p><p>在上面重载的两个方法中，第一个方法只发送错误信息的状态码，而第二个方法除了发送状态码以外，还可以增加一条用于提示说明的文本信息，该文本信息将出现在发送给客户端的正文内容中。</p><h3 id="10-2、发送响应消息头相关的方法"><a href="#10-2、发送响应消息头相关的方法" class="headerlink" title="10.2、发送响应消息头相关的方法"></a>10.2、发送响应消息头相关的方法</h3><p>Servlet 向客户端发送的响应消息中包含响应头字段，由于 HTTP 协议的响应头字段有很多种，因此，HttpServletResponse 接口定义了一系列设置 HTTP 响应头字段的方法。</p><table><caption>表 1 设置响应消息头字段的方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>void addHeader(String name,String value)</td><td colspan="1" rowspan="2">这两个方法都是用于设置 HTTP 协议的响应头字段。其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响 应头字段的值。不同的是，addHeader() 方法可以增加同名的响应头字段，而 setHeader() 方法则会覆盖同名的头字段</td></tr><tr><td>void setHeader (String name,String value)</td></tr><tr><td>void addIntHeader(String name,int value)</td><td colspan="1" rowspan="2">这两个方法专门用于设置包含整数值的响应头，避免了使用 addHeader() 与 setHeader() 方法时需要将 int 类型的设置值转换为 String 类型的麻烦</td></tr><tr><td><br>void setIntHeader(String name, int value)</td></tr><tr><td>void setContentType(String type)</td><td>该方法用于设置 Servlet 输出内容的 MIME 类型，对于 HTTP 协议来说，就是设置 Content-Type 响应头字段的值。例如，如果发送到客户端的内容是 jpeg 格式的图像数据,就需要将响应头字段的类型设置为 image/jpeg。需要注意的是，如果响应的内容为文本，setContentType() 方法还可以设置字符编码，如 text/html;charset = UTF-8</td></tr><tr><td>void setLocale (Locale loc)</td><td>该方法用于设置响应消息的本地化信息。对 HTTP 来说，就是设置 Content-Language 响应头字段和 Content-Type 头字段中的字符集编码部分。需要注意的是，如果 HTTP 消息没有设置 Content-Type 头字段，则 setLocale() 方法设置的字符集编码不会出现在 HTTP 消息的响应头中，如果调用 setCharacterEncoding() 或 setContentType() 方法指定了响应内 容的字符集编码，则 setLocale() 方法将不再具有指定字符集编码的功能</td></tr><tr><td>void setCharacterEncoding(String charset)</td><td>该方法用于设置输出内容使用的字符编码，对 HTTP 协议来说，就是设置 Content-Type 头字段中的字符集编码部分。如果没有设置 Content-Type 头字段，则 setCharacterEncoding 方法设 置的字符集编码不会出现在 HTTP 消息的响应头中。setCharacterEncoding() 方法比 setContentType() 和 setLocale() 方法的优先权高，它的设置结果将覆盖 setContentType() 和 setLocale() 方法所设置的字符码表</td></tr></tbody></table><h3 id="10-3、发送响应消息体相关的方法"><a href="#10-3、发送响应消息体相关的方法" class="headerlink" title="10.3、发送响应消息体相关的方法"></a>10.3、发送响应消息体相关的方法</h3><p>由于在 HTTP 响应消息中，大量的数据都是通过响应消息体传递的，因此，ServletResponse 遵循以 I/O 流传递大量数据的设计理念。在发送响应消息体时，定义了两个与输出流相关的方法。</p><h4 id="10-3-1、getOutputStream-方法"><a href="#10-3-1、getOutputStream-方法" class="headerlink" title="10.3.1、getOutputStream()方法"></a>10.3.1、getOutputStream()方法</h4><p>该方法所获取的字节输出流对象为 ServletOutputStream 类型。由于 ServletOutputStream是OutputStream 的子类，它可以直接输出字节数组中的二进制数据。因此，要想输出二进制格式的响应正文，就需要使用 <code>getOutputStream()</code> 方法。</p><h4 id="10-3-2、getWriter-方法"><a href="#10-3-2、getWriter-方法" class="headerlink" title="10.3.2、getWriter()方法"></a>10.3.2、getWriter()方法</h4><p>该方法所获取的字符输出流对象为 PrintWriter 类型。由于 PrintWriter 类型的对象可以直接输出字符文本内容，因此，要想输出内容全部为字符文本的网页文档，则需要使用 <code>getWriter()</code> 方法。</p><p>注意：虽然 response 对象的 getOutputStream() 和 getWriter() 方法都可以发送响应消息体，但是，它们之间互相排斥，不可同时使用，否则会发生 IllegalStateException 异常。</p><h3 id="11、重定向-页面跳转"><a href="#11、重定向-页面跳转" class="headerlink" title="11、重定向(页面跳转)"></a>11、重定向(页面跳转)</h3><p>请求重定向指 Web 服务器接收到客户端的请求后，可能由于某些条件的限制，不能访问当前请求 URL 所指向的 Web 资源，而是指定了一个新的资源路径，让客户端重新发送请求。</p><p>为了实现请求重定向，HttpServletResponse 接口定义了一个 sendRedirect() 方法，该方法用于生成 302 响应码和 Location 响应头，从而通知客户端重新访问 Location 响应头中指定的 URL，sendRedirect() 方法的完整语法如下所示：</p><p><code>public void sendRedirect(java.lang.String location) throws java.io.IOException</code></p><p>在上述方法代码中，参数 location 可以使用相对 URL，Web 服务器会自动将相对 URL 翻译成绝对 URL，再生成 Location 头字段。</p><p>例如：</p><p><code>login.html:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把表单内容提交到 servletDemo02 工程下的 LoginServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servletDemo02/LoginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>welcome.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    欢迎你，登陆成功！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>创建 LoginServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 用 HttpServletRequest 对象的 getParameter() 方法获取用户名和密码</span></span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 假设用户名和密码分别为 admin 和 123456</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; (<span class="string">&quot;123456&quot;</span>).equals(password)) &#123;</span><br><span class="line">            <span class="comment">// 如果用户名和密码正确，重定向到 welcome.html</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/servletDemo02/welcome.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果用户名和密码错误，重定向到 login.html</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/servletDemo02/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12、乱码问题"><a href="#12、乱码问题" class="headerlink" title="12、乱码问题"></a>12、乱码问题</h2><p>由于未指定浏览器和服务端编码，因此可能出现乱码的情况。</p><h3 id="12-1、request乱码"><a href="#12-1、request乱码" class="headerlink" title="12.1、request乱码"></a>12.1、request乱码</h3><p>对request对象使用<code>setCharacterEncoding()</code>方法，指定编码，可以避免从浏览器获得的数据存在乱码现象。</p><p>在调用request的任何其他方法前，使用如下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>); <span class="comment">//设置request对象的解码方式</span></span><br></pre></td></tr></table></figure><h3 id="12-2、response乱码"><a href="#12-2、response乱码" class="headerlink" title="12.2、response乱码"></a>12.2、response乱码</h3><p>第一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);    <span class="comment">//设置 HttpServletResponse使用utf-8编码</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);    <span class="comment">//通知浏览器使用utf-8解码</span></span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);  <span class="comment">//包含第一种方式的两个功能</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="http://c.biancheng.net/servlet/">Servlet入门教程 (biancheng.net)</a></p><p>[2] <a href="https://www.bilibili.com/video/BV1Y7411K7zz">尚硅谷最新版JavaWeb全套教程 java web零基础入门完整版_哔哩哔哩_bilibili</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器初探</title>
      <link href="/articles/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><ul><li>作为web开发人员，开发完的网页肯定是想通过ip或域名在浏览器上访问</li><li>用户使用浏览器访问网页就是发送http请求，web服务器响应请求的过程，所以解析http的工作就交给web服务器了</li><li>web服务器有很多，Tomcat是一款小巧灵活并使用最为广泛的轻量级Web应用服务器，提供了对Jsp和Servlet的支持</li></ul><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h3 id="1、版本支持"><a href="#1、版本支持" class="headerlink" title="1、版本支持"></a>1、版本支持</h3><table><caption>不同版本的 Tomcat 对各种规范的支持</caption><tbody><tr><th>Tomcat 版本</th><th>最新子版本</th><th>Servlet<br>规范</th><th>JSP<br>规范</th><th>EL<br>规范</th><th>WebSocket<br>规范</th><th>认证（JASIC）<br>规范</th><th>Java 版本</th></tr><tr><td>10.0.x</td><td>10.0.0</td><td>5.0</td><td>3.0</td><td>4.0</td><td>2.0</td><td>2.0</td><td>8 以及更高</td></tr><tr><td>9.0.x</td><td>9.0.36</td><td>4.0</td><td>2.3</td><td>3.0</td><td>1.1</td><td>1.1</td><td>8 以及更高</td></tr><tr><td>8.5.x</td><td>8.5.56</td><td>3.1</td><td>2.3</td><td>3.0</td><td>1.1</td><td>1.1</td><td>7 以及更高</td></tr><tr><td>8.0.x（已被取代）</td><td>8.0.53（已被取代）</td><td>3.1</td><td>2.3</td><td>3.0</td><td>1.1</td><td>N/A</td><td>7 以及更高</td></tr><tr><td>7.0.x</td><td>7.0.104</td><td>3.0</td><td>2.2</td><td>2.2</td><td>1.1</td><td>N/A</td><td>6 以及更高<br>（对于 WebSocket，支持 7 以及更高）</td></tr><tr><td>6.0.x（已废弃）</td><td>6.0.53（已废弃）</td><td>2.5</td><td>2.1</td><td>2.1</td><td>N/A</td><td>N/A</td><td>5 以及更高</td></tr><tr><td>5.5.x（已废弃）</td><td>5.5.36（已废弃）</td><td>2.4</td><td>2.0</td><td>N/A</td><td>N/A</td><td>N/A</td><td>1.4 以及更高</td></tr><tr><td>4.1.x（已废弃）</td><td>4.1.40（已废弃）</td><td>2.3</td><td>1.2</td><td>N/A</td><td>N/A</td><td>N/A</td><td>1.3 以及更高</td></tr><tr><td>3.3.x（已废弃）</td><td>3.3.2（已废弃）</td><td>2.2</td><td>1.1</td><td>N/A</td><td>N/A</td><td>N/A</td><td>1.1 以及更高</td></tr></tbody></table><h3 id="2、目录与文件"><a href="#2、目录与文件" class="headerlink" title="2、目录与文件"></a>2、目录与文件</h3><p>以下是 Tomcat 的一些关键目录：</p><ul><li><strong>/bin</strong>     命令中心：存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 <code>*.sh</code> 文件在功能上等同欲Windows 系统专用的 <code>*.bat</code> 文件。因为 Win32 的命令行缺乏某些功能，所以又额外地加入了一些文件。</li><li><strong>/conf</strong>    配置中心：配置文件及相关的 DTD。其中最重要的文件是 server.xml，这是容器的主配置文件。</li><li>/lib     Tomcat 的库文件。Tomcat 运行时需要的 jar 包所在的目录。</li><li>/temp    存储临时产生的文件，即缓存。</li><li><strong>/log</strong>     日志文件的默认目录。</li><li><strong>/webapps</strong> 存放 Web 应用的相关文件。web 应用放置到此目录下浏览器可以直接访问。</li><li>/work    编译以后的 class 文件。</li></ul><h3 id="3、安装方法"><a href="#3、安装方法" class="headerlink" title="3、安装方法"></a>3、安装方法</h3><p>首先需要安装JRE，不过多演示如何安装运行环境</p><p>使用魔法去该网站下载Tomcat服务器压缩文件：<a href="http://tomcat.apache.org/">Apache Tomcat® - Welcome!</a></p><p><img src="image-20210920222839029.png" alt="image-20210920222839029"></p><p>下载完成后，进行解压</p><p>本人尝试在Windows下部署，之后JavaEE完成之后，将再演示部署到Linux服务器上。</p><h3 id="4、启动Tomcat"><a href="#4、启动Tomcat" class="headerlink" title="4、启动Tomcat"></a>4、启动Tomcat</h3><p>安装配置好了 Tomcat 和 JDK，就可以将 Tomcat 跑起来了。进入 Tomcat 安装目录下的 bin 文件夹，找到 startup.bat 脚本文件，双击即可运行 Tomcat。</p><p>若在Linux下，可以使用<code>./startup.sh</code>启动服务器</p><p><img src="image-20210920224436509.png" alt="image-20210920224436509"></p><h4 id="4-1、解决显示乱码问题"><a href="#4-1、解决显示乱码问题" class="headerlink" title="4.1、解决显示乱码问题"></a>4.1、解决显示乱码问题</h4><p>在安装路径的conf文件夹下找到<code>logging.properties</code>的文件，将其中的<code>java.util.logging.ConsoleHandler.encoding = UTF-8</code>后的<code>UTF-8</code>修改为GBK编码(原因是憨批Windows的默认编码是GBK编码，若改Windows为UTF-8，相信我会有更多的bug……)</p><h4 id="4-2、访问网站"><a href="#4-2、访问网站" class="headerlink" title="4.2、访问网站"></a>4.2、访问网站</h4><p>访问<a href="http://localhost:8080/">http://localhost:8080/</a> 即可看到如下所示页面，说明服务启动成功</p><p><img src="image-20210920225448704.png" alt="image-20210920225448704"></p><h3 id="5、如何停止Tomcat服务器"><a href="#5、如何停止Tomcat服务器" class="headerlink" title="5、如何停止Tomcat服务器"></a>5、如何停止Tomcat服务器</h3><p>1.在windows下直接点击powershell右上角的【x】进行关闭</p><p>2.使用快捷键Ctrl+C关闭服务器</p><p>3.找到Tomcat安装路径下bin目录中的shutdown.bat关闭服务器，Linux使用shutdown.sh</p><h3 id="6、在IDEA中管理配置Tomcat服务器"><a href="#6、在IDEA中管理配置Tomcat服务器" class="headerlink" title="6、在IDEA中管理配置Tomcat服务器"></a>6、在IDEA中管理配置Tomcat服务器</h3><p>1.在IDEA中建立JavaEE应用时选择服务器</p><p><img src="image-20210920230636618.png" alt="image-20210920230636618"></p><p>未创建过服务器时可以新建服务器</p><p><img src="image-20210920230757407.png" alt="image-20210920230757407"></p><p>文件结构如下所示，使用Maven进行JAR包管理：</p><p><img src="image-20210920232900527.png" alt="image-20210920232900527"></p><p>配置Tomcat启动选项</p><p><img src="image-20210920232959173.png" alt="image-20210920232959173"></p><p>启动服务器：</p><p><img src="image-20210920233049107.png" alt="image-20210920233049107"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> 服务器部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础学习</title>
      <link href="/articles/MySQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/MySQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>MySQL是一个<strong>关系型数据库管理系统，</strong>由瑞典[MySQL AB](<a href="https://baike.baidu.com/item/MySQL">https://baike.baidu.com/item/MySQL</a> AB/2620844)公司开发，属于<a href="https://baike.baidu.com/item/Oracle">Oracle</a>旗下产品。MySQL是最流行的关系型数据库管理系统之一，在WEB应用方面，MySQL是最好的 RDBMS(Relational Database Management System，关系数据库管理系统)应用软件之一。</p><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般网站的开发都选择 MySQL 作为网站数据库。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="1、初识MySQL"><a href="#1、初识MySQL" class="headerlink" title="1、初识MySQL"></a>1、初识MySQL</h2><h3 id="1-1、MySQL的安装"><a href="#1-1、MySQL的安装" class="headerlink" title="1.1、MySQL的安装"></a>1.1、MySQL的安装</h3><p>首先我们需要在Oracle的官网下载MySQL的安装包，推荐下载ZIP压缩包，使用压缩包可以避免注册表产生的相关问题，下载完成后，对ZIP进行解压。</p><p>这里选择了下载8.025版本，可能会存在问题，理论上安装5.7版本应该是最稳定的，不过鉴于学习的目的，先瞎鼓捣尝试一下。</p><p>解压完成后，在根目录中，我们需要新建一个my.ini文件，该文件是mysql的配置文件，可以对mysql进行相关的配置。我的配置如下所示（网上偷师学到的，不保证靠谱，<strong>记住mysql安装目录一定要改成自己的！</strong>）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment">#设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\SourceFiles\mysql</span><br><span class="line"><span class="comment">#设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\SourceFiles\mysql\Data</span><br><span class="line"><span class="comment">#允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment">#允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">#服务端使用的字符集默认为utf8mb4</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment">#创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment">#默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment">#设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment">#设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></table></figure><p>之后配置系统变量，将<strong>mysql\bin</strong>目录添加到path环境变量中去，方便在命令行界面使用命令。</p><p>使用管理员权限打开cmd界面（<strong>否则将没有权限开启服务</strong>）</p><p>将路径切换到mysql的bin目录下，使用命令<code>mysqld -install</code>安装mysql。再输入<code>mysqld --initialize-insecure --user=mysql</code>初始化数据文件（可以看到出现了data文件夹，里面以db形式存放了数据库的配置信息）</p><p>之后启动mysql，使用<code>mysql -u root -p</code>进入mysql管理界面（此时密码为空，直接回车进入即可）</p><p>进入界面后，可以更改root密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p>(记住SQL语句输入完成后需要输入<code>;</code>)</p><p>(输入<code>flash privileges</code>;刷新权限)</p><p>最后重启mysql即可正常进行使用：</p><p>在管理员权限下的控制台输入：</p><ul><li><code>net stop mysql</code> 停止mysql服务</li><li><code>net start mysql</code> 启动mysql服务</li></ul><p>之后尝试用<code>mysql -u&#39;root&#39; -p&#39;password&#39;</code>进行登录(‘root’ 可以修改为自己的<code>用户</code> ‘password’改成自己设置的<code>密码</code>，如<code>123456</code>，<strong>切记-u和’root’ 、-p和’password’ 之间没有空格！</strong>)</p><blockquote><p><strong>注意：若mysql服务安装错误，可以使用<code>sc delete mysql</code>语句在管理员权限下清空服务</strong></p></blockquote><h3 id="1-2、SQL可视化软件"><a href="#1-2、SQL可视化软件" class="headerlink" title="1.2、SQL可视化软件"></a>1.2、SQL可视化软件</h3><ul><li>SQLyog        体积较小，功能较为完善</li><li>Navicat       体积较大，功能较多</li></ul><p>本次尝试使用Navicat对数据库进行可视化管理！</p><p><img src="image-20210813111516192-16288245176381.png" alt="Navicat主界面"></p><center>Navicat主界面如图所示：<center/><p><img src="image-20210813112018853-16288248202802.png" alt="尝试连接到localhost:3306数据库"></p><center>尝试连接到localhost:3306数据库：<center/><h3 id="1-3、测试基本的新建数据库操作"><a href="#1-3、测试基本的新建数据库操作" class="headerlink" title="1.3、测试基本的新建数据库操作"></a>1.3、测试基本的新建数据库操作</h3><blockquote><p>要求：新建一个数据库，名称为：school</p><p>​           新建一张表，表名为：<code>student</code></p><p>​           新建一些字段：id, name, age等</p></blockquote><p><img src="image-20210813113700031.png" alt="image-20210813113700031"></p><center> 新建数据库，名称为school，使用utf8编码，排序规则使用utf8_general_ci<center/><p><img src="image-20210813113838394.png" alt="image-20210813113838394"></p><center> 使用InnoDB引擎，编码集选择utf8，排序规则选择utf8_general_ci<center/><p><img src="image-20210813114333554.png" alt="image-20210813114333554"></p><h3 id="1-4、使用命令行界面连接数据库"><a href="#1-4、使用命令行界面连接数据库" class="headerlink" title="1.4、使用命令行界面连接数据库"></a>1.4、使用命令行界面连接数据库</h3><p>使用语句<code>mysql -uroot -p</code>，之后输入密码，密码正确后，即可正确进入MySQL</p><p>MySQL中，使用<code>--</code>作为注释，例如<code>-- 注释</code></p><p><strong>简单的一些基本语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;-- 展示所有的数据库</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| school             |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.03 sec)</span><br><span class="line"></span><br><span class="line">-- 使用ctrl+c可以强行终止mysql语句</span><br><span class="line"></span><br><span class="line">mysql&gt; use school-- 切换数据库 使用use加数据库名</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;-- 展示该数据库中的所有的表</span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_school |</span><br><span class="line">+------------------+</span><br><span class="line">| student          |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; status-- 查看当前状态</span><br><span class="line">--------------</span><br><span class="line">D:\SourceFiles\mysql\bin\mysql.exe  Ver 8.0.25 for Win64 on x86_64 (MySQL Community Server - GPL)</span><br><span class="line"></span><br><span class="line">Connection id:          12</span><br><span class="line">Current database:       school</span><br><span class="line">Current user:           root@localhost</span><br><span class="line">SSL:                    Cipher in use is TLS_AES_256_GCM_SHA384</span><br><span class="line">Using delimiter:        ;</span><br><span class="line">Server version:         8.0.25 MySQL Community Server - GPL</span><br><span class="line">Protocol version:       10</span><br><span class="line">Connection:             localhost via TCP/IP</span><br><span class="line">Server characterset:    utf8mb4</span><br><span class="line">Db     characterset:    utf8mb3</span><br><span class="line">Client characterset:    utf8mb4</span><br><span class="line">Conn.  characterset:    utf8mb4</span><br><span class="line">TCP port:               3306</span><br><span class="line">Binary data as:         Hexadecimal</span><br><span class="line">Uptime:                 4 days 7 hours 42 min 40 sec</span><br><span class="line"></span><br><span class="line">Threads: 2  Questions: 224  Slow queries: 0  Opens: 199  Flush tables: 3  Open tables: 118  Queries per second avg: 0.000</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">mysql&gt; describe student;-- 显示student表中的信息</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| id    | int          | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(100) | NO   |     | NULL    |       |</span><br><span class="line">| age   | int          | NO   |     | NULL    |       |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show columns from student;-- 显示student表中的信息，使用describe较为简单</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| id    | int          | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(100) | NO   |     | NULL    |       |</span><br><span class="line">| age   | int          | NO   |     | NULL    |       |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exit；-- 退出与MySQL的连接</span><br><span class="line"></span><br><span class="line">-- 单行注释（SQL本身的注释）</span><br><span class="line"></span><br><span class="line">/*SQL的多行注释</span><br><span class="line">hello，</span><br><span class="line">world！</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>数据库的基本语言</strong>    核心即CRUD业务(增删改查)</p><blockquote><p>DDL    定义</p><p>DML    操作</p><p>DQL    查询</p><p>DCL    控制</p></blockquote><h2 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h2><p>操作数据库 &gt; 操作数据库中的表 &gt; 操作数据库中的表的数据</p><p><strong>mysql关键字不区分大小写</strong></p><h3 id="2-1、SQL基本信息"><a href="#2-1、SQL基本信息" class="headerlink" title="2.1、SQL基本信息"></a>2.1、SQL基本信息</h3><h4 id="2-1-1、表（table）"><a href="#2-1-1、表（table）" class="headerlink" title="2.1.1、表（table）"></a>2.1.1、表（table）</h4><p><strong>某种特定类型数据的结构化清单</strong></p><p>数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的，这表示数据库中没有其他表具有相同的名字。</p><blockquote><p><strong>表名</strong> 表名的唯一性取决于多个因素，如数据库名和表名等的结合。这表示，虽然在相同数据库中不能两次使用相同的表名，但在不同的数据库中却可以使用相同的表名。</p></blockquote><h4 id="2-1-2、模式（schema）"><a href="#2-1-2、模式（schema）" class="headerlink" title="2.1.2、模式（schema）"></a>2.1.2、模式（schema）</h4><p><strong>关于数据库和表的布局及特性的信息</strong></p><blockquote><p>有时，模式用作数据库的同义词。遗憾的是，模式的含义通常在上下文中并不是很清晰。</p></blockquote><h4 id="2-1-3、列（column）表中的一个字段"><a href="#2-1-3、列（column）表中的一个字段" class="headerlink" title="2.1.3、列（column）表中的一个字段"></a>2.1.3、列（column）表中的一个字段</h4><p><strong>所有表都是由一个或多个列组成的。</strong></p><blockquote><p><strong>分解数据</strong> 正确地将数据分解为多个列极为重要。例如，城市、州、邮政编码应该总是独立的列。通过把它分解开，才有可能利用特定的列对数据进行排序和过滤（如，找出特定州或特定城市的所有顾客）。如果城市和州组合在一个列中，则按州进行排序或过滤会很困难。</p></blockquote><blockquote><p><strong>数据类型（datatype）</strong>所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据。</p></blockquote><h4 id="2-1-4、行（row）-表中的一个记录"><a href="#2-1-4、行（row）-表中的一个记录" class="headerlink" title="2.1.4、行（row） 表中的一个记录"></a>2.1.4、行（row） 表中的一个记录</h4><blockquote><p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p></blockquote><h4 id="2-1-5、主键（primary-key）"><a href="#2-1-5、主键（primary-key）" class="headerlink" title="2.1.5、主键（primary key）"></a>2.1.5、主键（primary key）</h4><p><strong>一列（或一组列），其值能够唯一区分表中每个行。</strong></p><p>唯一标识表中每行的这个列（或这组列）称为主键。主键用来表示一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安全的方法保证只涉及相关的行。</p><blockquote><p><strong>应该总是定义主键</strong> 虽然并不总是都需要主键，但大多数数据库设计人员都应保证他们创建的每个表具有一个主键，以便于以后的数据操纵和管理。</p></blockquote><p>表中的任何列都可以作为主键，只要它满足以下条件：</p><ul><li>任意两行都不具有相同的主键值；</li><li>每个行都必须具有一个主键值（主键列不允许NULL值）。</li></ul><p>主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。在使用多列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）。</p><blockquote><p><strong>主键的最好习惯</strong> 除MySQL强制实施的规则外，应该坚持的几个普遍认可的最好习惯为：</p><ul><li>不更新主键列中的值；</li><li>不重用主键列的值；</li><li>不在主键列中使用可能会更改的值。（例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。）</li></ul></blockquote><h3 id="2-2、导入样例的数据库"><a href="#2-2、导入样例的数据库" class="headerlink" title="2.2、导入样例的数据库"></a>2.2、导入样例的数据库</h3><p>我们使用《MySQL必知必会》内提供的样例表进行操作。</p><p>进入书中提供的网址：<a href="https://forta.com/books/0672327120/">MySQL Crash Course – Ben Forta</a></p><p>此时网站提供的样例表下载资源URL为(若不能下载，请尝试挂梯子或者进入网站下载)：<a href="https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip">点击下载</a></p><p>下载完成后存储到磁盘位置，之后使用文件(create.sql  populate.sql)进行样例表的创建。</p><h4 id="2-2-1、创建数据库"><a href="#2-2-1、创建数据库" class="headerlink" title="2.2.1、创建数据库"></a>2.2.1、创建数据库</h4><p>使用mysql命令行界面：</p><p>输入创建数据库命令：create database crashcourse;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database crashcourse;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| crashcourse        |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| school             |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>使用crashcourse作为数据库的名称，便于与《MySQL必知必会》上的案例结合。</p><h4 id="2-2-2、选取数据库"><a href="#2-2-2、选取数据库" class="headerlink" title="2.2.2、选取数据库"></a>2.2.2、选取数据库</h4><p>使用use命令：<code>use crashcourse;</code></p><h4 id="2-2-3、执行create-sql脚本"><a href="#2-2-3、执行create-sql脚本" class="headerlink" title="2.2.3、执行create.sql脚本"></a>2.2.3、执行create.sql脚本</h4><p>输入执行脚本的命令，即指定数据库的源；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use crashcourse;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; source E:\DataBase\mysql_scripts\create.sql</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h4 id="2-2-4、执行populate-sql脚本"><a href="#2-2-4、执行populate-sql脚本" class="headerlink" title="2.2.4、执行populate.sql脚本"></a>2.2.4、执行populate.sql脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; source E:\DataBase\mysql_scripts\populate.sql</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-5、查看表"><a href="#2-2-5、查看表" class="headerlink" title="2.2.5、查看表"></a>2.2.5、查看表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_crashcourse |</span><br><span class="line">+-----------------------+</span><br><span class="line">| customers             |</span><br><span class="line">| orderitems            |</span><br><span class="line">| orders                |</span><br><span class="line">| productnotes          |</span><br><span class="line">| products              |</span><br><span class="line">| vendors               |</span><br><span class="line">+-----------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-6、查看表列"><a href="#2-2-6、查看表列" class="headerlink" title="2.2.6、查看表列"></a>2.2.6、查看表列</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show columns from customers;-- 使用SHOW COLUMNS展示表列，或者使用DESCRIBE</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type      | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| cust_id      | int       | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| cust_name    | char(50)  | NO   |     | NULL    |                |</span><br><span class="line">| cust_address | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_city    | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_state   | char(5)   | YES  |     | NULL    |                |</span><br><span class="line">| cust_zip     | char(10)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_country | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_contact | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_email   | char(255) | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; describe customers;-- 使用DESCRIBE展示表列</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type      | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| cust_id      | int       | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| cust_name    | char(50)  | NO   |     | NULL    |                |</span><br><span class="line">| cust_address | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_city    | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_state   | char(5)   | YES  |     | NULL    |                |</span><br><span class="line">| cust_zip     | char(10)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_country | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_contact | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_email   | char(255) | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>可以看到，上述表列中，有一个Extra属性，其中出现了auto_increment; </p><p>该属性的含义为自动增加编号而不必自己去进行定义赋值。</p><blockquote><p><strong>什么是自动增量？</strong> 某些表列需要唯一值。例如，订单编号、雇员ID或（如上面例子中所示的）顾客ID。在每个行添加到表中时，MySQL可以自动地为每个行分配下一个可用编号，不用在添加一行时手动分配唯一值（这样做必须记住最后一次使用的值）。这个功能就是所谓的自动增量。如果需要它，则必须在用CREATE语句创建表时把它作为表定义的组成部分。</p></blockquote><h2 id="3、检索数据"><a href="#3、检索数据" class="headerlink" title="3、检索数据"></a>3、检索数据</h2><h3 id="3-1、SELECT语句"><a href="#3-1、SELECT语句" class="headerlink" title="3.1、SELECT语句"></a>3.1、SELECT语句</h3><p>SELECT语句的作用是从一个或者多个表中检索出信息。</p><p>为了使用SELECT语句，至少要提供两条信息：</p><ol><li>想选择什么信息 </li><li>以及从什么地方选择</li></ol><h4 id="3-1-1、检索单个列"><a href="#3-1-1、检索单个列" class="headerlink" title="3.1.1、检索单个列"></a>3.1.1、检索单个列</h4><p>使用语句：<code>select FIELD from TABLE;</code> </p><p>此语句检索单个列所需的列名在SELECT关键字之后给出，FROM关键字指出从其中检索数据的表名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; describe products;</span><br><span class="line">+------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field      | Type         | Null | Key | Default | Extra |</span><br><span class="line">+------------+--------------+------+-----+---------+-------+</span><br><span class="line">| prod_id    | char(10)     | NO   | PRI | NULL    |       |</span><br><span class="line">| vend_id    | int          | NO   | MUL | NULL    |       |</span><br><span class="line">| prod_name  | char(255)    | NO   |     | NULL    |       |</span><br><span class="line">| prod_price | decimal(8,2) | NO   |     | NULL    |       |</span><br><span class="line">| prod_desc  | text         | YES  |     | NULL    |       |</span><br><span class="line">+------------+--------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select prod_id</span><br><span class="line">    -&gt; from products;-- 从products表中选择prod_id列，显示数据</span><br><span class="line">+---------+</span><br><span class="line">| prod_id |</span><br><span class="line">+---------+</span><br><span class="line">| ANV01   |</span><br><span class="line">| ANV02   |</span><br><span class="line">| ANV03   |</span><br><span class="line">| FU1     |</span><br><span class="line">| OL1     |</span><br><span class="line">| DTNTR   |</span><br><span class="line">| FB      |</span><br><span class="line">| FC      |</span><br><span class="line">| SAFE    |</span><br><span class="line">| SLING   |</span><br><span class="line">| TNT1    |</span><br><span class="line">| TNT2    |</span><br><span class="line">| JP1000  |</span><br><span class="line">| JP2000  |</span><br><span class="line">+---------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>若进行该查询，可能会发现显示出的数据顺序和此处的顺序不相同，原因是未指定排序查询结果，因此返回的数据顺序不具有特殊意义。</p></blockquote><blockquote><p><strong>SQL语句和大小写</strong> 请注意，SQL语句不区分大小写，因此SELECT与select是相同的。同样，写成Select也没有关系。<br>   许多SQL开发人员喜欢对所有SQL关键字使用大写，而对所有列和表名使用小写，这样做使代码更易于阅读和调试。</p><p>​    不过，一定要认识到虽然SQL是不区分大小写的，但有些标识符（如数据库名、表名、列名）可能不同：在MySQL 4.1及之前的版本中，这些标识符默认是区分大小写的；在MySQL 4.1.1版本中，这些标识符默认是不区分大小写的。<br>​    最佳方式是按照大小写的惯例，且使用时保持一致。</p></blockquote><blockquote><p><strong>使用空格</strong> 在处理SQL语句时，其中所有空格都被忽略。SQL语句可以在一行上给出，也可以分成许多行。多数SQL开发人员认为将SQL语句分成多行更容易阅读和调试。</p></blockquote><h4 id="3-1-2、检索多个列"><a href="#3-1-2、检索多个列" class="headerlink" title="3.1.2、检索多个列"></a>3.1.2、检索多个列</h4><blockquote><p><strong>逗号</strong> 在选择多个列时，一定要在列名之前加上逗号，最后一个列名不加逗号。</p></blockquote><p>使用语句：<code>SELECT prod_id, prod_name, prod_price FROM products;</code></p><p>此语句指令了3个列名，列名之间使用逗号进行分隔，以此对多个列检索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id, prod_name, prod_price FROM products;</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| prod_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| ANV01   | .5 ton anvil   |       5.99 |</span><br><span class="line">| ANV02   | 1 ton anvil    |       9.99 |</span><br><span class="line">| ANV03   | 2 ton anvil    |      14.99 |</span><br><span class="line">| DTNTR   | Detonator      |      13.00 |</span><br><span class="line">| FB      | Bird seed      |      10.00 |</span><br><span class="line">| FC      | Carrots        |       2.50 |</span><br><span class="line">| FU1     | Fuses          |       3.42 |</span><br><span class="line">| JP1000  | JetPack 1000   |      35.00 |</span><br><span class="line">| JP2000  | JetPack 2000   |      55.00 |</span><br><span class="line">| OL1     | Oil can        |       8.99 |</span><br><span class="line">| SAFE    | Safe           |      50.00 |</span><br><span class="line">| SLING   | Sling          |       4.49 |</span><br><span class="line">| TNT1    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT2    | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-1-3、检索所有列"><a href="#3-1-3、检索所有列" class="headerlink" title="3.1.3、检索所有列"></a>3.1.3、检索所有列</h4><p>使用语句：<code>SELECT * FROM products;</code></p><p>此语句使用通配符(*)，返回表中的所有列，列的顺序不固定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM products;</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |</span><br><span class="line">| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |</span><br><span class="line">| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |</span><br><span class="line">| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |</span><br><span class="line">| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |</span><br><span class="line">| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |</span><br><span class="line">| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |</span><br><span class="line">| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |</span><br><span class="line">| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |</span><br><span class="line">| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |</span><br><span class="line">| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |</span><br><span class="line">| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |</span><br><span class="line">| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |</span><br><span class="line">| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>该语句可以用来检索未知列，因为通配符可以匹配所有的列名</p></blockquote><h4 id="3-1-4、检索不同的行"><a href="#3-1-4、检索不同的行" class="headerlink" title="3.1.4、检索不同的行"></a>3.1.4、检索不同的行</h4><p>使用SELECT返回的是所有的匹配的行，若不想让每个值在每次都出现，可以使用<code>DISTINCT</code>关键字使得MySQL返回不同的值。</p><p>使用语句：<code>SELECT DISTINCT vend_id FROM products;</code></p><p>此语句只返回不同的<code>vend_id</code>行，若使用DISTINCT关键字，必须放在列名之前。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DISTINCT vend_id FROM products;-- 使用DISTINCT关键字，查询不同值</span><br><span class="line">+---------+</span><br><span class="line">| vend_id |</span><br><span class="line">+---------+</span><br><span class="line">|    1001 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1005 |</span><br><span class="line">+---------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT vend_id FROM products;-- 不使用DISTINCT关键字，查询所有值</span><br><span class="line">+---------+</span><br><span class="line">| vend_id |</span><br><span class="line">+---------+</span><br><span class="line">|    1001 |</span><br><span class="line">|    1001 |</span><br><span class="line">|    1001 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1005 |</span><br><span class="line">|    1005 |</span><br><span class="line">+---------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>注意！</strong> 不能部分使用DISTINCT，若使用则必须所有的列都使用，否则将会检索所有的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DISTINCT vend_id,</span><br><span class="line">    -&gt; prod_price</span><br><span class="line">    -&gt; FROM products;</span><br><span class="line">+---------+------------+</span><br><span class="line">| vend_id | prod_price |</span><br><span class="line">+---------+------------+</span><br><span class="line">|    1001 |       5.99 |</span><br><span class="line">|    1001 |       9.99 |</span><br><span class="line">|    1001 |      14.99 |</span><br><span class="line">|    1003 |      13.00 |</span><br><span class="line">|    1003 |      10.00 |</span><br><span class="line">|    1003 |       2.50 |</span><br><span class="line">|    1002 |       3.42 |</span><br><span class="line">|    1005 |      35.00 |</span><br><span class="line">|    1005 |      55.00 |</span><br><span class="line">|    1002 |       8.99 |</span><br><span class="line">|    1003 |      50.00 |</span><br><span class="line">|    1003 |       4.49 |</span><br><span class="line">+---------+------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-1-5、限制结果"><a href="#3-1-5、限制结果" class="headerlink" title="3.1.5、限制结果"></a>3.1.5、限制结果</h4><p>使用语句：<code>SELECT prod_name FROM products LIMIT 5;</code></p><p>此语句使用LIMIT进行限制，使得MySQL返回的行数不多于5行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products LIMIT 5;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+ </span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">| Detonator    |</span><br><span class="line">| Bird seed    |</span><br><span class="line">+--------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>为了得出下一个5行，可以指定要检索的开始行和检索行数：</p><p>使用语句：<code>SELECT prod_name FROM products LIMIT 5,5;</code></p><p>此语句中：<code>LIMIT 5,5</code>指示Mysql返回从第5行开始的之后5行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products LIMIT 5,5;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| Carrots      |</span><br><span class="line">| Fuses        |</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">| Oil can      |</span><br><span class="line">+--------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>注意！</strong> 行数从第0行开始，故使用LIMIT 1，1检测出的是第二行而不是第一行。当行数没有足够的行时，使用LIMIT只返回它能返回的行。</p><h4 id="3-1-6、使用完全限定的表名"><a href="#3-1-6、使用完全限定的表名" class="headerlink" title="3.1.6、使用完全限定的表名"></a>3.1.6、使用完全限定的表名</h4><p>使用语句：<code>SLEECT products.prod_name FROM products;</code></p><p>此语句中：限定了一个完全被指定了表和列的列名，在某些特殊情况下，需要使用该条语句！</p><h3 id="3-2、ORDER-BY子句-排序数据"><a href="#3-2、ORDER-BY子句-排序数据" class="headerlink" title="3.2、ORDER BY子句(排序数据)"></a>3.2、ORDER BY子句(排序数据)</h3><p>使用SELECT语句可以检索需要的数据，但是，正如3.1节中所示，并不存在特定的顺序。如果不排序，数据一般将以它在底层表中出现的顺序显示。<strong>这可以是数据最初添加到表中的顺序</strong>。但是，如果数据后来进行过更新或删除，则此顺序将会受到MySQL重用回收存储空间的影响。<strong>因此，如果不明确控制的话，不能（也不应该）依赖该排序顺序。</strong>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义。</p><blockquote><p><strong>子句（clause）</strong> SQL语句由子句构成，有些子句是必需的，而有的是可选的。一个子句通常由一个关键字和所提供的数据组成。子句的例子有SELECT语句的FROM子句，我们在前一章看到过这个子句。<br>为了明确地排序用SELECT语句检索出的数据，可使用<code>ORDER BY</code>子句。<code>ORDER BY</code>子句取一个或多个列的名字，据此对输出进行排序。</p></blockquote><h4 id="3-2-1、按照单个列排序"><a href="#3-2-1、按照单个列排序" class="headerlink" title="3.2.1、按照单个列排序"></a>3.2.1、按照单个列排序</h4><p>使用语句：<code>SELECT prod_name FROM products ORDER BY prod_name;</code></p><p>此语句中：指示了按照prod_name列以字母顺序(字典序)进行数据的排序，使用了ORDER BY子句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products ORDER BY prod_name;</span><br><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| .5 ton anvil   |</span><br><span class="line">| 1 ton anvil    |</span><br><span class="line">| 2 ton anvil    |</span><br><span class="line">| Bird seed      |</span><br><span class="line">| Carrots        |</span><br><span class="line">| Detonator      |</span><br><span class="line">| Fuses          |</span><br><span class="line">| JetPack 1000   |</span><br><span class="line">| JetPack 2000   |</span><br><span class="line">| Oil can        |</span><br><span class="line">| Safe           |</span><br><span class="line">| Sling          |</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-2-2、按照多个列进行排序"><a href="#3-2-2、按照多个列进行排序" class="headerlink" title="3.2.2、按照多个列进行排序"></a>3.2.2、按照多个列进行排序</h4><p>经常会出现需要按照多个列进行排序的情况，例如：希望先按照雇员的姓排序，排序之后再按照雇员的名进行排序(即：公司人员较多，出现较多重复姓氏)，此时若能够按照多个列进行排序，则很有用。</p><p>使用语句：<code>SELECT * FROM products ORDER BY vend_id, prod_price;</code></p><p>此语句中：使用*获取products中的所有信息，再首先按照<code>vend_id</code>进行升序排序，排序后若出现<code>vend_id</code>相同的行，再按照``prod_price`对价格进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM products ORDER BY vend_id, prod_price;</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |</span><br><span class="line">| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |</span><br><span class="line">| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |</span><br><span class="line">| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |</span><br><span class="line">| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |</span><br><span class="line">| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |</span><br><span class="line">| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |</span><br><span class="line">| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |</span><br><span class="line">| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |</span><br><span class="line">| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |</span><br><span class="line">| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |</span><br><span class="line">| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |</span><br><span class="line">| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |</span><br><span class="line">| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-2-3、指定排序方向"><a href="#3-2-3、指定排序方向" class="headerlink" title="3.2.3、指定排序方向"></a>3.2.3、指定排序方向</h4><p>数据排序可以按照升序（默认排序顺序），也可以按照降序排序，若使用降序，则必须指定<code>DESC</code>关键字(descent)对列进行降序排序。</p><p>使用语句：<code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name;</code></p><p>此语句中：按照倒序（降价）的顺序排序商品，再对产品的名称进行正序排序；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name;</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| JP2000  |      55.00 | JetPack 2000   |</span><br><span class="line">| SAFE    |      50.00 | Safe           |</span><br><span class="line">| JP1000  |      35.00 | JetPack 1000   |</span><br><span class="line">| ANV03   |      14.99 | 2 ton anvil    |</span><br><span class="line">| DTNTR   |      13.00 | Detonator      |</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">| ANV02   |       9.99 | 1 ton anvil    |</span><br><span class="line">| OL1     |       8.99 | Oil can        |</span><br><span class="line">| ANV01   |       5.99 | .5 ton anvil   |</span><br><span class="line">| SLING   |       4.49 | Sling          |</span><br><span class="line">| FU1     |       3.42 | Fuses          |</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>若对多个列使用降序排序，则必须对每个列指定<code>DESC</code>关键字。与此同时，若想使用升序排序，需要使用<code>ASC</code>关键字(ascending)，但是事实上不必要如此设定，因为升序排序是默认选项。</p></blockquote><blockquote><p><strong>区分大小写和排序顺序</strong> 在对文本性的数据进行排序时，A与a相同吗？a位于B之前还是位于Z之后？这些问题不是理论问题，其答案取决于数据库如何设置。在字典（dictionary）排序顺序中，A被视为与a相同，这是MySQL（和大多数数据库管理系统）的默认行为。但是，许多数据库管理员能够在需要时改变这种行为（如果你的数据库包含大量外语字符，可能必须这样做）。</p></blockquote><h4 id="3-2-4、查询最值"><a href="#3-2-4、查询最值" class="headerlink" title="3.2.4、查询最值"></a>3.2.4、查询最值</h4><p>使用ORDER BY和LIMIT的组合，可以很方便的找到一列中的最值。</p><p>使用语句：<code>SELECT prod_price, prod_name FROM products ORDER BY prod_price DESC LIMIT 1;</code></p><p>此语句中：使用了ORDER BY和LIMIT的组合，找到价格最昂贵的物品的价格和名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_price, prod_name FROM products ORDER BY prod_price DESC LIMIT 1;</span><br><span class="line">+------------+--------------+</span><br><span class="line">| prod_price | prod_name    |</span><br><span class="line">+------------+--------------+</span><br><span class="line">|      55.00 | JetPack 2000 |</span><br><span class="line">+------------+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="3-3、WHERE子句-过滤数据"><a href="#3-3、WHERE子句-过滤数据" class="headerlink" title="3.3、WHERE子句(过滤数据)"></a>3.3、WHERE子句(过滤数据)</h3><p>数据库表一般包含大量的数据，很少需要检索表中所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。</p><p>一般使用SELECT语句和WHERE子句进行，在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。WHERE子句在表名（FROM子句）之后给出。</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE prod_price = 2.5;</code></p><p>此语句中：将查询products表中，prod_price (价格)等于2.5的元素。并将这些行返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id, prod_price FROM products WHERE prod_price = 2.5;</span><br><span class="line">+---------+------------+</span><br><span class="line">| prod_id | prod_price |</span><br><span class="line">+---------+------------+</span><br><span class="line">| FC      |       2.50 |</span><br><span class="line">| TNT1    |       2.50 |</span><br><span class="line">+---------+------------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>SQL过滤与应用过滤</strong> 数据也可以在应用层过滤。为此目的，SQL的SELECT语句为客户机应用检索出超过实际所需的数据，然后客户机代码对返回数据进行循环，以提取出需要的行。<br>    通常，这种实现并不令人满意。因此，对数据库进行了优化，以便快速有效地对数据进行过滤。让客户机应用（或开发语言）处理数据库的工作将会极大地影响应用的性能，并且使所创建的应用完全不具备可伸缩性。此外，如果在客户机上过滤数据，服务器不得不通过网络发送多余的数据，这将导致网络带宽的浪费。</p></blockquote><blockquote><p>若使用ORDER BY和WHERE子句，应该将ORDER BY位于WHERE之后</p></blockquote><h4 id="3-3-1、WHERE子句操作符"><a href="#3-3-1、WHERE子句操作符" class="headerlink" title="3.3.1、WHERE子句操作符"></a>3.3.1、WHERE子句操作符</h4><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在指定的两个值之间</td></tr></tbody></table><p>MySQL支持以上的所有操作符，可以用在WHERE后，进行条件判断</p><h4 id="3-3-2、检查单个值"><a href="#3-3-2、检查单个值" class="headerlink" title="3.3.2、检查单个值"></a>3.3.2、检查单个值</h4><p>使用语句：<code>SELECT * FROM products WHERE prod_name = &#39;fuses&#39;;</code></p><p>此语句中：检查prod_name为’fuses’的行，它返回prod_name的值为Fuses的一行。<code>MySQL在执行匹配时默认不区分大小写，所以fuses与Fuses匹配。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM products WHERE prod_name = &#x27;fuses&#x27;;</span><br><span class="line">+---------+---------+-----------+------------+---------------------+</span><br><span class="line">| prod_id | vend_id | prod_name | prod_price | prod_desc           |</span><br><span class="line">+---------+---------+-----------+------------+---------------------+</span><br><span class="line">| FU1     |    1002 | Fuses     |       3.42 | 1 dozen, extra long |</span><br><span class="line">+---------+---------+-----------+------------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE prod_price &lt; 10;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name, prod_price FROM products WHERE prod_price &lt; 10;</span><br><span class="line">+---------------+------------+</span><br><span class="line">| prod_name     | prod_price |</span><br><span class="line">+---------------+------------+</span><br><span class="line">| .5 ton anvil  |       5.99 |</span><br><span class="line">| 1 ton anvil   |       9.99 |</span><br><span class="line">| Carrots       |       2.50 |</span><br><span class="line">| Fuses         |       3.42 |</span><br><span class="line">| Oil can       |       8.99 |</span><br><span class="line">| Sling         |       4.49 |</span><br><span class="line">| TNT (1 stick) |       2.50 |</span><br><span class="line">+---------------+------------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT * FROM products WHERE prod_price BETWEEN 5 AND 10;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM products WHERE prod_price BETWEEN 5 AND 10;</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |</span><br><span class="line">| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |</span><br><span class="line">| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |</span><br><span class="line">| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |</span><br><span class="line">| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-3-2、不匹配检查"><a href="#3-3-2、不匹配检查" class="headerlink" title="3.3.2、不匹配检查"></a>3.3.2、不匹配检查</h4><p>使用语句：<code>SELECT vend_id, prod_name FROM products WHERE vend_id != 1003 AND vend_id &lt;&gt; 1001;</code></p><p>此语句中：使用<code>!=</code>和<code>&lt;&gt;</code>进行不匹配检查，索引不满足需求的行，可以看到使用两种操作符可以得到一样的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id, prod_name FROM products WHERE vend_id != 1003 AND vend_id &lt;&gt; 1001;</span><br><span class="line">+---------+--------------+</span><br><span class="line">| vend_id | prod_name    |</span><br><span class="line">+---------+--------------+</span><br><span class="line">|    1002 | Fuses        |</span><br><span class="line">|    1002 | Oil can      |</span><br><span class="line">|    1005 | JetPack 1000 |</span><br><span class="line">|    1005 | JetPack 2000 |</span><br><span class="line">+---------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-3-3、范围值检查"><a href="#3-3-3、范围值检查" class="headerlink" title="3.3.3、范围值检查"></a>3.3.3、范围值检查</h4><p>使用<code>BETWEEN</code>操作符，可以用来进行范围值检查</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 5 AND 10 AND vend_id != 1001;</code></p><p>此语句中：查找价格在5到10之间且id不为1001的所有行。<strong>在使用BETWEEN时，必须指定两个值——所需范围的低端值和高端值。这两个值必须用AND关键字分隔。BETWEEN匹配范围中所有值，包括指定的开始值和结束值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 5 AND 10 AND vend_id != 1001;</span><br><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-3-4、空值检查"><a href="#3-3-4、空值检查" class="headerlink" title="3.3.4、空值检查"></a>3.3.4、空值检查</h4><p>在创建表时，可以指定当前的列中能否存在不包含值，若一个列不包含值，视作包含空值NULL</p><blockquote><p>NULL 无值（no value），它与字段包含0、空字符串或仅仅包含空格不同。</p></blockquote><p>使用<code>IS NULL</code>子句可以返回有空值的列，例如查没有填写家庭地址的客户。</p><p>使用语句：<code>SELECT * FROM customers WHERE cust_email IS NULL;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM customers WHERE cust_email IS NULL;</span><br><span class="line">+---------+-------------+------------------+-----------+------------+----------+--------------+--------------+------------+</span><br><span class="line">| cust_id | cust_name   | cust_address     | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email |</span><br><span class="line">+---------+-------------+------------------+-----------+------------+----------+--------------+--------------+------------+</span><br><span class="line">|   10002 | Mouse House | 333 Fromage Lane | Columbus  | OH         | 43333    | USA          | Jerry Mouse  | NULL       |</span><br><span class="line">|   10005 | E Fudd      | 4545 53rd Street | Chicago   | IL         | 54545    | USA          | E Fudd       | NULL       |</span><br><span class="line">+---------+-------------+------------------+-----------+------------+----------+--------------+--------------+------------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>NULL与不匹配</strong> 在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。</p><p>因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。</p></blockquote><h3 id="3-4、组合WHERE子句-过滤数据"><a href="#3-4、组合WHERE子句-过滤数据" class="headerlink" title="3.4、组合WHERE子句(过滤数据)"></a>3.4、组合WHERE子句(过滤数据)</h3><p>我们在使用WHERE子句时，还可以使用AND OR NOT IN这样的操作符进行匹配。</p><h4 id="3-4-1、AND操作符"><a href="#3-4-1、AND操作符" class="headerlink" title="3.4.1、AND操作符"></a>3.4.1、AND操作符</h4><p>使用语句：<code>SELECT prod_id, prod_price, prod_name FROM products WHERE vend_id = 1003 AND prod_price &lt;= 10 AND prod_name != &#39;Sling&#39;;</code></p><p>此语句中：使用了AND操作符来进行匹配，若存在多个与逻辑，需要使用多个AND。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id, prod_price, prod_name FROM products WHERE vend_id = 1003 AND prod_price &lt;= 10 AND prod_name != &#x27;Sling&#x27;;</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-4-2、OR操作符"><a href="#3-4-2、OR操作符" class="headerlink" title="3.4.2、OR操作符"></a>3.4.2、OR操作符</h4><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003;</span><br><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Fuses          |       3.42 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| Detonator      |      13.00 |</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Carrots        |       2.50 |</span><br><span class="line">| Safe           |      50.00 |</span><br><span class="line">| Sling          |       4.49 |</span><br><span class="line">| TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-4-3、计算次序"><a href="#3-4-3、计算次序" class="headerlink" title="3.4.3、计算次序"></a>3.4.3、计算次序</h4><p>WHERE语句可以包含任意数目的AND和OR操作符，但是若过于依赖其默认的排序，很可能出现匹配的问题，我们需要使用圆括号帮助其进行优先匹配。</p><p>例如，若想查询价格为10元以上,且编号1002或1003，若使用语句<code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003 AND prod_price &gt;= 10;</code></p><p>一定会产生错误，原因是，SQL在处理OR操作符之前，会优先处理AND操作符，因此这句话中，它会认为应该先找出编号为1003并且价格大于10的产品，或者找到编号为1002的产品，因此会出现有编号为1002的产品的价格少于10。从而产生错误，因此可以使用括号增加优先级，如下所示：</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10;</span><br><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Detonator      |      13.00 |</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Safe           |      50.00 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>可以看到此时结果正确，查询结果正常。</p><blockquote><p><strong>在WHERE子句中使用圆括号</strong> 任何时候使用具有AND和OR操作符的WHERE子句，都应该使用圆括号明确地分组操作符。不要过分依赖默认计算次序，即使它确实是你想要的东西也是如此。使用圆括号没有什么坏处，它能消除歧义。</p></blockquote><h4 id="3-4-4、IN操作符"><a href="#3-4-4、IN操作符" class="headerlink" title="3.4.4、IN操作符"></a>3.4.4、IN操作符</h4><p>圆括号在WHERE子句中还有另外一种用法。IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清单，全都括在圆括号中。</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE vend_id IN (1002, 1003) ORDER BY prod_name;</code></p><p>此语句中：使用了IN匹配了vend_id中，所有编号为1002和1003的值，并按照prod_name的字典序排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name, prod_price FROM products WHERE vend_id IN (1002, 1003) ORDER BY prod_name;</span><br><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Carrots        |       2.50 |</span><br><span class="line">| Detonator      |      13.00 |</span><br><span class="line">| Fuses          |       3.42 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| Safe           |      50.00 |</span><br><span class="line">| Sling          |       4.49 |</span><br><span class="line">| TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">9 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>使用IN操作符可以代替OR操作符的功能，且较为方便便捷。</p><p>例如上述代码，使用以下含OR的代码一样可以完成操作，但是使用IN更加清除直观，且次序较容易管理，比OR操作符执行速度要快。</p><h4 id="3-4-5、NOT操作符"><a href="#3-4-5、NOT操作符" class="headerlink" title="3.4.5、NOT操作符"></a>3.4.5、NOT操作符</h4><p>WHERE子句中的NOT操作符只有一个功能，即否定之后的所有关键字。</p><blockquote><p><strong>MySQL中的NOT</strong> MySQL支持使用NOT 对IN 、BETWEEN 和EXISTS子句取反，这与多数其他DBMS允许使用NOT对各种条件取反有很大的差别。</p></blockquote><p>使用语句：<code>SELECT prod_name, vend_id, prod_price FROM products WHERE vend_id NOT IN (1002, 1003) AND prod_price NOT BETWEEN 5 AND 10;</code></p><p>此语句中：使用NOT对1002和1003编号进行反选，且除去价格5到10之间的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name, vend_id, prod_price FROM products WHERE vend_id NOT IN (1002, 1003) AND prod_price NOT BETWEEN 5 AND 10;</span><br><span class="line">+--------------+---------+------------+</span><br><span class="line">| prod_name    | vend_id | prod_price |</span><br><span class="line">+--------------+---------+------------+</span><br><span class="line">| 2 ton anvil  |    1001 |      14.99 |</span><br><span class="line">| JetPack 1000 |    1005 |      35.00 |</span><br><span class="line">| JetPack 2000 |    1005 |      55.00 |</span><br><span class="line">+--------------+---------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="3-5、LIKE操作符-通配符匹配"><a href="#3-5、LIKE操作符-通配符匹配" class="headerlink" title="3.5、LIKE操作符(通配符匹配)"></a>3.5、LIKE操作符(通配符匹配)</h3><p>前面介绍的所有操作符都是针对已知值进行过滤的。不管是匹配一个还是多个值，测试大于还是小于已知值，或者检查某个范围的值，共同点是过滤中使用的值都是已知的。但是，这种过滤方法并不是任何时候都好用。例如，怎样搜索产品名中包含文本anvil的所有产品？用简单的比较操作符肯定不行，必须使用通配符。利用通配符可创建比较特定数据的搜索模式。在这个例子中，如果你想找出名称包含anvil的所有产品，可构造一个通配符搜索模式，找出产品名中任何位置出现anvil的产品。</p><h4 id="3-5-1、百分号-通配符"><a href="#3-5-1、百分号-通配符" class="headerlink" title="3.5.1、百分号(%)通配符"></a>3.5.1、百分号(%)通配符</h4><p>使用<code>%</code>可以表示任何字符出现任意次数，例如为了找出jet开头的产品，可以使用jet%进行匹配。</p><p>使用语句：<code>SELECT prod_id, prod_name From products WHERE prod_name LIKE &#39;jet%&#39;;</code></p><p>此语句中：使用jet%进行了匹配，jet和JET都可以进行匹配，数据库若不特殊配置，不区分大小写，若配置后，jet%与JetPACK会不匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id, prod_name From products WHERE prod_name LIKE &#x27;jet%&#x27;;</span><br><span class="line">+---------+--------------+</span><br><span class="line">| prod_id | prod_name    |</span><br><span class="line">+---------+--------------+</span><br><span class="line">| JP1000  | JetPack 1000 |</span><br><span class="line">| JP2000  | JetPack 2000 |</span><br><span class="line">+---------+--------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>若想要查询含有某个词的行，可以前后都带上%，例如<code>%anvil%</code>，这个可以匹配任何位置包含anvil的文本，不论前后出现过什么字符。</strong></p><p><strong>通配符也可以出现在搜索模式之间，例如<code>s%e</code>可以找出以s开头和以e结尾的字符，且%代表0个，1个或多个字符，意味着其也可以匹配se。</strong></p><blockquote><p><strong>注意尾空格</strong> 尾空格可能会干扰通配符匹配。例如，在保存词anvil 时， 如果它后面有一个或多个空格， 则子句WHEREprod_name LIKE ‘%anvil’将不会匹配它们，因为在最后的l后有多余的字符。解决这个问题的一个简单的办法是在搜索模式最后附加一个%。一个更好的办法是使用函数去掉首尾空格。</p></blockquote><blockquote><p><strong>注意NULL</strong> 虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。即使是WHERE prod_name LIKE ‘%’也不能匹配用值NULL作为产品名的行。</p></blockquote><h4 id="3-5-2、下划线-通配符"><a href="#3-5-2、下划线-通配符" class="headerlink" title="3.5.2、下划线(_)通配符"></a>3.5.2、下划线(_)通配符</h4><p>该通配符可以匹配单个字符，不能和%一样去匹配多个字符或0个字符，必须要恰好为1个。</p><p>例如，使用LIKE ‘_ ton anvil’，可以匹配例如’1 ton anvil’但是不能匹配’.1 ton anvil’</p><h4 id="3-5-3、使用通配符的技巧"><a href="#3-5-3、使用通配符的技巧" class="headerlink" title="3.5.3、使用通配符的技巧"></a>3.5.3、使用通配符的技巧</h4><ol><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。即先把范围缩小后，再使用通配符进行查询</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ol><h3 id="3-6、使用正则表达式-过滤数据"><a href="#3-6、使用正则表达式-过滤数据" class="headerlink" title="3.6、使用正则表达式(过滤数据)"></a>3.6、使用正则表达式(过滤数据)</h3><p>正则表达式用正则表达式语言来建立，正则表达式语言是用来完成刚讨论的所有工作以及更多工作的一种特殊语言。与任意语言一样，正则表达式具有你必须学习的特殊的语法和指令。</p><blockquote><p>注意，MySQL中的正则表达式仅为正则表达式的一个子集，意味着有些语句会受到限制。</p></blockquote><h4 id="3-6-1、基本字符匹配"><a href="#3-6-1、基本字符匹配" class="headerlink" title="3.6.1、基本字符匹配"></a>3.6.1、基本字符匹配</h4><p>使用REGEXP(Regular Expression)关键字去进行匹配，后面所跟的东西叫做正则表达式。</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;.000&#39; ORDER BY prod_name;</code></p><p>此语句中：使用了正则表达式 <code>.000</code>代替了1000和2000等数据，即.匹配了任意一个字符，因此将1000和2000全部匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;.000&#x27; ORDER BY prod_name;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">+--------------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure><blockquote><p>使用LIKE和REGEXP有区别，LIKE不会匹配列值，若被匹配的文本在列值中出现，LIKE将无法找到，但是REGEXP可以找到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name LIKE &#x27;1 TON&#x27;;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name LIKE &#x27;1 TON%&#x27;;</span><br><span class="line">+-------------+</span><br><span class="line">| prod_name   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1 ton anvil |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;1 TON&#x27;;</span><br><span class="line">+-------------+</span><br><span class="line">| prod_name   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1 ton anvil |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>匹配不区分大小写</strong> MySQL中的正则表达式匹配（自版本3.23.4后）不区分大小写（即，大写和小写都匹配）。为区分大小写，可使用BINARY关键字，如WHERE prod_name REGEXPBINARY ‘JetPack .000’。</p></blockquote><h4 id="3-6-2、进行OR匹配"><a href="#3-6-2、进行OR匹配" class="headerlink" title="3.6.2、进行OR匹配"></a>3.6.2、进行OR匹配</h4><p>使用|进行或匹配，例如 <code>REGEXP &#39;1000|2000|3000&#39;</code>，将匹配1000或2000或3000，因此将会把所有的匹配数据全部返回。</p><h4 id="3-6-3、匹配特定字符"><a href="#3-6-3、匹配特定字符" class="headerlink" title="3.6.3、匹配特定字符"></a>3.6.3、匹配特定字符</h4><p>可以使用<code>[]</code>对特定的一组字符进行匹配，例如使用’REGEXP [123] TON’，将会匹配1或2或3 TON</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[123] TON&#39;;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[123] TON&#x27;;</span><br><span class="line">+-------------+</span><br><span class="line">| prod_name   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1 ton anvil |</span><br><span class="line">| 2 ton anvil |</span><br><span class="line">+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>所以，[] 像是另一种OR语句，。事实上，正则表达式[123] Ton为[1|2|3] Ton的缩写，也可以使用后者。但是，需要用[]来定义OR语句查找什么。</p><p>若不使用[]则会导致查找出错，例如使用 <code>1|2|3 TON</code> ，MySQL会假定你的意思是’1’或’2’或’3 ton’。</p><blockquote><p>在前面加上^可以取反，例如[ ^123]可以匹配除了123以外的任何东西</p></blockquote><h4 id="3-6-4、匹配范围"><a href="#3-6-4、匹配范围" class="headerlink" title="3.6.4、匹配范围"></a>3.6.4、匹配范围</h4><p>[0123456789]可以用来匹配数字0-9，但是若字符较多会比较麻烦，因此可以使用[0-9]来匹配0-9</p><p>范围不限于完整的集合，[1-3]和[6-9]也是合法的范围。此外，范围不一定只是数值的，[a-z]匹配任意字母字符。</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[0-5] TON&#39; ORDER BY prod_name;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[0-5] TON&#x27; ORDER BY prod_name;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-6-5、匹配特殊字符"><a href="#3-6-5、匹配特殊字符" class="headerlink" title="3.6.5、匹配特殊字符"></a>3.6.5、匹配特殊字符</h4><p>正则表达式中包含了特殊字符，例如：. [] | - 等特殊字符，那么若想查询此类特殊字符，应该怎么办？</p><p>答案是可以使用<code>\\</code>作为前导，\- 表示查找 -， \. 表示查找 .</p><p>使用语句：<code>SELECT vend_name FROM vendors WHERE vend_name REGEXP &#39;\\.&#39; ORDER BY vend_name;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_name FROM vendors WHERE vend_name REGEXP &#x27;\\.&#x27; ORDER BY vend_name;</span><br><span class="line">+--------------+</span><br><span class="line">| vend_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| Furball Inc. |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.02 sec)</span><br></pre></td></tr></table></figure><p>除此之外，\也可以用来引用元字符，例如：<br>| 元字符 | 说明  |<br>| —– | ——– |<br>| \\f | 换页     |<br>| \\n | 换行     |<br>| \\r | 回车     |<br>| \\t | 制表     |<br>| \\v | 纵向制表 |</p><blockquote><p>为了匹配反斜杠本身，需要使用 <code>\\\</code> 进行匹配。</p></blockquote><blockquote><p><strong>\或\\?</strong> 多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。但MySQL要求两个反斜杠（MySQL自己解释一个，正则表达式库解释另一个）。</p></blockquote><h4 id="3-6-6、匹配字符类"><a href="#3-6-6、匹配字符类" class="headerlink" title="3.6.6、匹配字符类"></a>3.6.6、匹配字符类</h4><p>为了更方便地找出经常使用的数字，字母或者数字字母字符等，可以适用预定的字符集。称为字符类(character class)</p><p>字符类如下表所示：</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>任意字母和数字（同[a-zA-Z0-9]）</td></tr><tr><td>[:alpha:]</td><td>任意字符（同[a-zA-Z]）</td></tr><tr><td>[:blank:]</td><td>空格和制表（同[\t]）</td></tr><tr><td>[:cntrl:]</td><td>ASCII控制字符（ASCII 0到31和127）</td></tr><tr><td>[:digit:]</td><td>任意数字（同[0-9]）</td></tr><tr><td>[:graph:]</td><td>与[:print:]相同，但不包括空格</td></tr><tr><td>[:lower:]</td><td>任意小写字母（同[a-z]）</td></tr><tr><td>[:print:]</td><td>任意可打印字符</td></tr><tr><td>[:punct:]</td><td>既不在[:alnum:]又不在[:cntrl:]中的任意字符</td></tr><tr><td>[:space:]</td><td>包括空格在内的任意空白字符（同[\f\n\r\t\v]）</td></tr><tr><td>[:upper:]</td><td>任意大写字母（同[A-Z]）</td></tr><tr><td>[:xdigit:]</td><td>任意十六进制数字（同[a-fA-F0-9]）</td></tr></tbody></table><h4 id="3-6-7、匹配多个实例"><a href="#3-6-7、匹配多个实例" class="headerlink" title="3.6.7、匹配多个实例"></a>3.6.7、匹配多个实例</h4><p>可以使用重复元字符进行多个匹配，例如找出所有的数而不管一共有多少位，或者想查询一个单词但是满足单词后可能接上了尾缀s。</p><p>重复元字符如下表：</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0个或多个匹配</td></tr><tr><td>+</td><td>1个或多个匹配（等于{1,}）</td></tr><tr><td>?</td><td>0个或1个匹配（等于{0,1}）</td></tr><tr><td>{n}</td><td>指定数目的匹配</td></tr><tr><td>{n,}</td><td>不少于指定数目的匹配</td></tr><tr><td>{n,m}</td><td>匹配数目的范围（m不超过255）</td></tr></tbody></table><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;\\([0-9] sticks?\\)&#39;;</code></p><p>此语句中：\\() 匹配了括号，sticks? 匹配 stick或者sticks，?表示前一个字符出现1次或者0次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;\\([0-9] sticks?\\)&#x27;;</span><br><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[[:digit:]]&#123;4&#125;&#39; ORDER BY prod_name;</code></p><p>此语句中：，[:digit:]匹配任意数字，因而它为数字的一个集合。{4}确切地要求它前面的字符（任意数字）出现4次，所以[[:digit:]]{4}匹配连在一起的任意4位数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[[:digit:]]&#123;4&#125;&#x27; ORDER BY prod_name;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">+--------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-6-8、定位符"><a href="#3-6-8、定位符" class="headerlink" title="3.6.8、定位符"></a>3.6.8、定位符</h4><p>目前为止的所有例子都是为了匹配一个串中任意位置的文本，为了匹配特定位置的文本，需要使用定位符。</p><p>定位符如下所示：</p><table><thead><tr><th>元 字 符</th><th>说 明</th></tr></thead><tbody><tr><td>^</td><td>文本的开始</td></tr><tr><td>$</td><td>文本的结尾</td></tr><tr><td>[[:&lt;:]]</td><td>词的开始</td></tr><tr><td>[[:&gt;:]]</td><td>词的结尾</td></tr></tbody></table><p>若想搜索一个以数或者小数点开头的所有产品，应该怎么使用？如果简单的搜索[0-9\\.]肯定不行，因为他会在文本内任意匹配而不是在开头匹配。</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;^[0-9\\.]&#39; ORDER BY prod_name;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;^[0-9\\.]&#x27; ORDER BY prod_name;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>^的双重用途</strong> ^有两种用法。在集合中（用[和]定义），用它来否定该集合，否则，用来指串的开始处。</p></blockquote><blockquote><p><strong>使REGEXP起类似LIKE的作用</strong> LIKE和REGEXP的不同在于，LIKE匹配整个串而REGEXP匹配子串。利用定位符，通过用^开始每个表达式，用$结束每个表达式，可以使REGEXP的作用与LIKE一样。</p></blockquote><blockquote><p>简单的正则表达式测试 可以在不使用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查总是返回0（没有匹配）或1（匹配）。可以用带文字串的REGEXP来测试表达式，并试验它们。相应的语法如下：</p><p>SELECT ‘hello’ REGEXP ‘[0-9]’;</p><p>这个例子显然将返回0（因为文本hello中没有数字）。</p></blockquote><h3 id="3-7、创建计算字段"><a href="#3-7、创建计算字段" class="headerlink" title="3.7、创建计算字段"></a>3.7、创建计算字段</h3><p>存储在表中的数据不都是应用程序所需要的。我们需要直接从数据库中检索出转换、计算或格式化过的数据；而不是检索出数据，然后再在客户机应用程序或报告程序中重新格式化。</p><blockquote><p><strong>字段</strong> 基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而术语字段通常用在计算字段的连接上。</p></blockquote><blockquote><p><strong>客户机与服务器的格式</strong> 可在SQL语句内完成的许多转换和格式化工作都可以直接在客户机应用程序内完成。但一般来说，在数据库服务器上完成这些操作比在客户机中完成要快得多，因为DBMS是设计来快速有效地完成这种处理的。</p></blockquote><h4 id="3-7-1、拼接字段"><a href="#3-7-1、拼接字段" class="headerlink" title="3.7.1、拼接字段"></a>3.7.1、拼接字段</h4><p>vendors表包含供应商名和位置信息。假如要生成一个供应商报表，需要在供应商的名字中按照name(location)这样的格式列出供应商的位置。</p><blockquote><p><strong>拼接（concatenate）</strong> 将值联结到一起构成单个值。</p></blockquote><p>解决方案是把两个列直接拼接起来，在MySQL的SELECT语句中，可以使用<code>Concat()</code>函数来拼接两个列。</p><p>使用语句：<code>SELECT Concat(vend_name, &#39;(&#39;, vend_country, &#39;)&#39;) FROM vendors ORDER BY vend_name;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT Concat(vend_name, &#x27;(&#x27;, vend_country, &#x27;)&#x27;) FROM vendors ORDER BY vend_name;</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| Concat(vend_name, &#x27;(&#x27;, vend_country, &#x27;)&#x27;) |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| ACME(USA)                                 |</span><br><span class="line">| Anvils R Us(USA)                          |</span><br><span class="line">| Furball Inc.(USA)                         |</span><br><span class="line">| Jet Set(England)                          |</span><br><span class="line">| Jouets Et Ours(France)                    |</span><br><span class="line">| LT Supplies(USA)                          |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>Concat()需要一个或多个指定的串，各个串之间用逗号分隔。上面的SELECT语句连接以下4个元素：</p><ul><li>存储在vend_name列中的名字；</li><li>包含一个空格和一个左圆括号的串；</li><li>存储在vend_country列中的国家；</li><li>包含一个右圆括号的串。</li></ul><h5 id="3-7-1-1、Trim函数"><a href="#3-7-1-1、Trim函数" class="headerlink" title="3.7.1.1、Trim函数"></a>3.7.1.1、Trim函数</h5><blockquote><p><strong>Trim函数</strong> 该函数可以将值的左右两侧空格全部去掉，使用RTrim可以去掉右侧的空格，使用LTrim可以去掉左侧的空格</p></blockquote><p>例如使用语句：<code>SELECT Concat(Trim(vend_name), &#39;(&#39;, Trim(vend_country), &#39;)&#39;) FROM vendors ORDER BY vend_name;</code></p><h5 id="3-7-1-2、使用别名"><a href="#3-7-1-2、使用别名" class="headerlink" title="3.7.1.2、使用别名"></a>3.7.1.2、使用别名</h5><p>SELECT语句拼接地址字段工作得很好，但是新计算列的名字实际上没有，只是一个值，而一个未知的值不能用在客户机应用中，因为其没有办法被引用，因此我们使用AS语句，为其赋予一个替换名(别名：alias)。</p><p>使用语句：<code>SELECT Concat(Trim(vend_name), &#39;(&#39;, Trim(vend_country), &#39;)&#39;) AS vend_title FROM vendors ORDER BY vend_name;</code></p><p>此语句中：可以看到返回的列名为vend_title，所有的客户机都可以直接使用，就像一个实际的列表一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT Concat(Trim(vend_name), &#x27;(&#x27;, Trim(vend_country), &#x27;)&#x27;) AS vend_title FROM vendors ORDER BY vend_name;</span><br><span class="line">+------------------------+</span><br><span class="line">| vend_title             |</span><br><span class="line">+------------------------+</span><br><span class="line">| ACME(USA)              |</span><br><span class="line">| Anvils R Us(USA)       |</span><br><span class="line">| Furball Inc.(USA)      |</span><br><span class="line">| Jet Set(England)       |</span><br><span class="line">| Jouets Et Ours(France) |</span><br><span class="line">| LT Supplies(USA)       |</span><br><span class="line">+------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>导出列</strong> 别名有时也称为导出列（derived column），不管称为什么，它们所代表的都是相同的东西。</p></blockquote><blockquote><p><strong>别名的其他用途</strong> 别名还有其他用途。常见的用途包括在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它，等等。</p></blockquote><h4 id="3-7-2、执行算术计算"><a href="#3-7-2、执行算术计算" class="headerlink" title="3.7.2、执行算术计算"></a>3.7.2、执行算术计算</h4><p>在使用SELECT语句中，可能会出现需要进行算数运算的情况，例如，知道物品单价和物品数量，想知道总价格，应该将单价与数量相乘。显然在知道了单价和数量后，没有必要将总价格进行储存，这将占很大的空间。</p><p>所以我们可以使用算数运算，进行统计。</p><p>使用语句：<code>SELECT prod_id, quantity, item_price, quantity * item_price AS total_price FROM orderitems WHERE order_num = 20005;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id, quantity, item_price, quantity * item_price AS total_price FROM orderitems WHERE order_num = 20005;</span><br><span class="line">+---------+----------+------------+-------------+</span><br><span class="line">| prod_id | quantity | item_price | total_price |</span><br><span class="line">+---------+----------+------------+-------------+</span><br><span class="line">| ANV01   |       10 |       5.99 |       59.90 |</span><br><span class="line">| ANV02   |        3 |       9.99 |       29.97 |</span><br><span class="line">| TNT2    |        5 |      10.00 |       50.00 |</span><br><span class="line">| FB      |        1 |      10.00 |       10.00 |</span><br><span class="line">+---------+----------+------------+-------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>除此之外，还允许使用+，-，*，/操作符。</strong></p><h3 id="3-8、使用数据处理函数"><a href="#3-8、使用数据处理函数" class="headerlink" title="3.8、使用数据处理函数"></a>3.8、使用数据处理函数</h3><p>大多数SQL支持以下类型的函数：</p><ul><li>用于处理文本串（如删除或填充值，转换值为大写或小写）的文本函数。</li><li>用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数。</li><li>用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期之差，检查日期有效性等）的日期和时间函数。</li><li>返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li></ul><h4 id="3-8-1、文本处理函数"><a href="#3-8-1、文本处理函数" class="headerlink" title="3.8.1、文本处理函数"></a>3.8.1、文本处理函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Left()</td><td>返回串左边的字符</td></tr><tr><td>Right()</td><td>返回串右边的字符</td></tr><tr><td>LTrim()</td><td>去掉串左边的空格</td></tr><tr><td>RTrim()</td><td>去掉串右边的空格</td></tr><tr><td>Locate()</td><td>找出串的一个子串</td></tr><tr><td>Length()</td><td>返回串的长度</td></tr><tr><td>Lower()</td><td>将串转换为小写</td></tr><tr><td>Soundex()</td><td>返回串的SOUNDEX值</td></tr><tr><td>SubString()</td><td>返回子串的字符</td></tr><tr><td>Upper()</td><td>将串转换为大写</td></tr></tbody></table><p>其中，Soundex()函数可以匹配读音相同的串，例如Soundex(‘Y.Lie’) = Soundex(‘Y LEE’)的返回值为TRUE；</p><p>使用语句：<code>mysql&gt; SELECT Upper(Trim(SubString(prod_desc, Length(prod_desc) - 4, 5))) AS temp FROM products;</code></p><p>此语句中：使用了Substring函数，用法为：SubString(buffer, offset, len);注意此处的offset从1开始到Length(buffer)结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT Upper(Trim(SubString(prod_desc, Length(prod_desc) - 4, 5))) AS temp FROM products;</span><br><span class="line">+-------+</span><br><span class="line">| temp  |</span><br><span class="line">+-------+</span><br><span class="line">| HOOK  |</span><br><span class="line">| CASE  |</span><br><span class="line">| CASE  |</span><br><span class="line">| LUDED |</span><br><span class="line">| NERS) |</span><br><span class="line">| ONLY) |</span><br><span class="line">| LONG  |</span><br><span class="line">| E USE |</span><br><span class="line">| I-USE |</span><br><span class="line">| , RED |</span><br><span class="line">| LOCK  |</span><br><span class="line">| S ALL |</span><br><span class="line">| STICK |</span><br><span class="line">| TICKS |</span><br><span class="line">+-------+</span><br><span class="line">14 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="3-8-2、日期和时间处理函数"><a href="#3-8-2、日期和时间处理函数" class="headerlink" title="3.8.2、日期和时间处理函数"></a>3.8.2、日期和时间处理函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AddDate()</td><td>增加一个日期（天、周等）</td></tr><tr><td>AddTime()</td><td>增加一个时间（时、分等）</td></tr><tr><td>CurDate()</td><td>返回当前date</td></tr><tr><td>CurTime()</td><td>返回当前time</td></tr><tr><td>Date()</td><td>返回date time的date部分</td></tr><tr><td>DateDiff()</td><td>计算两个date之差</td></tr><tr><td>Date_Add()</td><td>高度灵活的日期运算函数</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>Day()</td><td>返回一个日期的天数部分</td></tr><tr><td>DayOfWeek()</td><td>对于一个date，返回对应的星期几</td></tr><tr><td>Hour()</td><td>返回一个时间的小时部分</td></tr><tr><td>Minute()</td><td>返回一个时间的分钟部分</td></tr><tr><td>Month()</td><td>返回一个日期的月份部分</td></tr><tr><td>Now()</td><td>返回当前date和time</td></tr><tr><td>Second()</td><td>返回一个时间的秒部分</td></tr><tr><td>Time()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>Year()</td><td>返回一个日期的年份部分</td></tr></tbody></table><p>MySQL使用的日期格式无论什么时候都要使用yyyy-mm-dd。因此2021年5月1日，为2021-05-01。其他的方法也许也可以，但是这样可以排除多义性。</p><blockquote><p><strong>应该总是使用4位数字的年份</strong> 支持2位数字的年份，MySQL处理00-69为2000-2069，处理70-99为1970-1999。虽然它们可能是打算要的年份，但使用完整的4位数字年份更可靠，因为MySQL不必做出任何假定。</p></blockquote><p>使用语句：<code>SELECT cust_id, order_num, order_date, DateDiff(CurDate(), Date(order_date)) AS diff FROM orders WHERE Month(order_date) = &#39;10&#39;;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT cust_id, order_num, order_date, DateDiff(CurDate(), Date(order_date)) AS diff FROM orders WHERE Month(order_date) = &#x27;10&#x27;;</span><br><span class="line">+---------+-----------+---------------------+------+</span><br><span class="line">| cust_id | order_num | order_date          | diff |</span><br><span class="line">+---------+-----------+---------------------+------+</span><br><span class="line">|   10005 |     20008 | 2005-10-03 00:00:00 | 5822 |</span><br><span class="line">|   10001 |     20009 | 2005-10-08 00:00:00 | 5817 |</span><br><span class="line">+---------+-----------+---------------------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>注意，sql中，星期天是1，星期一是2，……星期六是7</strong></p><p>若需要检测一个范围，则可以使用BETWEEN操作符。</p><p>使用语句：<code>SELECT cust_id, order_num FROM orders WHERE Date(order_date) BETWEEN &#39;2005-09-01&#39; AND &#39;2005-09-30&#39;;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT cust_id, order_num FROM orders WHERE Date(order_date) BETWEEN &#x27;2005-09-01&#x27; AND &#x27;2005-09-30&#x27;;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| cust_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|   10001 |     20005 |</span><br><span class="line">|   10003 |     20006 |</span><br><span class="line">|   10004 |     20007 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-8-3、数值处理函数"><a href="#3-8-3、数值处理函数" class="headerlink" title="3.8.3、数值处理函数"></a>3.8.3、数值处理函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Abs()</td><td>返回一个数的绝对值</td></tr><tr><td>Cos()</td><td>返回一个角度的余弦</td></tr><tr><td>Exp()</td><td>返回一个数的指数值</td></tr><tr><td>Mod()</td><td>返回除操作的余数</td></tr><tr><td>Pi()</td><td>返回圆周率</td></tr><tr><td>Rand()</td><td>返回一个随机数</td></tr><tr><td>Sin()</td><td>返回一个角度的正弦</td></tr><tr><td>Sqrt()</td><td>返回一个数的平方根</td></tr><tr><td>Tan()</td><td>返回一个角度的正切</td></tr></tbody></table><h3 id="3-9、汇总数据"><a href="#3-9、汇总数据" class="headerlink" title="3.9、汇总数据"></a>3.9、汇总数据</h3><p>我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。使用这些函数，MySQL查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有以下几种。</p><ul><li>确定表中行数（或者满足某个条件或包含某个特定值的行数）。</li><li>获得表中行组的和。</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。</li></ul><h4 id="3-9-1、汇总函数的使用"><a href="#3-9-1、汇总函数的使用" class="headerlink" title="3.9.1、汇总函数的使用"></a>3.9.1、汇总函数的使用</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><h5 id="3-9-1-1、AVG"><a href="#3-9-1-1、AVG" class="headerlink" title="3.9.1.1、AVG()"></a>3.9.1.1、AVG()</h5><p>AVG()通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p><p>使用语句：<code>SELECT AVG(prod_price) AS avg_price FROM products;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(prod_price) AS avg_price FROM products;</span><br><span class="line">+-----------+</span><br><span class="line">| avg_price |</span><br><span class="line">+-----------+</span><br><span class="line">| 16.133571 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>只用于单个列</strong> AVG()只能用来确定特定数值列的平均值，而<br>且列名必须作为函数参数给出。为了获得多个列的平均值，<br>必须使用多个AVG()函数。</p></blockquote><blockquote><p><strong>NULL值</strong> AVG()函数忽略列值为NULL的行。</p></blockquote><h5 id="3-9-1-2、COUNT"><a href="#3-9-1-2、COUNT" class="headerlink" title="3.9.1.2、COUNT()"></a>3.9.1.2、COUNT()</h5><p>该COUNT()函数共有两种使用方式：</p><ul><li>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li><li>使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。</li></ul><p>使用语句：<code>SELECT COUNT(*) AS num_cust FROM customers;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) AS num_cust FROM customers;</span><br><span class="line">+----------+</span><br><span class="line">| num_cust |</span><br><span class="line">+----------+</span><br><span class="line">|        5 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT COUNT(cust_email) AS num_cust FROM customers;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(cust_email) AS num_cust FROM customers;</span><br><span class="line">+----------+</span><br><span class="line">| num_cust |</span><br><span class="line">+----------+</span><br><span class="line">|        3 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>NULL值</strong> 如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号（*），则不忽略。</p></blockquote><h5 id="3-9-1-3、MAX-MIN"><a href="#3-9-1-3、MAX-MIN" class="headerlink" title="3.9.1.3、MAX(), MIN()"></a>3.9.1.3、MAX(), MIN()</h5><p>使用MAX()函数需要指定列名。</p><p>使用语句：<code>SELECT MAX(prod_price) AS max_price, MIN(prod_price) AS min_price FROM products;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT MAX(prod_price) AS max_price, MIN(prod_price) AS min_price FROM products;</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| max_price | min_price |</span><br><span class="line">+-----------+-----------+</span><br><span class="line">|     55.00 |      2.50 |</span><br><span class="line">+-----------+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>对非数值数据使用MAX()</strong> 虽然MAX()一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。</p></blockquote><h5 id="3-9-1-4、SUM"><a href="#3-9-1-4、SUM" class="headerlink" title="3.9.1.4、SUM()"></a>3.9.1.4、SUM()</h5><p>使用语句<code>SELECT SUM(quantity) AS items_ordered FROM orderitems WHERE order_num = 20005;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(quantity) AS items_ordered FROM orderitems WHERE order_num = 20005;</span><br><span class="line">+---------------+</span><br><span class="line">| items_ordered |</span><br><span class="line">+---------------+</span><br><span class="line">|            19 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>SUM()也可以用来计算合计值。例如算总金额</p><p>使用语句<code>SELECT SUM(quantity * item_price) AS total_price FROM orderitems WHERE order_num = 20005;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(quantity * item_price) AS total_price FROM orderitems WHERE order_num = 20005;</span><br><span class="line">+-------------+</span><br><span class="line">| total_price |</span><br><span class="line">+-------------+</span><br><span class="line">|      149.87 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-9-2、聚集不同值"><a href="#3-9-2、聚集不同值" class="headerlink" title="3.9.2、聚集不同值"></a>3.9.2、聚集不同值</h4><p>使用聚集函数的DISTINCT参数。对于上述的五个聚集函数(SUM, COUNT, MAX, MIN, AVG)，都可以使用DISTINCT参数。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] 福塔(Forta, B.). MySQL必知必会[M]. 刘晓霞，钟鸣，译. —北京：人民邮电出版社，2009.1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP网络编程初探</title>
      <link href="/articles/TCP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/TCP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>TCP协议也是应用最广泛的协议，许多高级协议都是建立在TCP协议之上的，例如HTTP、SMTP等。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>IP协议是一个分组交换，它不保证可靠传输。而TCP协议是传输控制协议，它是面向连接的协议，支持可靠传输和双向通信。TCP协议是建立在IP协议之上的，简单地说，IP协议只负责发数据包，不保证顺序和正确性，而TCP协议负责控制数据包传输，它在传输数据之前需要先建立连接，建立连接后才能传输数据，传输完后还需要断开连接。TCP协议之所以能保证数据的可靠传输，是通过接收确认、超时重传这些机制实现的。并且，TCP协议允许双向通信，即通信双方可以同时发送和接收数据。</p><h2 id="JAVA网络编程——TCP协议"><a href="#JAVA网络编程——TCP协议" class="headerlink" title="JAVA网络编程——TCP协议"></a>JAVA网络编程——TCP协议</h2><h3 id="Socket套接字"><a href="#Socket套接字" class="headerlink" title="Socket套接字"></a>Socket套接字</h3><p>Socket 的原意是“插座”，在计算机通信领域，Socket 被翻译为“套接字”，它是计算机之间进行通信的一种约定或一种方式。通过 Socket 这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。</p><p>当操作系统接收到一个数据包的时候，如果只有IP地址，它没法判断应该发给哪个应用程序，所以，操作系统抽象出Socket接口，每个应用程序需要各自对应到不同的Socket，数据包才能根据Socket正确地发到对应的应用程序。使用Socket套接字可以在IP地址的不同的端口下进行通信。</p><p>一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。端口号总是由操作系统分配，它是一个0～65535之间的数字，其中，小于1024的端口属于特权端口，需要管理员权限，大于1024的端口可以由任意用户的应用程序打开。</p><p>使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，双方后续就可以随时发送和接收数据。</p><p>因此，当Socket连接成功地在服务器端和客户端之间建立后：</p><ul><li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li><li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li></ul><h2 id="C-S通信模式，TCP网络编程初探"><a href="#C-S通信模式，TCP网络编程初探" class="headerlink" title="C/S通信模式，TCP网络编程初探"></a>C/S通信模式，TCP网络编程初探</h2><h3 id="Server端："><a href="#Server端：" class="headerlink" title="Server端："></a>Server端：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Com.Dcm.Chat.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8866</span>); <span class="comment">// 监听指定端口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket sock = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            Thread t = <span class="keyword">new</span> Handler(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Socket sock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = <span class="keyword">this</span>.sock.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream output = <span class="keyword">this</span>.sock.getOutputStream()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Client &quot;</span> + sock.getRemoteSocketAddress() + <span class="string">&quot; has connect to Server &quot;</span></span><br><span class="line">                + sock.getLocalSocketAddress() + <span class="string">&quot; Success!&quot;</span>);</span><br><span class="line">                handle(input, output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                ioe.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;client disconnected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">        writer.write(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            String s = reader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;bye&quot;</span>)) &#123;      <span class="comment">//读取bye后断开连接</span></span><br><span class="line">                writer.write(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line">                writer.flush();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Instant ins = Instant.now();</span><br><span class="line">            ZonedDateTime zdt = ins.atZone(ZoneId.systemDefault());</span><br><span class="line">            System.out.println(zdt + <span class="string">&quot; &gt;&gt;&gt; &quot;</span> + s);</span><br><span class="line">            writer.write(<span class="string">&quot;ok: &quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client端："><a href="#Client端：" class="headerlink" title="Client端："></a>Client端：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Com.Dcm.Chat.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//centOS主机 ： 121.43.173.31; 本机IP：localhost或127.0.0.1;</span></span><br><span class="line">        Socket sock = <span class="keyword">new</span> Socket(<span class="string">&quot;121.43.173.31&quot;</span>, <span class="number">8866</span>); <span class="comment">// 连接指定服务器和端口</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream input = sock.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream output = sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sock.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;disconnected.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;[server] &quot;</span> + reader.readLine());</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>); <span class="comment">// 打印提示</span></span><br><span class="line">            String s = scanner.nextLine(); <span class="comment">// 读取一行输入</span></span><br><span class="line">            writer.write(s);</span><br><span class="line">            writer.newLine();</span><br><span class="line">            writer.flush();</span><br><span class="line">            String resp = reader.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;&lt;&lt; &quot;</span> + resp);</span><br><span class="line">            <span class="keyword">if</span> (resp.equals(<span class="string">&quot;bye&quot;</span>)) &#123;       <span class="comment">//读取bye后，客户端关闭连接</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署到服务器进行测试："><a href="#部署到服务器进行测试：" class="headerlink" title="部署到服务器进行测试："></a>部署到服务器进行测试：</h3><p>在部署到本地（localhost）测试成功后，我尝试在阿里云服务器上运行<code>Server</code>测试。</p><p>首先，使用xftp建立连接传输项目到服务器：</p><p><img src="1.jpg" alt="使用xftp建立连接传输项目到服务器"></p><p>之后使用Xshell连接到服务器对项目进行操作：</p><p>输入相关代码启动服务：</p><p><strong>注意：需要在阿里云控制台启用相关的端口，本次Server端使用8866端口，需要提前开启！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~]# cd /usr/local/src/ChatTogether</span><br><span class="line">[root@CentOS ChatTogether]# cd out/production/ChatTogether/</span><br><span class="line">[root@CentOS ChatTogether]# java Com.Dcm.Chat.Server.ServerDemo</span><br></pre></td></tr></table></figure><p>使用IDEA开启Client端，向Server端传输数据：</p><p><img src="2.jpg" alt="使用IDEA开启Client端，向Server端传输数据"></p><p>客户端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">D:\SourceFiles\Java\jdk-11.0.5\bin\java.exe &quot;-javaagent:D:\SourceFiles\JetBrains\IntelliJ IDEA 2021.1.1\lib\idea_rt.jar=61812:D:\SourceFiles\JetBrains\IntelliJ IDEA 2021.1.1\bin&quot; -Dfile.encoding=UTF-8 -classpath E:\ProgramDemo\ChatTogether\out\production\ChatTogether Com.Dcm.Chat.Client.ClientDemo</span><br><span class="line">[server] hello</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 你好，hello world！</span></span><br><span class="line">&lt;&lt;&lt; ok: 你好，hello world！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 不要回答！</span></span><br><span class="line">&lt;&lt;&lt; ok: 不要回答！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 消灭人类暴政，世界属于三体！</span></span><br><span class="line">&lt;&lt;&lt; ok: 消灭人类暴政，世界属于三体！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 我们是同志了！</span></span><br><span class="line">&lt;&lt;&lt; ok: 我们是同志了！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 北海，要多想！</span></span><br><span class="line">&lt;&lt;&lt; ok: 北海，要多想！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 没关系的都一样。</span></span><br><span class="line">&lt;&lt;&lt; ok: 没关系的都一样。</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ChatTogether]# java Com.Dcm.Chat.Server.ServerDemo</span><br><span class="line">server is running...</span><br><span class="line">connected from /119.102.250.226:61814</span><br><span class="line">Client /119.102.250.226:61814 has connect to Server /172.30.89.4:8866 Success!</span><br><span class="line">2021-08-08T20:44:06.982581+08:00[Asia/Shanghai] &gt;&gt;&gt; 你好，hello world！</span><br><span class="line">2021-08-08T20:44:14.471235+08:00[Asia/Shanghai] &gt;&gt;&gt; 不要回答！</span><br><span class="line">2021-08-08T20:44:26.662957+08:00[Asia/Shanghai] &gt;&gt;&gt; 消灭人类暴政，世界属于三体！</span><br><span class="line">2021-08-08T20:44:33.162085+08:00[Asia/Shanghai] &gt;&gt;&gt; 我们是同志了！</span><br><span class="line">2021-08-08T20:44:47.791487+08:00[Asia/Shanghai] &gt;&gt;&gt; 北海，要多想！</span><br><span class="line">2021-08-08T20:44:59.515964+08:00[Asia/Shanghai] &gt;&gt;&gt; 没关系的都一样。</span><br></pre></td></tr></table></figure><blockquote><p>参考：廖雪峰Java教程 TCP编程 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1305207629676577">https://www.liaoxuefeng.com/wiki/1252599548343744/1305207629676577</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java网络编程 </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>二叉树有多种遍历方法，例如深度优先遍历，广度优先遍历，层次遍历等，本文将对这些遍历方式进行归纳。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>所谓遍历是指对树中所有结点的信息的访问，即依次对树中每个结点访问一次且仅访问一次，我们把这种对所有结点的访问称为遍历(traversal)。那么树的两种重要的遍历模式是深度优先遍历和广度优先遍历，深度优先一般用递归或堆栈，广度优先一般用队列。</p><p>我们对二叉树的结点做出如下所示的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> val; </span><br><span class="line">    TreeNode left; </span><br><span class="line">    TreeNode right; </span><br><span class="line">    TreeNode() &#123;&#125; </span><br><span class="line">    TreeNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val; </span><br><span class="line">        <span class="keyword">this</span>.left = left; </span><br><span class="line">        <span class="keyword">this</span>.right = right; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h2><p>深度优先遍历通常有以下三种方式，即先序遍历，中序遍历，后序遍历三种。</p><p><img src="Tree.jpg" alt="奇奇怪怪的二叉树"></p><p>例如如图所示的二叉树，若采用深度优先遍历，有三种方案：</p><ul><li>1.先序遍历，即根左右，先遍历根结点，再依次遍历左结点，右结点。</li><li>2.中序遍历，即左根右，先遍历左结点，再依次遍历根结点，右结点。</li><li>3.后序遍历，即左右根，先依次遍历左结点，右结点，最后再遍历根结点。</li></ul><p>若使用先序遍历，手动得到的结果为：57842913；若使用中序遍历，得到的结果为：87245913；若使用后序遍历，得到的结果为：82473195。</p><p>每一种深度优先遍历方案都有使用显式栈的非递归算法和递归算法。</p><blockquote><p>LeetCode上有关于深度优先遍历的题目，分别是：</p><ul><li>144.二叉树的前序遍历</li><li>145.二叉树的后序遍历</li><li>94.二叉树的中序遍历</li></ul></blockquote><h3 id="递归思路"><a href="#递归思路" class="headerlink" title="递归思路"></a>递归思路</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>递归思路都很简单，即使用递归的方式，依次访问根结点，左结点，右结点。其他的递归方法也与此基本相似。</p><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>所有的递归算法，都要按照三要素来书写：</p><p><strong>1.确定递归函数的参数与返回值</strong><br>即：确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。<br><strong>2.确定边界条件</strong><br>即：写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。<br><strong>3.确定递归的逻辑</strong><br>即：确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</p><p>以当前的先序遍历为例：</p><p><strong>1.确定递归函数的参数与返回值:</strong> 本题需要将所有的数据存入ArrayList中，因此并不需要返回值，返回值即<code>void</code>，需要的参数即为根结点的值<code>TreeNode cur</code>和<code>List list</code>。代码为<code>private void preorder(TreeNode cur, List list)</code></p><p><strong>2.确定边界条件:</strong> 边界条件即为若当前遍历的结点值为空，则直接return终止递归。<code>if (cur == NULL) return;</code></p><p><strong>3.确定递归的逻辑:</strong> 递归的逻辑即先访问根结点，再访问左结点，再访问右结点。因此调用的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.add(cur.val);              <span class="comment">//访问根结点，将其存入list</span></span><br><span class="line">preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br></pre></td></tr></table></figure><p>递归算法的时间复杂度为：<code>O(n)</code>，空间复杂度为：<code>O(n)</code>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode cur, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) &#123;       <span class="comment">//访问到了空结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(cur.val);      <span class="comment">//访问根结点</span></span><br><span class="line">        preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">        preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode cur, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) &#123;       <span class="comment">//访问到了空结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">        list.add(cur.val);      <span class="comment">//访问根结点</span></span><br><span class="line">        preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode cur, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) &#123;       <span class="comment">//访问到了空结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">        preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br><span class="line">        list.add(cur.val);      <span class="comment">//访问根结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归思路"><a href="#非递归思路" class="headerlink" title="非递归思路"></a>非递归思路</h3><p>以先序遍历为例：因为要在遍历完结点的左子树后接着遍历结点的右子树，为了能找到该结点，需要使用栈来进行暂存。中序和后序也都涉及到回溯，所以都需要用到栈。因此我买了需要手动维护一个栈用来进行数据的暂存。</p><h4 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();     <span class="comment">//用来存放遍历的结果，即访问顺序</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();      <span class="comment">//用来暂存结点，便于继续搜索</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;     <span class="comment">//当栈不空或root不为null说明没有遍历完成</span></span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.add(root.val);     <span class="comment">//访问根结点将数值存入Arraylist</span></span><br><span class="line">                stack.push(root);       <span class="comment">//将root压入栈中，进行暂存</span></span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();     <span class="comment">//将栈中的结点出栈，准备对其右子树进行访问</span></span><br><span class="line">            root = root.right;      <span class="comment">//访问结点的右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">PreorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; List = <span class="keyword">new</span> ArrayList&lt;&gt;();     <span class="comment">//用来存放遍历的结果，即访问顺序</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();      <span class="comment">//用来暂存结点，便于继续搜索</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;     <span class="comment">//当栈不空或root不为null说明没有遍历完成</span></span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若上层出循环，说明已经遍历到左子树的最底层，此时可以将底层数据存入。</span></span><br><span class="line">            list.add(root.val);     <span class="comment">//访问底层结点</span></span><br><span class="line">            root = stack.pop();     <span class="comment">//将上一个结点出栈，尝试访问其右子树</span></span><br><span class="line">            root = root.right;      <span class="comment">//访问右结点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><h5 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h5><p>思路一则是后序遍历在决定是否可以访问当前结点的值的时候，需要考虑其左右子树是否都已经遍历完成。所以需要设置一个lastVisited标记。若lastVisited等于当前考查结点的右子树(说明右侧子树已经遍历完成)，或者当前表示该结点的左右子树都已经遍历完成，则可以访问当前结点。</p><p>因此可以使用如下代码进行后序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode lastVisited = root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;        <span class="comment">//压栈到左子树全部在栈中</span></span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.peek();        <span class="comment">//查看栈顶的元素，若栈顶元素右结点与lastVisited相等或右结点为null说明以遍历完成</span></span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="keyword">null</span> || root.right == lastVisited)&#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                lastVisited = root;</span><br><span class="line">                root = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.right;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h5><p>思路二算是一种简单的奇技淫巧，本质上并不算是后序遍历。我们可以思考：先序遍历是<code>根左右</code>我们可以调整代码的顺序使其很容易变成<code>根右左</code>反转list数组可以使得顺序变为<code>左右根</code>，我们发现此时再进行了两次简单的修改之后，由前序遍历变成了后序遍历。此时我们希望向List的头插入元素实现反转的操作，所以我们使用LinkedList可以有较好的时间性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();        <span class="comment">//使用链表便于头插性能较好</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();      <span class="comment">//使用栈进行结点的暂存</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);       <span class="comment">//暂存root结点</span></span><br><span class="line">                list.add(<span class="number">0</span>, root.val);      <span class="comment">//访问根结点，将结点内容头插加入链表中，实现由根右左到左右根的反转</span></span><br><span class="line">                root = root.right;      <span class="comment">//实现从先序遍历根左右到根右左的转变</span></span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();     <span class="comment">//获取栈顶结点</span></span><br><span class="line">            root = root.left;       <span class="comment">//范围左结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法的时间性能略逊于后序遍历的一般解法。使用思路一在LeetCode中提交击败100% Java提交，此方法击败49.89%提交。</p><p>至此所有的非递归算法都保证了格式上的基本统一，方便记忆以及面试时的书写。</p><h2 id="二叉树的广度优先遍历"><a href="#二叉树的广度优先遍历" class="headerlink" title="二叉树的广度优先遍历"></a>二叉树的广度优先遍历</h2><p>在进行深度优先遍历的时候，我们知道了应该使用数据结构栈。那么如何进行广度优先遍历呢，我们可以使用队列这一数据结构。思路如下，首先根结点若不为空，则将根结点放入队列中，每次循环取出队列中的队首元素，将队首元素进行暂存，判断是否可以将该队首节点的左结点右结点入队列(不为null)，并进行计数。当前计数递减为0时，说明一层已经遍历完毕，可以对下一层进行遍历。依次进行相关操作，最终可以得到层序遍历的结果。</p><blockquote><p><strong>LeetCode题目 102.二叉树的层序遍历</strong><br>给你一个二叉树，请你返回其按<strong>层序遍历</strong>得到的节点值。(即逐层地，从左到右访问所有节点)。<br>例如[3,9,20,null,null,15,7]，应返回[ [3], [9,20], [15,7] ]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;      <span class="comment">//设置第一层的结点个数为1</span></span><br><span class="line">        queue.offer(root);      <span class="comment">//将头结点入队列</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                root = queue.poll();        <span class="comment">//将第i层结点出队列</span></span><br><span class="line">                row.add(root.val);          <span class="comment">//将第i层结点放入行中</span></span><br><span class="line">                <span class="keyword">if</span>(root.left != <span class="keyword">null</span>) &#123;     <span class="comment">//将第i+i层结点入队列</span></span><br><span class="line">                    temp++;</span><br><span class="line">                    queue.offer(root.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    temp++;</span><br><span class="line">                    queue.offer(root.right);</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            count = temp;</span><br><span class="line">            list.add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IKBC_C104键盘安装白色LED背光</title>
      <link href="/articles/IKBC_C104%E9%94%AE%E7%9B%98%E5%AE%89%E8%A3%85%E7%99%BD%E8%89%B2LED%E8%83%8C%E5%85%89/"/>
      <url>/articles/IKBC_C104%E9%94%AE%E7%9B%98%E5%AE%89%E8%A3%85%E7%99%BD%E8%89%B2LED%E8%83%8C%E5%85%89/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><h2 id="键盘的痛点及改灯的理由"><a href="#键盘的痛点及改灯的理由" class="headerlink" title="键盘的痛点及改灯的理由"></a>键盘的痛点及改灯的理由</h2><p>我在19年大一进入学校的时候购入了一把机械键盘，型号是IKBC C104。特色是轴体使用了cherry红轴，PBT键帽，非常适合我这种重度硫酸手的人，此外该键盘性价比极高，在200-300元价位中无出其右。但是有个痛点就是键盘没有带灯，寝室熄灯后敲代码会有些难受(虽然可以盲打，但是仍需要手指去寻找J和F的触点，摸黑还是很难受)因此决定尝试自行安装LED背光。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="键盘的拆卸"><a href="#键盘的拆卸" class="headerlink" title="键盘的拆卸"></a>键盘的拆卸</h2><p><img src="1.jpg" alt="IKBC C104键盘的外观"></p><p>键盘的拆卸十分容易，键盘本身并未通过螺丝或者胶水进行固定，仅使用了8个卡扣进行上壳和底板的咬合固定。因此使用一字螺丝刀和小拨片去翘一下键盘的接缝处，可以很轻松的将上壳和底座分离，分离后如图所示，且可以看到红色的PCB板。</p><p><img src="2.jpg" alt="键盘进行上下外壳的分离"></p><p>在对外壳进行分离后，我们可以将钢板与PCB板拿离底座，注意，底座和PCB板之间存在排线，需要先将排线分离，再将钢板与PCB板取出。不要直接扯下排线，连接比较紧密，可以不断地晃动排线公口，之后松弛后可以很轻松地拔出排线。</p><p><img src="3.jpg" alt="红色的PCB底座与排线"></p><p>可以看到排线如下所示，不断晃动，即可拔出排线。</p><p><img src="4.jpg" alt="排线的示意图"></p><p>在取下底座之后，即可将键盘的键帽全部拔出(记得拍照作为键盘键位的标记，不然凭借记忆中的键位安装键帽会较为困难)，将所有的键帽拔出之后，可以看到红轴的轴体，在轴体上侧有一个安装F3规格的LED灯的开口，键盘的PCB板上已经存在线路和引脚，只需要将LED安装之后进行焊接即可。</p><p><img src="5.jpg" alt="拆下键帽后的钢板以及PCB板"></p><p>但是拆下键帽后，会发现钢板上有非常多的灰尘和程序猿的头发(头发，我的头发，呜呜呜)，所有使用镊子夹一块医用酒精棉进行擦拭，将油脂，毛发等脏东西清除干净。(PS:感谢舍友淳宝提供的酒精棉，阿里嘎多！)</p><p><img src="6.jpg" alt="用酒精棉擦拭钢板表面，并使用镊子夹出毛发"></p><h2 id="焊接LED灯珠"><a href="#焊接LED灯珠" class="headerlink" title="焊接LED灯珠"></a>焊接LED灯珠</h2><p>在使用了6片酒精棉擦拭(约30min)后，感觉还是键盘的干净度还算是可以看了，如下图，还算比较干净了。此时我们准备这次需要的耗材及工具：</p><blockquote><ul><li>LED灯珠 F3规格 * 104(考虑到存在亮度不均衡，损坏的情况，建议采购120颗起步)       <strong>成本 0.03元 * 104</strong></li><li>电焊及支架 * 1      <strong>成本20元 * 1</strong></li><li>松香 * 1        <strong>成本1元 * 1</strong></li><li>电焊丝 * 1      <strong>成本1元 * 1</strong></li><li>剪线钳 * 1      <strong>成本3元 * 1</strong></li><li>镊子        <strong>成本2元 * 1</strong></li></ul></blockquote><p>使用的这些工具已经在下图中给出，可以按照图片直接购入相应的工具耗材即可。</p><p><img src="7.jpg" alt="耗材工具及清洁后的pcb板"></p><p>将pcb板翻到背面，可以看到为了防止排线线材与较尖的金属触点发生刮蹭导致线材受损，使用了一块比较光滑的硬质塑料片，贴在了背板上。我们可以将这块塑料片拿下，便于LED灯珠的装配与焊接。</p><p><img src="8.jpg" alt="将背板的塑料防护片取下"></p><p>现在开始进行焊接操作，我们可以使用两个手指分别抵住LED灯防止移位和供应焊锡丝(PS:为了翘背板特意留的长指甲，但是并未使用到？拨片一翘就分离了)。这么操作的好处是焊接得到的引脚都非常正，不会弯曲，若之后LED出现故障，可以很轻易地将其取下；但是这样操作也会存在不便，安装到中间的部分将变得异常困难(也可以使用镊子夹住灯珠进行焊接)。所以我为了偷懒使用了较为简单的方式去进行焊接，即将两根引脚分别向两侧弯曲，这样引脚本身的倾斜就导致了不会出现灯珠移位的情况(缺点是若出现故障需要返工，很难将灯珠拔出来)，注意引脚的正负，PCB板上已经标记出了正极引脚。</p><p><img src="9.jpg" alt="对灯珠的引脚进行焊接"></p><p>焊接完成一排之后，我们对灯珠进行点亮测试，可以看到第一排一次性全部被点亮。</p><p><img src="10.jpg" alt="第一排一次点亮"></p><p>有了成功点亮的经验，艺高人胆大(感谢学校的电工实习，咳咳咳)我直接对接下来的两排一并安装灯珠，且全部一次点亮。</p><p><img src="11.jpg" alt="三排成功点亮"></p><p>最后将剩下的三排全部焊接，所有的灯珠在通电后全部一次点亮，非常完美。</p><p><img src="12.jpg" alt="全部灯珠一次点亮"></p><p>我们翻到PCB板的背面，焊点都还能保证比较饱满，由于引脚是歪着焊接的，看上去是歪歪扭扭的，但是还是能保证电气性能良好大。</p><p><img src="13.jpg" alt="PCB背板焊点"></p><p>由于买了150颗灯珠，所以最后还剩下了很多的灯珠，下图是剩下的灯珠和剪断的引脚。</p><p><img src="14.jpg" alt="剩下的灯珠和剪断的引脚"></p><p>装配完成后来看看效果吧！</p><p><img src="15.jpg" alt="装配完成后点亮的效果"></p><p>键盘有很多的灯光方案，老版本的C104有8种点亮方式，新版本的更换过主控后似乎只有3种基本点亮方式了。本人的键盘是在2019年10月购入，此时的版本为老版本，之后是新版本的可能性就大很多了。</p><blockquote><p><strong>点亮效果</strong></p><ul><li>Fn + 1  键盘灯常亮</li><li>Fn + 2  流水闪烁效果(跑马灯)</li><li>Fn + 3  按哪里亮哪里</li><li>Fn + 4  随机闪烁</li><li>Fn + 5  涟漪效果</li><li>Fn + 6  呼吸灯</li><li>Fn + 7  Esc、ASDW、方向键常亮</li><li>Fn + 8  QWER处常亮(可能是LOL的按键)</li><li>Fn + ↑  背光亮度增加</li><li>Fn + ↓  背光亮度降低</li><li>Fn + →  闪烁频率增加</li><li>Fn + ←  闪烁频率降低</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 摸鱼中的小确幸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用的基本技巧</title>
      <link href="/articles/git%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7/"/>
      <url>/articles/git%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><h2 id="导语：git是什么"><a href="#导语：git是什么" class="headerlink" title="导语：git是什么"></a>导语：git是什么</h2><blockquote><p>git是用于Linux内核开发的版本控制工具。与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git的速度很快，这对于诸如Linux内核这样的大项目来说自然很重要。git最为出色的是它的合并追踪（merge tracing）能力。</p></blockquote><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="下载git并直接安装"><a href="#下载git并直接安装" class="headerlink" title="下载git并直接安装"></a>下载git并直接安装</h3><p>在Windows上可以直接在官网下载<a href="https://git-scm.com/downloads">Git安装程序</a>，下载完成后，直接按照步骤进行安装即可，记得选中Add to Path以将其bin目录添加进系统环境中，方便使用。安装完成后，右键选中git bash here，开启bash。</p><h3 id="配置全局参数"><a href="#配置全局参数" class="headerlink" title="配置全局参数"></a>配置全局参数</h3><p>在bash下输入以下代码，全局配置参数，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>输入<code>git config --global --list</code>命令可以显示设置过的全局变量，如下图所示：<br><img src="git_config.png" alt="git config --global --list显示的结果"></p><h2 id="git的基础使用"><a href="#git的基础使用" class="headerlink" title="git的基础使用"></a>git的基础使用</h2><h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>git仓库即repository，在其中的所有文件均可以被git进行管理，对于文件的新建，修改，删除，git均可以对其进行记录，在进行记录之后，任何事件都可以对历史版本进行追踪、还原等操作。</p><p>创建git仓库的方法非常简单，首先将跳转到合适的路径下，创建一个文件夹（也可以是已经包含文件的文件夹），在bash下可以使用如下代码创建一个git仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /e/ProgramDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir Learn_git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/e/ProgramDemo/Learn_git</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><p>在输入完成后可以发现路径下出现了一个以.git命名的隐藏文件夹，说明仓库创建成功。</p><h3 id="将文件添加到版本库"><a href="#将文件添加到版本库" class="headerlink" title="将文件添加到版本库"></a>将文件添加到版本库</h3><p>在使用<code>git init</code>对git仓库进行建立后，即可在该路径下进行相关项目的创建与书写。</p><p>git可以对这些文件进行跟踪，告知每次文件的修改情况（注意：只能跟踪文本文件，可以监测到添加删除的内容。但对二进制文件无法进行跟踪，只能检测到文件大小发生了变化，因此word文档无法进行跟踪，因为其是二进制文件）在进行文本编辑时，建议使用utf8编码，减少冲突的可能。</p><p>下面对如何将git中的文件添加到仓库进行演示：</p><p>首先在仓库路径下右键选择git bash here打开bash。使用touch命令新建一个测试文件test1.txt，向文件中随意写入一些内容，并进行保存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch test1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim test1.txt         <span class="comment"># 随意写入一些内容</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test1.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">This is HeavyTiger!</span><br></pre></td></tr></table></figure><p>写入内容后，可以使用git对文件进行管理了。首先使用命令<code>git status</code>可以看到，git已经检测到我们在路径中创建了新文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        test1.txt</span><br></pre></td></tr></table></figure><p>使用git add命令对文件进行添加，建文件添加到仓库。如果想添加所有的文件，只需要使用<code>git add .</code>命令，即可添加所有文件，如果有不想追踪的文件格式，例如.class文件，可以创建 .gitignore文件对匹配到的相关后缀文件进行忽视。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add test1.txt</span><br><span class="line">git status</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   test1.txt</span><br></pre></td></tr></table></figure><h3 id="查看修改的内容"><a href="#查看修改的内容" class="headerlink" title="查看修改的内容"></a>查看修改的内容</h3><p>对test1.txt的文件内容进行修改，修改后，可以使用<code>git diff test1.txt</code>命令查看对文件的修改情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim test1.txt     <span class="comment">#对文本文件进行编辑，做出修改</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test1.txt</span></span><br><span class="line">This is HeavyTiger! how are you?</span><br><span class="line">This is a new line which I insert on the second day!</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff test1.txt</span></span><br><span class="line">diff --git a/test1.txt b/test1.txt</span><br><span class="line">index 02e6d3d..6eac541 100644</span><br><span class="line">--- a/test1.txt</span><br><span class="line">+++ b/test1.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Hello world!</span><br><span class="line">-This is HeavyTiger!</span><br><span class="line">+This is HeavyTiger! how are you?</span><br><span class="line">+This is a new line which I insert on the second day!</span><br></pre></td></tr></table></figure><p>可以看到，文件已经被修改，<code>git diff</code>命令详细给出了行的改变情况。在查询到修改的内容没有问题后，即可放心地将文件进行add与commit操作。（建议在add与commit之前使用<code>git status</code>命令了解代码是否经过了修改，若发现存在修改，可以使用<code>git diff</code>命令查看修改的详细位置）。</p><h3 id="暂存区修改提交至本地仓库"><a href="#暂存区修改提交至本地仓库" class="headerlink" title="暂存区修改提交至本地仓库"></a>暂存区修改提交至本地仓库</h3><p><code>git commit</code>命令可以将暂存区中的修改提交至<strong>本地</strong>的版本库。使用<code>git commit</code>命令会在本地的版本库中生成一个40位的哈希值（原因是多人对项目进行commit时，若使用常规的编码如0、1、2等，会导致产生冲突），称为commit-id，在进行版本回退（<code>git reset</code>）时，需要通过该值进行回退。</p><p>通常会使用命令<code>git commit -m &quot;message&quot;</code>进行版本提交，在添加了-m参数后，可以输入提交信息，在message中需要简洁地对此次提交进行描述，方便查看版本信息。若提交的message过长，想进行更加清楚的描述，可以使用以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;</span><br><span class="line">message1</span><br><span class="line">message2</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>此外，若已经提交了一个版本至服务器中（即已进行<code>git commit</code>和<code>git push</code>操作，未被<code>git merge</code>），但是发现版本中出现了小bug，不想再重新提交一个新的版本，可以使用<code>git commit --amend</code>命令进行追加提交提交至前一次版本的commit-id。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>如果在上一次使用<code>git add</code>或<code>git commit</code>之后，你对文件又进行了修改，文件的内容发生了改变，但是我们发现开发出现了不可逆的错误，想直接回退到上次<code>git add</code>或<code>git commit</code>时的状态，撤销工作区中的所有修改，可以使用<code>git checkout -- file</code>命令对其作出修改(如果不添加– file即切换分支，注意<code>git checkout</code>命令是一个危险的命令，可能会替换当前的工作区，请务必在再三确认之后，再键入该命令)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">this is a new line which I add the second time!</span><br><span class="line">And I deleted the raw second line.</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">this is a new line which I add the second time!</span><br><span class="line">And I deleted the raw second line.</span><br><span class="line">Add a line which I don&#x27;t want to save.</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">this is a new line which I add the second time!</span><br><span class="line">And I deleted the raw second line.</span><br></pre></td></tr></table></figure><p>如果此时的修改不止存在于工作区下，并且非常憨憨地使用了<code>git add .</code>将所有地修改全部添加到了暂存区，此时显然使用<code>git checkout -- file</code>已经不可能起作用，但是仍然可以进行撤销操作。使用<code>git reset HEAD &lt;file&gt;</code>可以将暂存区中的修改回退到工作区中，使用HEAD表示回退到最新版本。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>我们已经知道了如何对工作区和暂存区中的文件进行版本回退，那么是否可以对已经使用<code>git commit</code>命令提交到本地的版本库中的内容进行回退呢？</p><p>答案是可以的，也需要使用<code>git reset</code>命令进行回退。在向前回退时，可以使用<code>git log</code>命令查看commit-id，通过该id进行版本的回退与更改。查看得到的结果如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit a52f403b886f5168b00ad1c91897cf808d26a990 (HEAD -&gt; master)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:23:43 2021 +0800</span><br><span class="line"></span><br><span class="line">    The second commitment</span><br><span class="line"></span><br><span class="line">commit 4369702618f9fe107a9e2629446ce4e1d4b2a6a8</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:19:26 2021 +0800</span><br><span class="line"></span><br><span class="line">    The first commitment</span><br><span class="line"></span><br><span class="line">commit dcd812278c90f6c66a622ae2e6202054d1740f80 (origin/master, origin/HEAD)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:10:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure><p>通过commit-id可以进行版本的回退。使用<code>git reset --hard ID</code>，例如：<code>git reset --hard dcd812</code>回退到Initial commit版本，也可以通过<strong>HEAD</strong>参数进行版本回退，HEAD参数表示当前的版本，在右上角附带^表示上一个版本，故<code>git reset --hard HEAD^</code>表示回退到上一个版本，<code>git reset --hard HEAD^^</code>表示回退到前两个版本。如果回退到前100个版本，也可以使用如下的方法进行回退<code>git reset --hard HEAD~100</code></p><p>但是在进行版本回退之后将无法看到新版本的commit-id，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 4369702 The first commitment</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (HEAD -&gt; master)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:19:26 2021 +0800</span><br><span class="line"></span><br><span class="line">    The first commitment</span><br><span class="line"></span><br><span class="line">commit dcd812278c90f6c66a622ae2e6202054d1740f80 (origin/master, origin/HEAD)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:10:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以此时如何找到最新的版本号呢？可以使用<code>git reflog</code>命令查看commit记录，在reflog中记录了commit-id，因此可以很方便地向后进行跳转，找到最新commit的代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">a52f403 HEAD@&#123;1&#125;: reset: moving to a52f</span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to 4369</span><br><span class="line">a52f403 HEAD@&#123;3&#125;: commit: The second commitment</span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;4&#125;: commit: The first commitment</span><br><span class="line">dcd8122 (origin/master, origin/HEAD) HEAD@&#123;5&#125;: clone: from github.com:HeavyTiger/Learn_git.git</span><br></pre></td></tr></table></figure><h2 id="git的目录结构"><a href="#git的目录结构" class="headerlink" title="git的目录结构"></a>git的目录结构</h2><p>git中加入了暂存区的概念，分为工作区，版本库中的暂存区，分支等概念。git版本库的模型如下图所示：</p><p><img src="git_model.png" alt="git版本库的模型"></p><p>上图描述了 git 对象的在不同的生命周期中不同的存储位置，通过不同的 git 命令改变 git 对象的存储生命周期。</p><h3 id="工作区-workspace"><a href="#工作区-workspace" class="headerlink" title="工作区(workspace)"></a>工作区(workspace)</h3><p>就是我们当前工作空间，也就是我们当前能在本地文件夹下面看到的文件结构。初始化工作空间或者工作空间 clean 的时候，文件内容和 index 暂存区是一致的，随着修改，工作区文件在没有 add 到暂存区时候，工作区将和暂存区是不一致的。</p><h3 id="暂存区-index"><a href="#暂存区-index" class="headerlink" title="暂存区 (index)"></a>暂存区 (index)</h3><p>老版本概念也叫 Cache 区，就是文件暂时存放的地方，所有暂时存放在暂存区中的文件将随着一个 commit 一起提交到 local repository 此时 local repository 里面文件将完全被暂存区所取代。暂存区是 git 架构设计中非常重要和难理解的一部分。</p><h3 id="本地仓库-local-repository"><a href="#本地仓库-local-repository" class="headerlink" title="本地仓库 (local repository)"></a>本地仓库 (local repository)</h3><p>git 是分布式版本控制系统，和其他版本控制系统不同的是他可以完全去中心化工作，你可以不用和中央服务器 (remote server) 进行通信，在本地即可进行全部离线操作，包括 log，history，commit，diff 等等。完成离线操作最核心是因为 git 有一个几乎和远程一样的本地仓库，所有本地离线操作都可以在本地完成，等需要的时候再和远程服务进行交互。</p><h3 id="远程仓库-remote-repository"><a href="#远程仓库-remote-repository" class="headerlink" title="远程仓库 (remote repository)"></a>远程仓库 (remote repository)</h3><p>中心化仓库，所有人共享，本地仓库会需要和远程仓库进行交互，也就能将其他所有人内容更新到本地仓库把自己内容上传分享给其他人。结构大体和本地仓库一样。</p><h3 id="git命令后文件的变化"><a href="#git命令后文件的变化" class="headerlink" title="git命令后文件的变化"></a>git命令后文件的变化</h3><p><img src="git_fileChange.png" alt="git命令后文件的变化"></p><p>Git管理的是修改，当使用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>所以在每次使用<code>git commit</code>之前，所有修改过的文件都必须重新进行<code>git add</code>，将工作区(workspace)中的修改提交到暂存区(index)中，否则即使进行了<code>git commit</code>本地仓库中也将不会出现修改。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>在<a href="https://github.com/">github</a>或者<a href="https://gitee.com/">gitee</a>网站中注册帐号，创建Repository，作为本地的远程仓库。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在GitHub中，得到仓库的SSH链接或者HTTPS链接，将该链接手动绑定到本地。例如，本人学习git的项目的SSH链接为：<a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>:HeavyTiger/Learn_git.git，故可以在本地的仓库中，使用bash输入<code>git remote add origin git@github.com:HeavyTiger/Learn_git.git</code>命令，使用此命令可以让远端仓库与本地仓库建立远程连接，而该远程仓库名叫做<code>origin</code>(初始建立的远程连接，一般都叫做origin，clone得到的仓库亦叫origin)。</p><p>下一步即可及那个本地库中的内容推送到远程库上：使用命令<code>git push</code>，第一次进行数据上传建议使用<code>git push -u origin master</code>加上了-u参数后，Git会将本地的master分支与远程的master分支进行关联，在之后的推送中即可简化命令<code>git push origin master</code>。</p><p>使用该方法时，记得查看GitHub与本地的文件是否一致，GitHub在创建仓库时会添加readME.md以及.gitignore文件，若本地不存在这些文件，即两边的版本库不同步，在使用<code>git push</code>命令时会产生报错，因此建议使用此方法时，需要将本地的版本库与远程的版本库进行同步。使用<code>git pull</code>命令从远端进行拉取，将版本库与远端同步，之后即可正常的提交代码。因此不建议采用方法一中的方法。因为较为复杂，可以使用方法二中的方法。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>先创建一个远程库，直接进行远程库克隆，即使用<code>git clone</code>命令将远程库与本地库直接关联并且同步数据，由于账户中保存了本机的公匙，因此可以直接将本机的文件进行推送，如果clone他人的项目，自然无法进行推送。如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>你也许还注意到，GitHub给出的地址不止一个，还可以用https之类的协议进行上传，例如<a href="https://github.com/HeavyTiger/Learn_git.git">https://github.com/HeavyTiger/Learn_git.git</a> 这样的地址。实际上，Git支持多种协议，默认的Git使用SSH进行连接，但也可以使用https等其他协议。</p><p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>使用<code>git checkout -b name</code>创建分支并转到新建的分支上。例如创建dev分支，即可以使用<code>git ckeckout -b dev</code>创建dev分支并跳转到dev分支上。</p><p>使用<code>git branch</code>命令可以查看当前的所有分支，在当前分支前会有一个<code>*</code>号。</p><p>可以在<code>dev</code>分支上进行修改以及提交而不会影响<code>master</code>分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev</span></span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span> &gt; hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;the first dev modify&quot;</span></span></span><br><span class="line">[dev a1d3fec] the first dev modify</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  test.txt</span><br></pre></td></tr></table></figure><p>可以看到对dev分支下新建了hello.txt并提交之后，转到master分支，并不存在dev分支下新建立的hello.txt文件。</p><p>但是若要转到master分支后本地工作区中的文件不被直接同步为dev分支下创建的内容，必须要执行<code>git add</code>和<code>git commit</code>命令，否则会导致出错，本地的工作区文件将在跳转后直接被同步为dev分支下修改的内容。</p><h4 id="git-stash暂存"><a href="#git-stash暂存" class="headerlink" title="git stash暂存"></a>git stash暂存</h4><p>如果不想使用<code>git commit</code>进行一次提交该如何操作？比方说，正在对dev分支进行修改，已经做出了部分修改，此时收到了新的命令，即再去另一个分支对bug进行修复，若此时不进行<code>git commit</code>去提交<code>dev</code>分支，在转换分支时会导致数据被合并到出现bug的分支上，回退会导致数据丢失。因此我们可以先使用<code>git add .</code>将工作区中的修改储存到暂存区(<strong>重要</strong>)，再使用<code>git stash</code>命令进行暂存区的暂存。再处理完另一个分支的bug后，可以回退到<code>dev</code>分支下，进行数据的恢复，演示操作如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;this is a temp file.&quot;</span> &gt; temp1.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;this is a temp file.&quot;</span> &gt; temp2.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  temp1.txt  temp2.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch dev</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        temp1.txt</span><br><span class="line">        temp2.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line">Saved working directory and index state WIP on dev: a1d3fec the first dev modify</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line">stash@&#123;0&#125;: WIP on dev: a1d3fec the first dev modify</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   temp1.txt</span><br><span class="line">        new file:   temp2.txt</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (77cfbe0f5b75e14d8118f607d88d42c7e0ac3bc4)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  temp1.txt  temp2.txt  test.txt</span><br></pre></td></tr></table></figure><p>可以看到此时的数据被成功恢复。</p><blockquote><p>(储存)</p></blockquote><ul><li>首先使用<code>git add .</code></li><li>再使用<code>git stash save &quot;备注&quot;</code></li><li>最后使用<code>git stash list</code>查看stash的情况是否正常 </li></ul><blockquote><p>(恢复)</p></blockquote><ul><li>当bug修复完毕时，使用<code>git stash pop</code>(当前现场需要在栈顶)</li><li>若暂存多次，可以使用<code>git stash apply stash@&#123;1&#125;</code>命令进行恢复，</li><li><code>stash@&#123;1&#125;</code>即stash内容的版本，可以使用<code>git stash list</code>进行查看，<br>但是使用<code>git stash apply</code>恢复会导致stash内容不被删除，毕竟使用到了栈，需要手动使用<code>git stash drop</code>来删除。</li></ul><h4 id="快速修复其他分支的相同问题"><a href="#快速修复其他分支的相同问题" class="headerlink" title="快速修复其他分支的相同问题"></a>快速修复其他分支的相同问题</h4><p>同时，在修复bug的情景下，我们可能会想到修复的bug在其他分支上也存在，有没有办法仅仅将修改bug的位置同步到其他分支呢？为此，git提供了<code>cherry-pick</code>命令，允许进行相应的此操作，将一次提交中所做出的修改提交到当前分支上，找到<code>fix bug</code>的<code>commit-id</code>，对当前的分支使用命令<code>git cherry-pick commit-id</code>即可将修改的bug同步到当前的分支。git会自动给当前分支进行一次<code>git commit</code>操作。两次提交的<code>commit-id</code>不相同，原因是这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在当前分支上手动再把修bug的过程重复一遍。</p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>合并分支需要使用到<code>git merge branch</code>命令，将其他的分支合并到HEAD所指向的分支上，如果有冲突，则无法合并，需要手动对冲突进行修复后才能进行合并。如果能够直接合并，会使用Fast-forward的方式进行合并。即直接将当前的分支指针(被合并的)指向合并的分支上，所以速度非常快。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is up to date with &#x27;origin/master&#x27;.</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line">Updating 4369702..a1d3fec</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 1 +</span><br><span class="line"> test.txt  | 5 +++--</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 hello.txt</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>在合并完分支后，对于无用的分支，即可直接删除，使用<code>git branch -d dev</code>命令即可将dev分支删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br><span class="line">Deleted branch dev (was a1d3fec).</span><br></pre></td></tr></table></figure><h3 id="合并冲突处理"><a href="#合并冲突处理" class="headerlink" title="合并冲突处理"></a>合并冲突处理</h3><p>首先，git在对分支进行合并的时候，可能会出现无法合并的情况。例如，同一篇作文，老师对开头进行了修改，而作者对结尾进行了修改，这种情况是可以直接进行合并的，使用<code>git merge</code>命令可以自动进行合并。但是如果老师修改了开头，作者也想修改开头，则没有办法对文章进行自动合并，需要作者或老师对文章开头的修改进行手动合并，在手动处理冲突完成后(即决定将谁对开头的修改作为整篇文章的修改)，之后才能够进行文章的自动合并。举例说明如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world means ni hao in chinese!</span><br><span class="line">I modified this file.</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">&quot;修改了hello.txt，对HelloWorld含义做出解释&quot;</span></span></span><br><span class="line">[dev f5228b6] 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">f5228b6a8d1b5c52d3672369b13227217d5ea339 (HEAD -&gt; dev) 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev, master) the first dev modify</span><br><span class="line">0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 2 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world, this is another way to modify.</span><br><span class="line">ni hao!</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">&quot;在主分支中修改了hello.txt，欲展示合并冲突处理过程&quot;</span></span></span><br><span class="line">[master 42eede8] 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">42eede8aed5975b65ee866223ce642b3f8cc23e7 (HEAD -&gt; master) 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit --all</span></span><br><span class="line">* 42eede8 (HEAD -&gt; master) 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">| * f5228b6 (dev) 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">|/</span><br><span class="line">* a1d3fec (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8 the first modify in branch dev</span><br><span class="line">* 4369702 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd8122 Initial commit</span><br></pre></td></tr></table></figure><p>可以使用<code>git log --graph --pretty=oneline --abbrev-commit --all</code>语句以图表的形式展示所有<code>git commit</code>的情况，其中：</p><blockquote><ul><li><code>--graph</code>参数表示以图标的形式进行显示提交情况。</li><li><code>--pretty=oneline</code>参数表示精简输出，每一次<code>git commit</code>提交均在一行内进行显示。</li><li><code>--abbrev-commit</code>参数表示将commit-ID进行简写，将40个十六进制数的SHA1散列值进行简写，使用7位16进制数进行表示。</li><li><code>--all</code>参数表示展示所有分支中的提交情况，否则只会展示当前分支下的提交情况</li></ul></blockquote><p>图中带有(origin/dev)等字样的表示在远程仓库中进行过提交，存在提交记录，可以直接进行恢复。</p><p>此时对修改进行合并，合并到主分支上，可以看到git提示我们在hello.txt中出现了冲突，自动合并失败，需要我们手动将HEAD所指向的分支中的文件修改后，直接进行提交，才可以进行合并。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>查看当前路径下hello.txt文件中的内容，可以看到，git使用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</code>将出现冲突的地方进行了标记，我们对冲突进行判断并保留，之后进行提交，即可完成合并的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Hello world, this is another way to modify.</span><br><span class="line">ni hao!</span><br><span class="line"> =======</span><br><span class="line">Hello world means ni hao in chinese!</span><br><span class="line">I modified this file.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; dev</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world, this is another way to modify.</span><br><span class="line">ni hao!I modified this file.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">&quot;conflict fixed&quot;</span></span></span><br><span class="line">[master 7373637] conflict fixed</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit --all</span></span><br><span class="line">*   7373637 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6 (dev) 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8 the first modify in branch dev</span><br><span class="line">* 4369702 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd8122 Initial commit</span><br></pre></td></tr></table></figure><h3 id="禁用Fast-forward模式"><a href="#禁用Fast-forward模式" class="headerlink" title="禁用Fast forward模式"></a>禁用Fast forward模式</h3><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。即如果不禁用，若可以以此模式合并，会直接将HEAD移动到最新的dev版本上，会导致分支的信息直接丢失，在多人开发的情况下这样是不好的，需要再强制进行一次<code>git commit</code>操作，则会生成两个节点，将HEAD指向新生成的节点即可。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline</span></span><br><span class="line">*   73736377bbeccfefe5121f2bab028b13784b66e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6a8d1b5c52d3672369b13227217d5ea339 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8aed5975b65ee866223ce642b3f8cc23e7 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">* 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">  develop</span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --all</span></span><br><span class="line">* 20a793580c3af6a1f9117a2142e589ebffe2d3a3 (develop) 在develop分支中增加对noff.txt文件的修改</span><br><span class="line">*   73736377bbeccfefe5121f2bab028b13784b66e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6a8d1b5c52d3672369b13227217d5ea339 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8aed5975b65ee866223ce642b3f8cc23e7 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">* 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge develop</span></span><br><span class="line">Updating 7373637..20a7935</span><br><span class="line">Fast-forward</span><br><span class="line"> noff.txt | 3 +++</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line"> create mode 100644 noff.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --all</span></span><br><span class="line">* 20a793580c3af6a1f9117a2142e589ebffe2d3a3 (HEAD -&gt; master, develop) 在develop分支中增加对noff.txt文件的修改</span><br><span class="line">*   73736377bbeccfefe5121f2bab028b13784b66e4 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6a8d1b5c52d3672369b13227217d5ea339 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8aed5975b65ee866223ce642b3f8cc23e7 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">* 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br></pre></td></tr></table></figure><p>在进行Fast forward之后，可以看到，当前的HEAD直接指向了master以及develop，相当于丢失了一次分支，我们再对develop分支进行一次更新提交，禁止Fast forward。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout develop</span></span><br><span class="line">Switched to branch &#x27;develop&#x27;</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  noff.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim noff.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;尝试对develop分支进行修改，此次尝试不使用Fast forward合并&quot;</span></span></span><br><span class="line">[develop d6bc5fc] 尝试对develop分支进行修改，此次尝试不使用Fast forward合并</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">&quot;进制Fast forward模式合并&quot;</span> develop</span></span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> noff.txt | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit --all</span></span><br><span class="line">*   e0aa011 (HEAD -&gt; master) 进制Fast forward模式合并</span><br><span class="line">|\</span><br><span class="line">| * d6bc5fc (develop) 尝试对develop分支进行修改，此次尝试不使用Fast forward合并</span><br><span class="line">|/</span><br><span class="line">* 20a7935 在develop分支中增加对noff.txt文件的修改</span><br><span class="line">*   7373637 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8 the first modify in branch dev</span><br><span class="line">* 4369702 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd8122 Initial commit</span><br></pre></td></tr></table></figure><p>可以看到再这次提交之后，使用<code>-m</code>参数进行了一次版本提交，因此保留了该分支存在的证据和记录，而之前没有使用<code>--no-ff</code>参数合并的develop版本已经找不到存在的证据了。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h3 id="开发中的分支策略"><a href="#开发中的分支策略" class="headerlink" title="开发中的分支策略"></a>开发中的分支策略</h3><p>在实际开发中，我们应该保证master分支的永远稳定，仅用来发布最新的使用版本，不允许直接在master分支上进行开发。</p><p>我们应该使用dev分支（即develop开发分支）进行开发，对于已经稳定的版本再合并到master分支上。</p><p>每个开发人员都有自己的分支，同时，也可以一个人开辟多条分支，进行修改与特性增加。在经过项目管理人员的批准后，时不时向dev分支上合并即可。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 代码版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
