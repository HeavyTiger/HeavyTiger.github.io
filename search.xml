<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis基础学习</title>
      <link href="/articles/Redis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/Redis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>Redis是一个开源，高级的键值存储和一个适用的解决方案，用于构建高性能，可扩展的Web应用程序。</p><p>Redis有三个主要特点，使它优越于其它键值数据存储系统：</p><ul><li>Redis将其数据库完全保存在内存中，仅使用磁盘进行持久化。</li><li>与其它键值数据存储相比，Redis有一组相对丰富的数据类型。</li><li>Redis可以将数据复制到任意数量的从机中。</li></ul><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="Redis的简介"><a href="#Redis的简介" class="headerlink" title="Redis的简介"></a>Redis的简介</h2><h3 id="Redis的优点"><a href="#Redis的优点" class="headerlink" title="Redis的优点"></a>Redis的优点</h3><ul><li><p><strong>异常快</strong> - Redis非常快，每秒可执行大约<code>110000</code>次的设置(<code>SET</code>)操作，每秒大约可执行<code>81000</code>次的读取/获取(<code>GET</code>)操作。</p></li><li><p><strong>支持丰富的数据类型</strong> - Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。</p></li><li><p><strong>操作具有原子性</strong> - 所有Redis操作都是原子操作，这确保如果两个客户端并发访问，Redis服务器能接收更新的值。</p></li><li><p><strong>多实用工具</strong> - Redis是一个多实用工具，可用于多种用例，如：缓存，消息队列(Redis本地支持发布/订阅)，应用程序中的任何短期数据，例如，web应用程序中的会话，网页命中计数等。</p></li></ul><h3 id="Redis与其他的键值数据库"><a href="#Redis与其他的键值数据库" class="headerlink" title="Redis与其他的键值数据库"></a>Redis与其他的键值数据库</h3><ul><li><p>Redis是键值数据库系统的不同进化路线，它的值可以包含更复杂的数据类型，可在这些数据类型上定义原子操作。</p></li><li><p>Redis是一个内存数据库，但在磁盘数据库上是持久的，因此它代表了一个不同的权衡，在这种情况下，在不能大于存储器(内存)的数据集的限制下实现非常高的写和读速度。</p></li><li><p>内存数据库的另一个优点是，它与磁盘上的相同数据结构相比，复杂数据结构在内存中存储表示更容易操作。 因此，Redis可以做很少的内部复杂性。</p></li></ul><h2 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h2><ol><li><p>在<code>linux</code>的<code>/usr/local/</code>路径下，使用如下命令下载<code>tar</code>包至当前目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>使用如下命令对当前<code>tar</code>包进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf ./redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入解压后的文件夹中，输入<code>make</code>命令进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./redis-6.2.6/</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>等待大概1min后编译完成，输入命令<code>make install</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>默认会在<code>/usr/local/bin/</code>目录下安装好</p></li><li><p>前台启动（不推荐）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输入redis-server简单启动</span></span><br><span class="line">redis-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前对CentOS的连接关闭后，服务自动结束，按下ctrl + c手动关闭</span></span><br></pre></td></tr></table></figure></li><li><p>后台启动（推荐，需要配置守护进程）</p><ol><li><p>使用<code>cp</code>命令备份一份<code>/usr/local/redis-6.2.6/redis.conf</code>至<code>/etc/redis.conf</code>路径下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/redis-6.2.6/redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/etc/redis.conf</code>中的<code>daemonize no</code>为<code>daemonize yes</code>输入<code>/daemonize</code>可以进行查找</p></li><li><p>使用如下命令启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></li></ol></li><li><p>连接到Redis，输入如下命令，端口默认为6379</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接到后台的Redis进程</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入ping后若已连接会输出PONG</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></li><li><p>停止Redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方法1：输入shutdown后，连接断开；输入<span class="built_in">exit</span>后退出连接程序</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; exit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法2：</span></span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line"></span><br><span class="line">[root@CentOS local]# ps -ef | grep redis</span><br><span class="line">root      492087       1  0 14:41 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class="line">root      492095  482950  0 14:42 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line"></span><br><span class="line">[root@CentOS local]# ps -ef | grep redis</span><br><span class="line">root      492087       1  0 14:41 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class="line">root      492095  482950  0 14:42 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line"></span><br><span class="line">[root@CentOS local]# redis-cli</span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br><span class="line">not connected&gt; exit</span><br></pre></td></tr></table></figure></li></ol><h3 id="相关知识点说明"><a href="#相关知识点说明" class="headerlink" title="相关知识点说明"></a>相关知识点说明</h3><ol><li> 默认使用<code>6379</code>端口，原因如下：</li></ol><blockquote><p><code>6379</code>在是9键输入手机按键上<code>MERZ</code>对应的号码，而MERZ取自意大利歌女Alessia Merz的名字。MERZ长期以来被Redis作者antirez及其朋友当作愚蠢的代名词。后来Redis作者在开发Redis时就选用了这个端口。</p></blockquote><ol start="2"><li><p>Redis默认有16个数据库，类似数组下标从0开始，默认使用0号库</p><p>使用命令<code>select &lt;dbid&gt;</code>来切换数据库，例如使用9号数据库: <code>select 8</code></p></li><li><p>密码统一管理，所有库的密码相同</p></li><li><p>Redis使用<strong>单线程 + 多路IO复用</strong>技术，可以体现出多线程的效果，且效效率最好</p><p>类似于很多人找黄牛买火车票，很多人同时在发起请求，即<strong>多路IO复用</strong>，但是黄牛买票是<strong>单线程</strong>操作，若能处理即提供票，则直接响应请求，若不能也不会阻塞，会继续处理其他人的请求，保证CPU一直在工作</p></li></ol><h2 id="Redis的五大基本数据类型"><a href="#Redis的五大基本数据类型" class="headerlink" title="Redis的五大基本数据类型"></a>Redis的五大基本数据类型</h2><h3 id="键的基本操作"><a href="#键的基本操作" class="headerlink" title="键的基本操作"></a>键的基本操作</h3><h4 id="查看当前库中的所有的Key"><a href="#查看当前库中的所有的Key" class="headerlink" title="查看当前库中的所有的Key"></a>查看当前库中的所有的Key</h4><p><strong>使用语句：</strong><code>KEYS *</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; SET k1 Tom</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET k2 Jerry</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET k3 Lily</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">3) &quot;k3&quot;</span><br></pre></td></tr></table></figure><h4 id="判断某个Key是否存在"><a href="#判断某个Key是否存在" class="headerlink" title="判断某个Key是否存在"></a>判断某个Key是否存在</h4><p><strong>使用语句：</strong><code>EXISTS &lt;key&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXISTS k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS k4</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h4 id="查看Key是什么类型"><a href="#查看Key是什么类型" class="headerlink" title="查看Key是什么类型"></a>查看Key是什么类型</h4><p><strong>使用语句：</strong><code>TYPE &lt;key&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TYPE k1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; TYPE k4</span><br><span class="line">none</span><br></pre></td></tr></table></figure><h4 id="删除指定的Key数据"><a href="#删除指定的Key数据" class="headerlink" title="删除指定的Key数据"></a>删除指定的Key数据</h4><p><strong>方法一：</strong></p><p><strong>使用语句：</strong><code>DEL &lt;key&gt;</code> 直接删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL k3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p><strong>使用语句：</strong><code>UNLINK &lt;key&gt;</code> 选择非阻塞删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNLINK k3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure><blockquote><p><strong>区别：</strong></p><p>使用<code>DEL key</code>直接删除数据，选择<code>UNLINK key</code>将根据<code>value</code>选择非阻塞删除：仅将<code>keys</code>从<code>keyspace</code>元数据中删除，真正的删除会在后续的异步操作 </p></blockquote><h4 id="设置与查看过期状态"><a href="#设置与查看过期状态" class="headerlink" title="设置与查看过期状态"></a>设置与查看过期状态</h4><p><strong>使用语句：</strong><code>EXPIRE &lt;key&gt; &lt;sec&gt;</code> 设置多少秒后键值对过期</p><p><strong>使用语句：</strong><code>TTL &lt;key&gt;</code> 查看还有多少秒过期，**-1<strong>表示永不过期，</strong>-2**表示已经过期(即已被清除，<code>TTL</code>未<code>SET</code>的键也得到<code>-1</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TTL k1</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE k1 20</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL k1</span><br><span class="line">(integer) 16</span><br><span class="line">127.0.0.1:6379&gt; TTL k1</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; TTL k1</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; TTL k1</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; TTL k5</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) &quot;k2&quot;</span><br></pre></td></tr></table></figure><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><p><strong>使用语句：</strong><code>DUMP &lt;key&gt;</code> 返回存储在指定键的值的序列化版本</p><p><strong>使用语句：</strong><code>EXPIREAT &lt;key&gt; &lt;timestamp&gt;</code> 设置在指定时间戳之后键到期/过期，这里的时间是Unix时间戳格式</p><p><strong>使用语句：</strong><code>PEXPIRE &lt;key&gt; &lt;milliseconds&gt;</code> 设置键的到期时间(以毫秒为单位)</p><p><strong>使用语句：</strong><code>PEXPIREAT &lt;key&gt; &lt;milliseconds-timestamp&gt;</code> 以Unix时间戳形式来设置键的到期时间(以毫秒为单位)</p><p><strong>使用语句：</strong><code>KEYS &lt;pattern&gt;</code> 查找与指定模式匹配的所有键</p><p><strong>使用语句：</strong><code>MOVE &lt;key&gt; &lt;dbid&gt;</code> 将键移动到另一个数据库</p><p><strong>使用语句：</strong><code>PERSIST &lt;key&gt;</code> 删除指定键的过期时间，得永生</p><p><strong>使用语句：</strong><code>RANDOMKEY</code> 从Redis返回一个随机的键</p><p><strong>使用语句：</strong><code>RENAME &lt;key&gt; &lt;newkey&gt;</code> 更改键的名称</p><p><strong>使用语句：</strong><code>RENAMENX &lt;key&gt; &lt;newkey&gt;</code> 如果新键不存在，重命名键</p><p><strong>使用语句：</strong><code>PTTL &lt;key&gt;</code> 获取键到期的剩余时间(以毫秒为单位)。</p><p><strong>使用语句：</strong><code>SELECT &lt;dbid&gt;</code> 切换数据库，默认16个库，默认选择0数据库</p><p><strong>使用语句：</strong><code>DBSIZE</code> 查看当前数据库中key的数量</p><p><strong>使用语句：</strong><code>FLUSHDB</code> 清空当前数据库中的数据</p><p><strong>使用语句：</strong><code>FLUSHALL</code> 清空所有数据库中的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; DBSIZE</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[1]&gt; FLUSHALL</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; SELECT 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><strong>String</strong>是Redis最基本的类型，一个key对应一个value</li><li><strong>String</strong>是<strong>二进制安全</strong>的，意味着Redis的String可以包含任何数据，比如jpg图片，序列化的对象</li><li><strong>String</strong>是最基本的数据类型，一个Redis中的字符串value最大可以为<strong>512M</strong></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="SET命令"><a href="#SET命令" class="headerlink" title="SET命令"></a>SET命令</h5><p><strong>SET</strong>命令用于在Redis键中设置一些字符串值</p><p><strong>返回值：</strong>若在键中设置了值，返回<code>OK</code>，否则返回<code>Null</code></p><p><strong>基本语法：</strong><code>SET KEY VALUE [EX seconds] [PX milliseconds] [NX|XX]</code></p><ul><li><code>EX seconds</code> − 设置指定的到期时间(以秒为单位)。</li><li><code>PX milliseconds</code> - 设置指定的到期时间(以毫秒为单位)。</li><li><code>NX</code> - 仅在键不存在时设置键。</li><li><code>XX</code> - 只有在键已存在时才设置。</li></ul><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表示设置key1为字符串redis，在60s后到期，仅在键不存在时设置</span></span><br><span class="line">127.0.0.1:6379&gt; SET key1 &quot;redis&quot; EX 60 NX</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p><code>SETNX</code>，<code>SETEX</code>可以直接达成相应的功能：<code>SETEX key seconds value</code>，<code>SETNX key value</code></p></blockquote><h5 id="GET命令"><a href="#GET命令" class="headerlink" title="GET命令"></a>GET命令</h5><p><strong>GET</strong>命令用于获取存储在指定键中的值</p><p><strong>返回值：</strong>若在键中设置了值，返回<code>字符串值</code>，否则返回<code>nil</code></p><p><strong>基本语法：</strong><code>GET KEY </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET k1</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; GET k2</span><br><span class="line">&quot;Null&quot;</span><br><span class="line">127.0.0.1:6379&gt; GET k4</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h5 id="APPEND命令"><a href="#APPEND命令" class="headerlink" title="APPEND命令"></a>APPEND命令</h5><p><strong>APPEND</strong>命令用于在当前键的值末尾添加一些值</p><p><strong>返回值：</strong>返回一个整数，即追加操作后的字符串的长度。</p><p><strong>基本语法：</strong><code>APPEND KEY_NAME APPEND_VALUE </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; APPEND k1 &quot; hello world&quot;</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; GET k1</span><br><span class="line">&quot;redis hello world&quot;</span><br></pre></td></tr></table></figure><h5 id="STRLEN命令"><a href="#STRLEN命令" class="headerlink" title="STRLEN命令"></a>STRLEN命令</h5><p><strong>STRLEN</strong>命令用于获取存储在键中的字符串值的长度。</p><p><strong>返回值：</strong>返回在键中的值的字符串长度，或当键不存在时返回<code>0</code></p><p><strong>基本语法：</strong><code>STRLEN KEY_NAME </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; STRLEN k1</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; STRLEN k2</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; STRLEN k3</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h5 id="INCR命令"><a href="#INCR命令" class="headerlink" title="INCR命令"></a>INCR命令</h5><p>INCR命令用于将键的整数值递增<code>1</code>。如果键不存在，则在执行操作之前将其设置为<code>0</code>。 如果键包含错误类型的值或包含无法表示为整数的字符串，则会返回错误。此操作限于<code>64</code>位有符号整数。</p><p><strong>返回值：</strong>返回一个整数，增加后键的值。</p><p><strong>基本语法：</strong><code>INCR KEY_NAME </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET k3 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET k3</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCR k3</span><br><span class="line">(integer) 101</span><br><span class="line">127.0.0.1:6379&gt; GET k3</span><br><span class="line">&quot;101&quot;</span><br></pre></td></tr></table></figure><blockquote><p>INCR和DECR命令都是原子命令，因为Redis底层使用单线程，因此在一个线程执行时不会被另一个线程打断，最终不可能产生数据不同步的情况</p><p>但是在JAVA中的i++命令不是，若两个线程同时执行100次i++，因为i++语句可以分解成取值，加1，存值的流程，因此最终得到的i的值在2-200之间</p></blockquote><h5 id="DECR命令"><a href="#DECR命令" class="headerlink" title="DECR命令"></a>DECR命令</h5><p><strong>DECR</strong>命令用于将键的整数值减<code>1</code>。 如果键不存在，则在执行操作之前将其设置为<code>0</code>。 如果键包含错误类型的值或包含无法表示为整数的字符串，则会返回错误。 此操作限于<code>64</code>位有符号整数。</p><p><strong>返回值：</strong>返回一个整数，递减后键的值。</p><p><strong>基本语法：</strong><code>DECR KEY_NAME </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DECR k3</span><br><span class="line">(integer) 100</span><br><span class="line">127.0.0.1:6379&gt; GET k3</span><br><span class="line">&quot;100&quot;</span><br></pre></td></tr></table></figure><blockquote><p><code>INCRBY KEY_NAME STEP</code>: 按照STEP步数自增，如<code>INCRBY key 10</code></p><p><code>DECRBY KEY_NAME STEP</code>: 按照STEP步数自减，如<code>DECRBY key 10</code></p></blockquote><h5 id="MSET命令"><a href="#MSET命令" class="headerlink" title="MSET命令"></a>MSET命令</h5><p><strong>MSET</strong>命令用于一次多个键设置它们的值。</p><p><strong>返回值：</strong>返回字符串 - <code>OK</code></p><p><strong>基本语法：</strong><code>MSET key1 value1 key2 value2 .. keyN valueN</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET k4 v4 k5 v5 k6 v6</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p><code>MSETNX</code>当且仅当所有的key都不存在时，设置一个或多个key-value对，<strong>原子性，有一个失效，则所有的都失效</strong></p></blockquote><h5 id="MGET命令"><a href="#MGET命令" class="headerlink" title="MGET命令"></a>MGET命令</h5><p><strong>MGET</strong>命令用于获取所有指定键的值。</p><p><strong>返回值：</strong>返回数组，指定键的值列表。对于不包含字符串值或不存在的每个键，返回特殊值<code>nil</code></p><p><strong>基本语法：</strong><code>MGET key1 key2 .. keyN</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MGET k1 k2 k3 k4 k10</span><br><span class="line">1) &quot;redis hello world&quot;</span><br><span class="line">2) &quot;Null&quot;</span><br><span class="line">3) &quot;100&quot;</span><br><span class="line">4) &quot;v4&quot;</span><br><span class="line">5) (nil)</span><br></pre></td></tr></table></figure><h5 id="GETRANGE命令"><a href="#GETRANGE命令" class="headerlink" title="GETRANGE命令"></a>GETRANGE命令</h5><p><strong>GETRANGE</strong>命令用于获取存储在键的字符串值的子字符串，由偏移量的开始和结束(左闭右闭)确定，可以使用负偏移，以便从字符串的末尾开始计算偏移。</p><p><strong>返回值：</strong>返回数组，指定键的值列表。对于不包含字符串值或不存在的每个键，返回特殊值<code>nil</code></p><p><strong>基本语法：</strong><code>GETRANGE KEY_NAME start end</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETRANGE k1 1 4</span><br><span class="line">&quot;edis&quot;</span><br></pre></td></tr></table></figure><h5 id="SETRANGE命令"><a href="#SETRANGE命令" class="headerlink" title="SETRANGE命令"></a>SETRANGE命令</h5><p><strong>SETRANGE</strong>命令用于覆盖键的值，从指定偏移处开始的一部分字符串。</p><p><strong>返回值：</strong>返回整数，字符串在修改后的长度。</p><p><strong>基本语法：</strong><code>SETRANGE KEY_NAME OFFSET VALUE</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETRANGE k1 0 REDIS</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; GET k1</span><br><span class="line">&quot;REDIS hello world&quot;</span><br></pre></td></tr></table></figure><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>底层结构是简单的动态字符串，是可以用来修改的字符串，内部实现类似于<code>java</code>中的<code>ArrayList</code>，采用预分配冗余空间的形式来减少内存的频繁分配</li><li><code>String</code>中为当前字符串分配的空间<code>capacity</code>一般要高于字符串实际的长度<code>len</code>，当字符串长度小于<code>1M</code>时，扩容均为加倍现有的空间，若高于<code>1M</code>，扩容一次多扩<code>1M</code>的空间，需要注意的是，字符串最大的长度为<code>512M</code></li></ul><h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部，或者列表的尾部，它的底层实现是一个双向链表，对两端的操作性能非常高，通过索引下标操作中间结点的性能会较差</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="LPUSH-RPUSH命令"><a href="#LPUSH-RPUSH命令" class="headerlink" title="LPUSH/RPUSH命令"></a>LPUSH/RPUSH命令</h5><p><strong>LPUSH</strong>命令用于在key列表的头部按照从左至右的顺序插入所有指定的值</p><p><strong>RPUSH</strong>命令用于在key列表的尾部按照从左至右的顺序插入所有指定的值</p><p><strong>返回值：</strong>返回整数，推送操作后列表的长度。</p><p><strong>基本语法：</strong><code>LPUSH KEY_NAME VALUE1.. VALUEN</code> / <code>RPUSH KEY_NAME VALUE1.. VALUEN</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以看到头插法插入查看结果等于将其倒序</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list1 7 &quot;hello&quot; 5 &quot;world&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到尾插法插入查看结果为正序</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list1 2 3 4 5</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line">5) &quot;2&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line">7) &quot;4&quot;</span><br><span class="line">8) &quot;5&quot;</span><br></pre></td></tr></table></figure><h5 id="LPOP-RPOP命令"><a href="#LPOP-RPOP命令" class="headerlink" title="LPOP/RPOP命令"></a>LPOP/RPOP命令</h5><p><strong>LPOP/RPOP</strong>命令表示从左边或右边弹出一个值，值若存在，键仍存在，值若弹光，键则被删除。</p><p><strong>返回值：</strong>返回字符串，即第一个元素的值，如果<code>key</code>不存在，结果则为<code>nil</code> 。</p><p><strong>基本语法：</strong><code>LPOP KEY_NAME</code> / <code>RPOP KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 左侧弹出值</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP list1</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;4&quot;</span><br><span class="line">7) &quot;5&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 右侧弹出值</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP list1</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;4&quot;</span><br></pre></td></tr></table></figure><h5 id="RPOPLPUSH命令"><a href="#RPOPLPUSH命令" class="headerlink" title="RPOPLPUSH命令"></a>RPOPLPUSH命令</h5><p><strong>RPOPLPUSH</strong>命令返回并删除存储在<code>source</code>列表中的最后一个元素(尾部)，并<code>push</code>元素到<code>destination</code>列表中的第一个元素(头部)。</p><p><strong>返回值：</strong>返回被弹出和推出的字符串元素。</p><p><strong>基本语法：</strong><code>RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOPLPUSH list1 list2</span><br><span class="line">&quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list2 0 -1</span><br><span class="line">1) &quot;4&quot;</span><br></pre></td></tr></table></figure><h5 id="LRANGE命令"><a href="#LRANGE命令" class="headerlink" title="LRANGE命令"></a>LRANGE命令</h5><p><strong>LRANGE</strong>命令将返回存储在key列表的特定元素。偏移量开始和停止是从0开始的索引，0是第一元素(该列表的头部)，1是列表的下一个元素。这些偏移量也可以是表示开始在列表的末尾偏移负数。例如，-1是该列表的最后一个元素，-2倒数第二个，等等。</p><p><strong>返回值：</strong>返回数组，指定范围内的元素的列表</p><p><strong>基本语法：</strong><code>LRANGE KEY_NAME START END</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 2</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;7&quot;</span><br></pre></td></tr></table></figure><h5 id="LINDEX命令"><a href="#LINDEX命令" class="headerlink" title="LINDEX命令"></a>LINDEX命令</h5><p><strong>LINDEX</strong>命令用于获取在存储于列表的key索引的元素。索引是从0开始的，所以0表示第一个元素，1第二个元素等等。负数可用于指定开始在列表的尾部元素。这里，-1表示最后一个元素，-2指倒数第二个等等。</p><p><strong>返回值：</strong>返回请求的元素，或者当索引超出范围返回<code>nil</code></p><p><strong>基本语法：</strong><code>LINDEX KEY_NAME INDEX_POSITION</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list1 2</span><br><span class="line">&quot;7&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINDEX list1 10</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h5 id="LLEN命令"><a href="#LLEN命令" class="headerlink" title="LLEN命令"></a>LLEN命令</h5><p><strong>LLEN</strong>命令将返回存储在key列表的长度。</p><p><strong>返回值：</strong>返回整数为列表键长度，如果key不存在，它被解释为一个空列表，则返回0。当存储在关key的值不是一个列表，则会返回错误。</p><p><strong>基本语法：</strong><code>LLEN KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LLEN list1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><h5 id="LINSERT命令"><a href="#LINSERT命令" class="headerlink" title="LINSERT命令"></a>LINSERT命令</h5><p><strong>LINSERT</strong>命令将值插入到某一个列表中的值之前或之后</p><p><strong>返回值：</strong>回复整数，列表插入操作后的长度，没有找到该值时返回-1。</p><p><strong>基本语法：</strong><code>LINSERT KEY_NAME &lt;BEFORE/AFTER&gt; EXISTING_VALUE NEW_VALUE </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list1 BEFORE &quot;7&quot; &quot;before7&quot;</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list1 AFTER &quot;7&quot; &quot;after7&quot;</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;before7&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line">5) &quot;after7&quot;</span><br><span class="line">6) &quot;2&quot;</span><br><span class="line">7) &quot;3&quot;</span><br></pre></td></tr></table></figure><h5 id="LREM命令"><a href="#LREM命令" class="headerlink" title="LREM命令"></a>LREM命令</h5><p><strong>LREM</strong>命令用于从左边向右边删除n个当前设定值。</p><p><strong>返回值：</strong>返回整数，删除的值的数量</p><p><strong>基本语法：</strong><code>LREM KEY_NAME &lt;NUM&gt; TARGET_VALUE</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只存在一个hello，因此返回1</span></span><br><span class="line">127.0.0.1:6379&gt; LREM list1 3 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;before7&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;after7&quot;</span><br><span class="line">5) &quot;2&quot;</span><br><span class="line">6) &quot;3&quot;</span><br></pre></td></tr></table></figure><h5 id="LSET命令"><a href="#LSET命令" class="headerlink" title="LSET命令"></a>LSET命令</h5><p><strong>LSET</strong>命令将在索引值处修改列表元素</p><p><strong>返回值：</strong>返回字符串，超出范围将报错</p><p><strong>基本语法：</strong><code>LSET KEY_NAME INDEX VALUE</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LSET list1 0 &quot;update&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;update&quot;</span><br><span class="line">2) &quot;before7&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;after7&quot;</span><br><span class="line">5) &quot;2&quot;</span><br><span class="line">6) &quot;3&quot;</span><br></pre></td></tr></table></figure><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p><code>List</code>的数据结构为快速链表<code>quickList</code></p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是<code>ziplist</code>，即<strong>压缩列表</strong>，它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成<code>quickList</code>，因为普通的链表需要的附加指针空间太大，会比较浪费空间。例如只存放<code>int</code>型数据，却还要额外的两个指针<code>prev</code>和<code>next</code>，额外空间远大于存放的数据。因此Redis将链表和<code>zipList</code>组合起来形成<code>quickList</code>，即将多个连续空间的<code>zipList</code>使用<strong>双向指针</strong>串接起来使用，既满足了快速插入删除的性能，又不会出现较大的空间冗余</p><h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p><strong>Set</strong>对外提供的功能与<code>List</code>类似，是一个列表的功能，特殊之处在于<code>set</code>是可以自动排重的，当需要存储列表数据，又不希望出现重复数据时，<code>set</code>是一个很好的选择。</p><p><code>Redis</code>的<code>Set</code>是<code>String</code>的<strong>无序集合，底层是一个value为null的hash表，所以增删查的性能都为O(1)</strong></p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="SADD命令"><a href="#SADD命令" class="headerlink" title="SADD命令"></a>SADD命令</h5><p><strong>SADD</strong>命令用于保存key到集合中。</p><p><strong>返回值：</strong>返回成功添加到该集合中的元素的数量。</p><p><strong>基本语法：</strong><code>SADD KEY_NAME VALUE1..VALUEN</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD set1 1 2 3 4</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; SADD set1 1 2 3 4</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h5 id="SISMEMBER命令"><a href="#SISMEMBER命令" class="headerlink" title="SISMEMBER命令"></a>SISMEMBER命令</h5><p><strong>SISMEMBER</strong>命令将查询键是否存在</p><p><strong>返回值：</strong>如果是该集合的成员返回1，否则返回0</p><p><strong>基本语法：</strong><code>SISMEMBER KEY VALUE</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SISMEMBER set1 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER set1 10</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h5 id="SREM命令"><a href="#SREM命令" class="headerlink" title="SREM命令"></a>SREM命令</h5><p><strong>SREM</strong>命令将移除一个或多个值</p><p><strong>返回值：</strong>返回被移除的元素的个数</p><p><strong>基本语法：</strong><code>SREM KEY MEMBER1..MEMBERN</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SREM set1 3 4 5 6</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h5 id="SPOP命令"><a href="#SPOP命令" class="headerlink" title="SPOP命令"></a>SPOP命令</h5><p><strong>SPOP</strong>命令将随机弹出一个元素</p><p><strong>返回值：</strong>返回弹出的值</p><p><strong>基本语法：</strong><code>SPOP KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SPOP set1</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; SPOP set1</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; SPOP set1</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h5 id="SRANDMEMBER命令"><a href="#SRANDMEMBER命令" class="headerlink" title="SRANDMEMBER命令"></a>SRANDMEMBER命令</h5><p><strong>SRANDMEMBER</strong>命令将随机取出N个值，不删除</p><p><strong>返回值：</strong>返回取出的值</p><p><strong>基本语法：</strong><code>SRANDMEMBER KEY [count]</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD set1 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER set1 3</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;8&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER set1 19</span><br><span class="line"> 1) &quot;1&quot;</span><br><span class="line"> 2) &quot;2&quot;</span><br><span class="line"> 3) &quot;3&quot;</span><br><span class="line"> 4) &quot;4&quot;</span><br><span class="line"> 5) &quot;5&quot;</span><br><span class="line"> 6) &quot;6&quot;</span><br><span class="line"> 7) &quot;7&quot;</span><br><span class="line"> 8) &quot;8&quot;</span><br><span class="line"> 9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER set2 1</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h5 id="SMOVE命令"><a href="#SMOVE命令" class="headerlink" title="SMOVE命令"></a>SMOVE命令</h5><p><strong>SMOVE</strong>命令将一个集合中的成员移动到另一个集合中</p><p><strong>返回值：</strong>如果被移动成功，返回1，否则返回0</p><p><strong>基本语法：</strong><code>SMOVE SOURCE DESTINATION MEMBER</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMOVE set1 set2 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMOVE set1 set2 11</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h5 id="SINTER-SUNION-SDIFF命令"><a href="#SINTER-SUNION-SDIFF命令" class="headerlink" title="SINTER/SUNION/SDIFF命令"></a>SINTER/SUNION/SDIFF命令</h5><p><strong>SINTER</strong>命令将获得两个集合的交集</p><p><strong>SUNION</strong>命令将获得两个集合的交集</p><p><strong>SDIFF</strong>命令将获得两个集合的差集，key1中有，key2中没有的</p><p><strong>返回值：</strong>元素</p><p><strong>基本语法：</strong><code>COMMAND KEY1 KEY2</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SINTER set1 set2</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;4&quot;</span><br><span class="line">4) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; SUNION set1 set2</span><br><span class="line"> 1) &quot;1&quot;</span><br><span class="line"> 2) &quot;2&quot;</span><br><span class="line"> 3) &quot;3&quot;</span><br><span class="line"> 4) &quot;4&quot;</span><br><span class="line"> 5) &quot;5&quot;</span><br><span class="line"> 6) &quot;6&quot;</span><br><span class="line"> 7) &quot;7&quot;</span><br><span class="line"> 8) &quot;8&quot;</span><br><span class="line"> 9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; SDIFF set1 set2</span><br><span class="line">1) &quot;6&quot;</span><br><span class="line">2) &quot;7&quot;</span><br><span class="line">3) &quot;8&quot;</span><br><span class="line">4) &quot;9&quot;</span><br><span class="line">5) &quot;10&quot;</span><br></pre></td></tr></table></figure><h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>Set</strong>的数据结构是<code>dict</code>字典，字典是使用哈希表实现的</p><p><code>JAVA</code>中的<code>HashSet</code>内部实现也用的<code>HashMap</code>，只不过所有的<code>Value</code>都指向同一个对象</p><p><code>Redis</code>中的<code>Set</code>内部实现也用的<code>Hash</code>结构，只不过所有的<code>Value</code>都指向同一个内部值</p><h3 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>Hash是一个键值对集合，特别适合用来存储对象。在Redis中，每个哈希(散列)可以存储多达4亿个键-值对。</p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="HSET命令"><a href="#HSET命令" class="headerlink" title="HSET命令"></a>HSET命令</h5><p><strong>HSET</strong>命令用于设置散列字段</p><p><strong>返回值：</strong>若字段是哈希值并且被更新则返回1，若字段已经存在并被更新 则返回0</p><p><strong>基本语法：</strong><code> HSET KEY_NAME FIELD VALUE</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET hash1 field1 hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET hash1 field2 world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET hash1 field1 Hello</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> HSETNX &lt;key&gt; &lt;field&gt; &lt;value&gt; 不存在字段名才允许设置</span></span><br></pre></td></tr></table></figure><h5 id="HGET命令"><a href="#HGET命令" class="headerlink" title="HGET命令"></a>HGET命令</h5><p><strong>HGET</strong>命令将获取与字段中存储的哈希键相关联的值</p><p><strong>返回值：</strong>存在时返回关联的字段，不存在时返回<code>nil</code></p><p><strong>基本语法：</strong><code>HGET KEY_NAME FIELD_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGET hash1 field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; HGET hash1 field4</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用HGETALL &lt;key&gt;可以获得所有的键和值</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL hash1</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure><h5 id="HMSET命令"><a href="#HMSET命令" class="headerlink" title="HMSET命令"></a>HMSET命令</h5><p><strong>HMSET</strong>命令用于设置指定字段各自的值，此命令将覆盖该哈希的任何现存字段，若键不存在，则直接由hash创建</p><p><strong>返回值：</strong>返回OK</p><p><strong>基本语法：</strong><code>HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET user name &quot;heavytiger&quot; age &quot;20&quot; gender &quot;1&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;heavytiger&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;gender&quot;</span><br><span class="line">6) &quot;1&quot;</span><br></pre></td></tr></table></figure><h5 id="HEXISTS命令"><a href="#HEXISTS命令" class="headerlink" title="HEXISTS命令"></a>HEXISTS命令</h5><p><strong>HEXISTS</strong>命令将检查哈希字段是否存在</p><p><strong>返回值：</strong>若包含字段返回1，若不包含或key不存在，返回0</p><p><strong>基本语法：</strong><code>HEXISTS KEY_NAME FIELD_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HEXISTS user name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS user hobby</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS user age</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="HKEYS命令"><a href="#HKEYS命令" class="headerlink" title="HKEYS命令"></a>HKEYS命令</h5><p><strong>HKEYS</strong>命令将获取哈希中的所有字段</p><p><strong>返回值：</strong>返回所有哈希字段列表或者当key不存在时为一个空的列表。</p><p><strong>基本语法：</strong><code>HKEYS KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HKEYS user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;gender&quot;</span><br><span class="line">127.0.0.1:6379&gt; HKEYS user1</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h5 id="HVALS命令"><a href="#HVALS命令" class="headerlink" title="HVALS命令"></a>HVALS命令</h5><p><strong>HVALS</strong>命令将获取哈希中的所有字段值</p><p><strong>返回值：</strong>返回所有哈希字段值列表或者当key不存在时为一个空的列表。</p><p><strong>基本语法：</strong><code>HVALS KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HVALS user1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; HVALS user</span><br><span class="line">1) &quot;heavytiger&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;1&quot;</span><br></pre></td></tr></table></figure><h5 id="HINCRBY命令"><a href="#HINCRBY命令" class="headerlink" title="HINCRBY命令"></a>HINCRBY命令</h5><p><strong>HINCRBY</strong>命令用于增加字段中的存储的值的数量。若键不存在，创建新键，若字段不存在，将值设置为0再进行操作</p><p><strong>返回值：</strong>回复整数，字段的增值操作后的值</p><p><strong>基本语法：</strong><code>HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGET user age</span><br><span class="line">&quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY user age 3</span><br><span class="line">(integer) 23</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY user age -4</span><br><span class="line">(integer) 19</span><br></pre></td></tr></table></figure><h5 id="HDEL命令"><a href="#HDEL命令" class="headerlink" title="HDEL命令"></a>HDEL命令</h5><p><strong>HDEL</strong>命令将删除一个或多个哈希字段</p><p><strong>返回值：</strong>返回从哈希键中删除的字段的数量</p><p><strong>基本语法：</strong><code>HDEL KEY_NAME FIELD1.. FIELDN </code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HKEYS hash1</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field2&quot;</span><br><span class="line">127.0.0.1:6379&gt; HDEL hash1 field1 field2 field3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; HKEYS hash1</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h5 id="HLEN命令"><a href="#HLEN命令" class="headerlink" title="HLEN命令"></a>HLEN命令</h5><p><strong>HLEN</strong>命令将获得哈希键中包含的字段的数量</p><p><strong>返回值：</strong>回复哈希键中字段的数量，若不存在，返回0</p><p><strong>基本语法：</strong><code>HLEN KEY_NAME</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HLEN hash1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; HLEN user</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><p>Hash类型对应的数据结构有两种，当<code>field-value</code>长度较短且个数较少时，使用<code>ziplist</code>，否则使用<code>hashtable</code></p><h3 id="有序集合-Zset"><a href="#有序集合-Zset" class="headerlink" title="有序集合(Zset)"></a>有序集合(Zset)</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>Redis有序集合<code>zset</code>与普通集合<code>set</code>非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个评分(<code>score</code>)，<strong>这个评分(score)被用来按照从最低分到最高分的方式排序集合中的成员</strong>。集合的成员是唯一的，但是评分可以是重复了。</p><p>因为元素是有序的,所以你也可以很快的根据评分<code>score</code>或者次序<code>position</code>来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="ZADD命令"><a href="#ZADD命令" class="headerlink" title="ZADD命令"></a>ZADD命令</h5><p><strong>ZADD</strong>命令将一个或多个成员及其score值存入到有序集合中</p><p><strong>返回值：</strong>返回添加到有序集合中的元素个数</p><p><strong>基本语法：</strong><code>ZADD &lt;key&gt; &lt;score1&gt; &lt;value1&gt; .. &lt;scoreN&gt; &lt;valueN&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD zset 1 Java 10 Python 20 C++ 30 GoLang 15 MySQL</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><h5 id="ZRANGE命令"><a href="#ZRANGE命令" class="headerlink" title="ZRANGE命令"></a>ZRANGE命令</h5><p><strong>ZRANGE</strong>命令将一个有序集合在规定的<strong>下标</strong>范围内进行排序，按照<code>score</code>从小至大的顺序排序</p><p><strong>返回值：</strong>返回排序的有序集合</p><p><strong>基本语法：</strong><code>ZRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -1表示到最大值</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1</span><br><span class="line">1) &quot;Java&quot;</span><br><span class="line">2) &quot;Python&quot;</span><br><span class="line">3) &quot;MySQL&quot;</span><br><span class="line">4) &quot;C++&quot;</span><br><span class="line">5) &quot;GoLang&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> withscores表示展示分数</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1 withscores</span><br><span class="line"> 1) &quot;Java&quot;</span><br><span class="line"> 2) &quot;1&quot;</span><br><span class="line"> 3) &quot;Python&quot;</span><br><span class="line"> 4) &quot;10&quot;</span><br><span class="line"> 5) &quot;MySQL&quot;</span><br><span class="line"> 6) &quot;15&quot;</span><br><span class="line"> 7) &quot;C++&quot;</span><br><span class="line"> 8) &quot;20&quot;</span><br><span class="line"> 9) &quot;GoLang&quot;</span><br><span class="line">10) &quot;30&quot;</span><br></pre></td></tr></table></figure><h5 id="ZRANGEBYSCORE命令"><a href="#ZRANGEBYSCORE命令" class="headerlink" title="ZRANGEBYSCORE命令"></a>ZRANGEBYSCORE命令</h5><p><strong>ZRANGEBYSCORE</strong>命令将一个有序集合在规定的<strong>score</strong>范围内进行排序，按照<code>score</code>从小至大的顺序排序</p><p><strong>返回值：</strong>返回排序的有序集合</p><p><strong>基本语法：</strong><code>ZRANGEBYSCORE &lt;key&gt; &lt;min&gt; &lt;max&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE zset 0 20</span><br><span class="line">1) &quot;Java&quot;</span><br><span class="line">2) &quot;Python&quot;</span><br><span class="line">3) &quot;MySQL&quot;</span><br><span class="line">4) &quot;C++&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE zset 0 20 withscores</span><br><span class="line">1) &quot;Java&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;Python&quot;</span><br><span class="line">4) &quot;10&quot;</span><br><span class="line">5) &quot;MySQL&quot;</span><br><span class="line">6) &quot;15&quot;</span><br><span class="line">7) &quot;C++&quot;</span><br><span class="line">8) &quot;20&quot;</span><br></pre></td></tr></table></figure><h5 id="ZINCRBY命令"><a href="#ZINCRBY命令" class="headerlink" title="ZINCRBY命令"></a>ZINCRBY命令</h5><p><strong>ZINCRBY</strong>命令为元素的<code>score</code>加上增量</p><p><strong>返回值：</strong>返回修改后<code>score</code>的值</p><p><strong>基本语法：</strong><code>ZINCRBY &lt;key&gt; &lt;increment&gt; &lt;value&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZINCRBY zset 5 java</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY zset -5 java</span><br><span class="line">&quot;0&quot;</span><br></pre></td></tr></table></figure><h5 id="ZREM命令"><a href="#ZREM命令" class="headerlink" title="ZREM命令"></a>ZREM命令</h5><p><strong>ZREM</strong>命令将删除该集合下，指定的元素</p><p><strong>返回值：</strong>删除的元素的个数</p><p><strong>基本语法：</strong><code>ZREM &lt;key&gt; &lt;value&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREM zset java</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1</span><br><span class="line">1) &quot;Java&quot;</span><br><span class="line">2) &quot;Redis&quot;</span><br><span class="line">3) &quot;Python&quot;</span><br><span class="line">4) &quot;MySQL&quot;</span><br><span class="line">5) &quot;C++&quot;</span><br><span class="line">6) &quot;GoLang&quot;</span><br></pre></td></tr></table></figure><h5 id="ZCOUNT命令"><a href="#ZCOUNT命令" class="headerlink" title="ZCOUNT命令"></a>ZCOUNT命令</h5><p><strong>ZCOUNT</strong>命令将统计该集合的<code>score</code>区间内的元素个数</p><p><strong>返回值：</strong>返回在区间内的元素</p><p><strong>基本语法：</strong><code>ZCOUNT &lt;key&gt; &lt;min&gt; &lt;max&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCOUNT zset 0 30</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT zset -5 20</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><h5 id="ZRANK命令"><a href="#ZRANK命令" class="headerlink" title="ZRANK命令"></a>ZRANK命令</h5><p><strong>ZRANK</strong>命令将得到值在集合中的排名，排名从0开始</p><p><strong>返回值：</strong>返回值在集合中的排名，从0开始，若不存在返回<code>nil</code></p><p><strong>基本语法：</strong><code>ZRANK &lt;key&gt; &lt;value&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANK zset Java</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANK zset C++</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANK zset unknown</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1</span><br><span class="line">1) &quot;Java&quot;</span><br><span class="line">2) &quot;Redis&quot;</span><br><span class="line">3) &quot;Python&quot;</span><br><span class="line">4) &quot;MySQL&quot;</span><br><span class="line">5) &quot;C++&quot;</span><br><span class="line">6) &quot;GoLang&quot;</span><br></pre></td></tr></table></figure><h4 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h4><p>**SortedSet(zset)**是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构<code>Map&lt;String, Double&gt;</code>，它可以给每一个元素赋予一个权重<code>score</code>，另一方面，他有类似于<code>TreeSet</code>，内部的元素会按照权重<code>score</code>进行排序，可以得到每个元素的名次，还可以通过<code>score</code>的范围来获取元素的列表。</p><p><code>zset</code>的底层使用到了两个数据结构</p><ol><li><code>hash</code>，哈西德作用就是关联元素<code>value</code>和权重<code>score</code>，保障元素<code>value</code>的唯一性，可以通过元素<code>value</code>找到相应的<code>score</code>值。</li><li><strong>跳跃表</strong>，跳跃表的目的在于给元素<code>value</code>排序，根据<code>score</code>的范围获取元素的列表</li></ol><blockquote><p><strong>跳跃表：</strong></p><p>跳表是一个随机化的数据结构，可以被看做二叉树的一个变种，它在性能上和红黑树，AVL树不相上下，但是跳表的原理非常简单，目前在Redis和LeveIDB中都有用到。</p><p>它采用随机技术决定链表中哪些节点应增加向前指针以及在该节点中应增加多少个指针。跳表结构的头节点需有足够的指针域，以满足可能构造最大级数的需要，而尾节点不需要指针域。</p><p><strong>采用这种随机技术，跳表中的搜索、插入、删除操作的时间均为O(logn)，然而，最坏情况下时间复杂性却变成O(n)。相比之下，在一个有序数组或链表中进行插入/删除操作的时间为O(n)，最坏情况下为O(n)。</strong></p><p><img src="1920px-Skip_list.svg.png" alt="img"></p></blockquote><h2 id="Redis6新数据类型"><a href="#Redis6新数据类型" class="headerlink" title="Redis6新数据类型"></a>Redis6新数据类型</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>现代计算机用二进制（位）作为信息的基础单位，1个字节等于8位，例如<code>abc</code>字符串是由3个字节组成，但实际在计算机存储时将其用二进制表示，<code>abc</code>分别对应的ASCII码分别是<code>97</code>、<code>98</code>、<code>99</code>，对应的二进制分别是<code>01100001</code>、<code>01100010</code>和<code>01100011</code></p><p>通过合理地使用<code>Bitmaps</code>，可以合理地使用操作位能够有效地提高内存使用率和开发效率。</p><ol><li><code>Bitmaps</code>本身不是一种数据类型，实际上它就是字符串<code>key-value</code>，但是它可以对字符串的位进行操作。</li><li><code>Bitmaps</code>单独提供了一套命令，所以在Redis中使用<code>Bitmaps</code>和使用字符串的方法不太相同。 可以把<code>Bitmaps</code>想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在<code>Bitmaps</code>中叫做偏移量。</li></ol><p><img src="image-20220126151622002.png" alt="image-20220126151622002"></p><h4 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="SETBIT命令"><a href="#SETBIT命令" class="headerlink" title="SETBIT命令"></a>SETBIT命令</h5><p><strong>SETBIT</strong>命令将设置Bitmaps中的某个偏移量的值为（0或1）</p><p>很多站点的用户id以某个编号开头，直接使用id作为偏移量会造成很大的浪费，可以在每次setbit操作时减去初始id偏移量，可以用来做网站在线人数的统计</p><p><strong>返回值：</strong>返回修改之前该<code>offset</code>上的值，0或1</p><p><strong>基本语法：</strong><code>SETBIT &lt;key&gt; &lt;offset&gt; &lt;value&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETBIT bitmap1 19 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap1 19 0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap1 19 0</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h5 id="GETBIT命令"><a href="#GETBIT命令" class="headerlink" title="GETBIT命令"></a>GETBIT命令</h5><p><strong>GETBIT</strong>命令将获取某偏移量处的值，偏移量从0开始</p><p><strong>返回值：</strong>返回当前该<code>offset</code>上的值，0或1</p><p><strong>基本语法：</strong><code>GETBIT &lt;key&gt; &lt;offset&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETBIT bitmap1 19 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; GETBIT bitmap1 19</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT bitmap1 20</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如确认id为10的用户在某天是否访问过</span></span><br><span class="line">GETBIT users：20220101 10</span><br></pre></td></tr></table></figure><h5 id="BITCOUNT命令"><a href="#BITCOUNT命令" class="headerlink" title="BITCOUNT命令"></a>BITCOUNT命令</h5><p><strong>BITCOUNT</strong>命令将获取Bitmaps中被设置为1的bit数一般情况下会统计整个字符串，通过<code>start</code>和<code>end</code>参数，可以使计数旨在特定下标区间上进行（<strong>注意：下标表示字节区间，左闭右闭</strong>）。</p><p><strong>返回值：</strong>返回当前范围内为Bitmaps中为1的数量</p><p><strong>基本语法：</strong><code>BITCOUNT&lt;key&gt; &lt;start&gt; &lt;end&gt;</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET abc abc</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到就是调用的String类型，`01100001`、`01100010`和`01100011`</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT abc 0 -1</span><br><span class="line">(integer) 10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 01100001</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT abc 0 0</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 01100010</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT abc 1 1</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 01100011</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT abc 2 2</span><br><span class="line">(integer) 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="BITOP命令"><a href="#BITOP命令" class="headerlink" title="BITOP命令"></a>BITOP命令</h5><p><strong>BITOP</strong>命令将多个Bitmaps进行<strong>交、并、非、异或</strong>运算，将结果保存在<code>destkey</code>中，可以用类似命令计算月活度等</p><p><strong>返回值：</strong>返回修改之前该<code>offset</code>上的值，0或1</p><p><strong>基本语法：</strong><code>BITOP (and/or/not/xor) &lt;destkey&gt; [key…]</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 2022年1月1日，用户1，2，5，9登录</span></span><br><span class="line">SETBIT unique:users:20220101 1 1</span><br><span class="line">SETBIT unique:users:20220101 2 1</span><br><span class="line">SETBIT unique:users:20220101 5 1</span><br><span class="line">SETBIT unique:users:20220101 9 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2022年1月2日，用户0，1，4，9登录</span></span><br><span class="line">SETBIT unique:users:20220102 0 1</span><br><span class="line">SETBIT unique:users:20220102 1 1</span><br><span class="line">SETBIT unique:users:20220102 4 1</span><br><span class="line">SETBIT unique:users:20220102 9 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算两天都访问过网站的用户数量</span></span><br><span class="line">127.0.0.1:6379&gt; BITOP AND unique:users:and unique:users:20220101 unique:users:20220102</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算均访问过的数量</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT unique:users:and</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h4 id="数据结构-5"><a href="#数据结构-5" class="headerlink" title="数据结构"></a>数据结构</h4><p>Bitmaps实质就是对String的一系列操作</p><p>使用bitmaps可以节省很多资源，例如用户规模为1亿的站点，若使用Bitmaps只需要占用不到12MB的空间，但是若使用set将会占用800MB，很明显可以省下很大的空间，但是只适合用户活跃度很高的网站，若用户的活跃度不高，只存在很少的在线用户，那么使用bitmaps将占用很多资源存储0，反而会导致内存开销大。</p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但是要求根据独立IP，搜索记录数去重等计数问题，很难通过incr进行实现，这种需要求集合中不重复元素的个数的问题被称为基数问题。</p><p>解决基数问题的方案有以下很多种：</p><ol><li>数据存储在MySQL表中，使用distinct count计算不重复个数</li><li>使用Redis提供的hash、set、bitmaps等数据结构来处理</li></ol><p>但是以上的方案结果很精确，却会导致数据不断增加，占用空间越来越大，对于很大的数据集不切实际。</p><p>为了解决这个问题，Redis通过<code>HyperLogLog</code>降低一定的精度，平衡存储空间，在输入元素的数量或者体积非常大时，计算基数总空间恒为定值。</p><p>在 Redis 里面，每个<code>HyperLogLog</code>键只需要花费<code>12 KB</code>内存，就可以计算接近<code>2^64</code>个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><blockquote><p><strong>什么是基数？</strong></p><p>比如数据集{1,3,5,7,5,7,8}，那么这个数据集的基数集为{1,3,5,7,8}，基数(不重复元素)为5。<strong>基数估计就是在误差可接受的范围内，快速计算基数。</strong></p></blockquote><h4 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="PFADD命令"><a href="#PFADD命令" class="headerlink" title="PFADD命令"></a>PFADD命令</h5><p><strong>PFADD</strong>命令将指定的元素集添加进HyperLogLog中</p><p><strong>返回值：</strong>如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><p><strong>基本语法：</strong><code>PFADD &lt;key&gt; [elements ... ]</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD hll1 &quot;redis&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll1 &quot;redis&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll1 &quot;redis&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll1 &quot;mysql&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll1 &quot;java&quot; &quot;mysql&quot; &quot;php&quot;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="PFCOUNT命令"><a href="#PFCOUNT命令" class="headerlink" title="PFCOUNT命令"></a>PFCOUNT命令</h5><p><strong>PFCOUNT</strong>命令将计算HLL的近似基数，不见得准确，但是误差很低，标准误差只有<code>0.81%</code>左右，即估算百万级的访问IP，大致误差数量只为1万左右</p><p><strong>返回值：</strong>获得近似基数值，也可以获取多组数据的近似基数值，例如一周的UV可以使用7天的日UV合并计算</p><p><strong>基本语法：</strong><code>PFCOUNT [keys ... ]</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFCOUNT hll1</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll2 redis java java mysql mysql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT hll2</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT hll1 hll2</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h5 id="PFMERGE命令"><a href="#PFMERGE命令" class="headerlink" title="PFMERGE命令"></a>PFMERGE命令</h5><p><strong>PFMERGE</strong>命令将多个HLL合并后的结果计算存储在另一个HLL中，比如每月的活跃用户可以用每天的活跃用户合并计算</p><p><strong>返回值：</strong>合并成功返回OK</p><p><strong>基本语法：</strong><code>PFMERGE [keys ... ]</code></p><p><strong>例如：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFMERGE hll3 hll1 hll2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS hll*</span><br><span class="line">1) &quot;hll1&quot;</span><br><span class="line">2) &quot;hll2&quot;</span><br><span class="line">3) &quot;hll3&quot;</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT hll3</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h4 id="数据结构-6"><a href="#数据结构-6" class="headerlink" title="数据结构"></a>数据结构</h4><p>可以详见该文章：<a href="https://juejin.cn/post/6844903785744056333">HyperLogLog 算法的原理讲解以及 Redis 是如何应用它的 - 掘金 (juejin.cn)</a></p><p>插入数据及误差模拟：<a href="http://content.research.neustar.biz/blog/hll.html">Sketch of the Day: HyperLogLog — Cornerstone of a Big Data Infrastructure – AK Tech Blog (neustar.biz)</a></p><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><p>可以用来实现诸如附近的人，附近的景点之类的功能。</p><h4 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li><p><code>GEOADD</code>添加地理位置，经度纬度名称。两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。当坐标位置超出指定范围时，该命令将会返回一个错误。已经添加的数据，是无法再次往里面添加的。</p><p><code>GEOADD &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; &lt;member&gt; [longitude latitude member...]</code></p></li><li><p><code>GEOPOS</code>获取指定位置的坐标值</p><p><code>GEOPOS &lt;key&gt; &lt;member&gt; [members...]</code></p></li><li><p><code>GEODIST</code>获取两个位置之间的指向距离</p><p><code>GEODIST &lt;key&gt; &lt;member1&gt; &lt;member2&gt; [m|km|ft|mi]</code></p></li><li><p><code>GEORADIUS</code>将给定的经纬度为中心，找出某一半径内的元素</p><p><code>GEORADIUS &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; radius m|km|ft|mi</code></p></li></ol><h2 id="Redis配置文件详解"><a href="#Redis配置文件详解" class="headerlink" title="Redis配置文件详解"></a>Redis配置文件详解</h2><p>按照<code>redis.conf</code>文件中的相关配置，进行从上至下的依次介绍：</p><ol><li><p>```shell</p><h1 id="1k-gt-1000-bytes"><a href="#1k-gt-1000-bytes" class="headerlink" title="1k =&gt; 1000 bytes"></a>1k =&gt; 1000 bytes</h1><h1 id="1kb-gt-1024-bytes"><a href="#1kb-gt-1024-bytes" class="headerlink" title="1kb =&gt; 1024 bytes"></a>1kb =&gt; 1024 bytes</h1><h1 id="1m-gt-1000000-bytes"><a href="#1m-gt-1000000-bytes" class="headerlink" title="1m =&gt; 1000000 bytes"></a>1m =&gt; 1000000 bytes</h1><h1 id="1mb-gt-1024-1024-bytes"><a href="#1mb-gt-1024-1024-bytes" class="headerlink" title="1mb =&gt; 1024*1024 bytes"></a>1mb =&gt; 1024*1024 bytes</h1><h1 id="1g-gt-1000000000-bytes"><a href="#1g-gt-1000000000-bytes" class="headerlink" title="1g =&gt; 1000000000 bytes"></a>1g =&gt; 1000000000 bytes</h1><h1 id="1gb-gt-102410241024-bytes"><a href="#1gb-gt-102410241024-bytes" class="headerlink" title="1gb =&gt; 102410241024 bytes"></a>1gb =&gt; 1024<em>1024</em>1024 bytes</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   redis配置中只支持`bytes`即字节单位，其他的单位均按照规范声明，非大小写敏感</span><br><span class="line">   </span><br><span class="line">2. `INCLUDES`部分声明了需要包含的文件，类似于`jsp`中的include，可以把其他的文件包含到该配置文件中：</span><br><span class="line"></span><br><span class="line">   ```shell</span><br><span class="line">   # include /path/to/local.conf</span><br><span class="line">   # include /path/to/other.conf</span><br></pre></td></tr></table></figure></li><li><p><code>NETWORK</code>部分包含了很多与网络相关的配置：</p><ol><li><code>bind</code>，默认为<code>bind 127.0.0.1 -::1</code>，表示该机的Redis只能通过本地<code>localhost</code>进行访问，其他通过远程对该<code>6379</code>端口的访问均无法连接，bind指的是绑定部署redis服务机器的网卡ip，比如一台机器对外暴露了多个ip，ip1，ip2，ip3，通过ip1，ip2，ip3都可以访问这台机器，也就是通过ip1，ip2，ip3都可以连接到redis服务，但是设置了bind参数后，比如bind=ip1，此时只能通过ip1访问redis服务，ip2，ip3不行，虽然ip2，ip3可以访问部署redis的机器，但是却不能访问此机器上的redis服务。</li><li><code>protected-mode</code>，默认为<code>yes</code>，表示保护模式开启，若要允许远程访问，需要将3.1中的<code>bind</code>注释掉，修改该项为<code>no</code></li><li><code>port</code>，默认为<code>6379</code></li><li><code>tcp-backlog</code>，默认为<code>511</code>；设置<code>tcp</code>的<code>backlog</code>，<code>backlog</code>其实是一个连接队列，<strong>backlog队列总和=未完成三次握手队列＋已经完成三次握手队列</strong> 在高并发环境下你需要一个高<code>backlog</code>值来避免慢客户端连接问题。注意Linux内核会将这个值减小到<code>proc/sys/net/core/somaxconn</code>的值<code>128</code>，所以需要确认增大<code>/proc/sys/net/core/somaxconn</code>和<code>/proc/sys/net/ipv4/tcp_max_syn_backlog(128)</code>两个值来达到想要的效果</li><li><code>timeout</code>默认为<code>0</code>，表示一个连接在经过多少秒无操作后自动关闭，0表示永不超时</li><li><code>tcp-keepalive</code>默认为<code>300</code>，表示一个<code>tcp</code>连接在经过多少秒无操作后关闭</li></ol></li><li><p><code>GENERAL</code>部分包含了很多通用配置</p><ol><li><p><code>daemonize</code>，默认为<code>no</code>表示不启用守护进程，即只允许在前台操作，若需要后台操作将其改为<code>yes</code></p></li><li><p><code>pidfile</code>，默认为<code>/var/run/redis_6379.pid</code>，服务在启动后会将端口号存到该文件中</p></li><li><p><code>loglevel</code>，默认为<code>notice</code>，与log4j类似，其也允许多种日志级别：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> debug (a lot of information, useful <span class="keyword">for</span> development/testing)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> notice (moderately verbose, what you want <span class="keyword">in</span> production probably)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> warning (only very important / critical messages are logged)</span></span><br></pre></td></tr></table></figure></li><li><p><code>logfile</code>，默认为空，即日志的存放位置，修改后，将日志存放到修改后的路径</p></li><li><p><code>databases</code>，默认为<code>16</code>，即16个数据库编号从<code>0</code>到<code>databases-1</code></p></li></ol></li><li><p><code>SECURITY</code>部分包含了很多与Redis安全相关的配置</p><ol><li>默认密码是没有做设置的，可以修改密码，默认为<code># requirepass foobared</code>，将注释取消后，修改为密码即可</li></ol></li><li><p><code>LIMITS</code>部分表示客户端的相关限制</p><ol><li><p><code>maxclients</code>，默认为10000，设置Redis同时可与多少个客户端进行连接。如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出<code>max number of clients reached</code>以作回应。</p></li><li><p><code>maxmemory</code>，<strong>必须设置</strong>，否则内存占满会导致服务器宕机，该选项设置redis可用内存量，一旦达到上限会移除内部数据，移除规则可以在<code>maxmemory-policy</code>中进行设置。</p></li><li><p><code>maxmemory-policy</code>，表示移除规则：</p><blockquote><ul><li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li><li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li><li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li><li>allkeys-random：在所有集合key中，移除随机的key</li><li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li><li>noeviction：不进行移除。针对写操作，只是返回错误信息</li></ul></blockquote></li><li><p><code>maxmemory-samples</code>，表示LRU算法和TTL算法的样本大小，一般设置3-7的数字，数值越小，样本越不精确，但是性能消耗也小。</p></li></ol></li></ol><h2 id="Redis发布与订阅"><a href="#Redis发布与订阅" class="headerlink" title="Redis发布与订阅"></a>Redis发布与订阅</h2><h3 id="发布与订阅介绍"><a href="#发布与订阅介绍" class="headerlink" title="发布与订阅介绍"></a>发布与订阅介绍</h3><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><h3 id="发布与订阅简易流程"><a href="#发布与订阅简易流程" class="headerlink" title="发布与订阅简易流程"></a>发布与订阅简易流程</h3><ol><li><p>新建两个ssh连接连接到redis数据库</p><p><img src="SLELOGN.png" alt="SLELOGN"></p></li><li><p>连接1使用<code>SUBSCRIBE</code>命令订阅频道<code>channelTest</code></p></li><li><p>连接2使用<code>PUBLISH</code>命令通过频道<code>channelTest</code>发送<code>hello!!!</code>消息</p></li><li><p>连接1能接受到订阅的频道中的消息</p><p><img src="7V1X.png" alt="7V1X"></p></li></ol><blockquote><p>发布的消息没有经过持久化操作，订阅的客户端只能收到订阅后发布的消息</p></blockquote><h2 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h2><p>由于是在阿里云服务器上进行Redis操作，因此需要保证操作安全，若不设置密码被扫描到<code>6379</code>端口开放，恭喜你，你的服务器将很快变成矿机。</p><p>在<code>/etc/redis.conf</code>中进行如下配置：</p><ol><li><p>注释掉 <code>bind 127.0.0.1</code><br>可以在<code>vim /etc/redis.conf</code>后进入指令模式，然后输入<code>：/单词</code>快速找到单词的位置</p></li><li><p>修改<code>protected-mode</code><br>在<code>redis.conf</code>中找到<code>protected-mode</code>将后面的<code>yes</code>改为<code>no</code></p></li><li><p>修改<code>daemonize</code><br>在<code>redis.conf</code>中找到<code>daemonize</code>将后面的<code>no</code>改为<code>yes</code></p></li><li><p>修改密码<code>requirepass foobared</code><br>在<code>redis.conf</code>中找到<code>requirepass foobared</code>，可在其后添加密码：<code>requirepass yourPassword</code></p></li><li><p>关闭<code>redis-server</code>，使用语句<code>ps -ef | grep redis</code>找到redis的<code>pid</code>，使用命令<code>kill -9 pid</code>结束服务</p></li><li><p>使用命令重启服务<code>redis-server /etc/redis.conf</code></p></li><li><p>使用<code>redis-cli -a yourPassword</code>命令尝试<code>redis-cli</code>连接，若连接成功，输入<code>ping</code>将得到<code>PONG</code></p></li><li><p>防火墙开启<code>6379</code>端口，允许外网连接访问</p></li></ol><h3 id="测试Redis连接"><a href="#测试Redis连接" class="headerlink" title="测试Redis连接"></a>测试Redis连接</h3><h4 id="导入Jedis所需的包"><a href="#导入Jedis所需的包" class="headerlink" title="导入Jedis所需的包"></a>导入Jedis所需的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写如下所示代码测试连接"><a href="#编写如下所示代码测试连接" class="headerlink" title="编写如下所示代码测试连接"></a>编写如下所示代码测试连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Redis连接及相关功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heavytiger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testRedis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.xxx.xxx.xxx&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;6o5FLS9b...........EGf56vE1orO&quot;</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果如下：</span></span><br><span class="line"><span class="comment">// PONG</span></span><br></pre></td></tr></table></figure><h3 id="Jedis的常用操作"><a href="#Jedis的常用操作" class="headerlink" title="Jedis的常用操作"></a>Jedis的常用操作</h3><h4 id="API：Key"><a href="#API：Key" class="headerlink" title="API：Key"></a>API：Key</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试操作key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Jedis连接</span></span><br><span class="line">    Jedis jedis = createConnect();</span><br><span class="line">    <span class="comment">// KEYS &lt;pattern&gt; 模式串匹配获取键</span></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// SET &lt;key&gt; &lt;value&gt;, k2不存在时才构造，k3设置15s后过期</span></span><br><span class="line">    jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    jedis.setnx(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">    jedis.setex(<span class="string">&quot;k3&quot;</span>, <span class="number">15</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">    <span class="comment">// 测试EXISTS</span></span><br><span class="line">    System.out.println(<span class="string">&quot;If exists k1: &quot;</span> + jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;If exists k2, k3, k4: &quot;</span> + jedis.exists(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;k3&quot;</span>, <span class="string">&quot;k4&quot;</span>));</span><br><span class="line">    <span class="comment">// 测试GET</span></span><br><span class="line">    System.out.println(<span class="string">&quot;k1 is: &quot;</span> + jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    <span class="comment">// 测试TTL</span></span><br><span class="line">    System.out.println(<span class="string">&quot;k3 will expire after &quot;</span> + jedis.ttl(<span class="string">&quot;k3&quot;</span>) + <span class="string">&quot; seconds!&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;k3 is: &quot;</span> + jedis.get(<span class="string">&quot;k3&quot;</span>));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 休眠15s</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">15</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;k3 will expire after &quot;</span> + jedis.ttl(<span class="string">&quot;k3&quot;</span>) + <span class="string">&quot; seconds!&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;k3 is: &quot;</span> + jedis.get(<span class="string">&quot;k3&quot;</span>));</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试结果</span></span><br><span class="line">PONG</span><br><span class="line">s3</span><br><span class="line">list1</span><br><span class="line">zset</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">set1</span><br><span class="line">user</span><br><span class="line">s1</span><br><span class="line">s2</span><br><span class="line">If exists k1: true</span><br><span class="line">If exists k2, k3, k4: 2</span><br><span class="line">k1 is: value1</span><br><span class="line">k3 will expire after 14 seconds!</span><br><span class="line">k3 is: value3</span><br><span class="line">k3 will expire after -2 seconds!</span><br><span class="line">k3 is: null</span><br></pre></td></tr></table></figure><h4 id="API：String"><a href="#API：String" class="headerlink" title="API：String"></a>API：String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试操作String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Jedis连接</span></span><br><span class="line">    Jedis jedis = createConnect();</span><br><span class="line">    jedis.mset(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;meow&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;str3&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;str3&quot;</span>, <span class="string">&quot;strN&quot;</span>));</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">[meow, hello, world, null]</span><br></pre></td></tr></table></figure><h4 id="API：List"><a href="#API：List" class="headerlink" title="API：List"></a>API：List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试操作List</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Jedis连接</span></span><br><span class="line">    Jedis jedis = createConnect();</span><br><span class="line">    List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;list1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 测试压入数据</span></span><br><span class="line">    jedis.lpush(<span class="string">&quot;list1&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    <span class="comment">// 应该输出redis</span></span><br><span class="line">    System.out.println(<span class="string">&quot;The 4th index is: &quot;</span> + jedis.lindex(<span class="string">&quot;list1&quot;</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="comment">// 测试循环弹出数据</span></span><br><span class="line">    <span class="keyword">while</span>(jedis.llen(<span class="string">&quot;list1&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(jedis.rpop(<span class="string">&quot;list1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">redis</span><br><span class="line">hi</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">The 4th index is: redis</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">hi</span><br><span class="line">redis</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h4 id="API：Set"><a href="#API：Set" class="headerlink" title="API：Set"></a>API：Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试操作Set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Jedis连接</span></span><br><span class="line">    Jedis jedis = createConnect();</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order03&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; sMembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String order : sMembers) &#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    jedis.srem(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">    sMembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String order : sMembers) &#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">order03</span><br><span class="line">order01</span><br><span class="line">order02</span><br><span class="line">order03</span><br><span class="line">order01</span><br></pre></td></tr></table></figure><h4 id="API：Hash"><a href="#API：Hash" class="headerlink" title="API：Hash"></a>API：Hash</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试操作Hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Jedis连接</span></span><br><span class="line">    Jedis jedis = createConnect();</span><br><span class="line">    Map&lt;String, String&gt; val = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 多种方式存入值</span></span><br><span class="line">    val.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;heavytiger&quot;</span>);</span><br><span class="line">    val.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">    val.put(<span class="string">&quot;school&quot;</span>, <span class="string">&quot;wut&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>, val);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;gender&quot;</span> , <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取hash中的值</span></span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, String&gt; item : jedis.hgetAll(<span class="string">&quot;user&quot;</span>).entrySet()) &#123;</span><br><span class="line">        System.out.println(item.getKey() + <span class="string">&quot; is: &quot;</span> + item.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">name is: heavytiger</span><br><span class="line">gender is: 1</span><br><span class="line">school is: wut</span><br><span class="line">age is: 20</span><br></pre></td></tr></table></figure><h4 id="API：ZSet"><a href="#API：ZSet" class="headerlink" title="API：ZSet"></a>API：ZSet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试操作ZSet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Jedis连接</span></span><br><span class="line">    Jedis jedis = createConnect();</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zSet01&quot;</span>, <span class="number">100d</span>, <span class="string">&quot;z3&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zSet01&quot;</span>, <span class="number">90d</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zSet01&quot;</span>, <span class="number">80d</span>, <span class="string">&quot;w5&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zSet01&quot;</span>, <span class="number">70d</span>, <span class="string">&quot;z6&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; zRange1 = jedis.zrange(<span class="string">&quot;zSet01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String e : zRange1) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;Tuple&gt; zRange2 = jedis.zrangeWithScores(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Tuple tuple : zRange2) &#123;</span><br><span class="line">        System.out.println(tuple.getElement() + <span class="string">&quot; : &quot;</span> + tuple.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">z6</span><br><span class="line">w5</span><br><span class="line">l4</span><br><span class="line">z3</span><br><span class="line">Java : 1.0</span><br><span class="line">Python : 10.0</span><br><span class="line">MySQL : 15.0</span><br><span class="line">C++ : 20.0</span><br><span class="line">GoLang : 30.0</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合Redis实例"><a href="#SpringBoot整合Redis实例" class="headerlink" title="SpringBoot整合Redis实例"></a>SpringBoot整合Redis实例</h2><h3 id="实现发送校验手机验证码功能性需求"><a href="#实现发送校验手机验证码功能性需求" class="headerlink" title="实现发送校验手机验证码功能性需求"></a>实现发送校验手机验证码功能性需求</h3><blockquote><p><strong>需求：</strong></p><ol><li>输入手机号，点击发送后随机生成6位数字码，2分钟有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入3次</li></ol><p><strong>需求分析：</strong></p><ol><li>随机6位数字验证码可以通过<code>Random.nextInt()</code>生成</li><li>验证码2分钟之内有效可以通过将验证码放入<code>Redis</code>中，设置120s后过期实现</li><li>从<code>Redis</code>中取出验证码，判断是否一致，若一致成功，不一致错误</li><li>使用<code>incr</code>每次发送验证码后<code>+1</code>，值大于2时不能继续发送</li></ol></blockquote><h3 id="代码实现及结果"><a href="#代码实现及结果" class="headerlink" title="代码实现及结果"></a>代码实现及结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Redis实现验证码的相关功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heavytiger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取jedis连接对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回获取到的jedis连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Jedis <span class="title">createConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;121.xxx.xxx.xxx&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;6o5FLS9b..............iEGf56vE1orO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> jedis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取距离当天结束所剩的秒数.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回距离一天结束所剩秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRemainTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar ca = Calendar.getInstance();</span><br><span class="line">        ca.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">        ca.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">        ca.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (ca.getTimeInMillis() - System.currentTimeMillis()) / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得验证码.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回生成的验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        StringBuffer code = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            code.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端获取验证码.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 客户端提供的手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = createConnect();</span><br><span class="line">        String countKey = <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;:count&quot;</span>;</span><br><span class="line">        String codeKey = <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取当前该手机号的count，超过3次不再提供验证码</span></span><br><span class="line">        String curCount = jedis.get(countKey);</span><br><span class="line">        <span class="keyword">if</span> (curCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 表示此时是第一次发送</span></span><br><span class="line">            jedis.setex(countKey, getRemainTime(), <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(curCount) &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明该手机号没有到3次，次数加一</span></span><br><span class="line">            jedis.incr(countKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明改手机号到三次，报错</span></span><br><span class="line">            System.out.println(<span class="string">&quot;您今日获取验证码次数已达三次，请联系客服或明日重试！&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将验证码存入redis中</span></span><br><span class="line">        String curCode = createCode();</span><br><span class="line">        System.out.println(curCode);</span><br><span class="line">        jedis.setex(codeKey, getRemainTime(), curCode);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verifyCode</span><span class="params">(String phone, String code)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = createConnect();</span><br><span class="line">        String codeKey = <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        String curCode = jedis.get(codeKey);</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入验证码！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code.equals(curCode)) &#123;</span><br><span class="line">            <span class="comment">// 此时密码正确</span></span><br><span class="line">            System.out.println(<span class="string">&quot;验证码正确！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证码错误或已失效，请重试！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> OK = <span class="keyword">true</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        PhoneCode phoneCode = <span class="keyword">new</span> PhoneCode();</span><br><span class="line">        <span class="keyword">while</span>(OK) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1. 生成验证码&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2. 校验验证码&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;0. 退出&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">                String phone = scanner.next();</span><br><span class="line">                phoneCode.getCode(phone);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                String phone = scanner.next();</span><br><span class="line">                String code = scanner.next();</span><br><span class="line">                phoneCode.verifyCode(phone, code);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                OK = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试如下所示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试生成验证码</span></span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line">1 15327618888</span><br><span class="line">148400</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验成功</span></span><br><span class="line">2 15327618888 148400</span><br><span class="line">验证码正确！</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证码错误校验失败</span></span><br><span class="line">2 15327618888 123456</span><br><span class="line">验证码错误或已失效，请重试！</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手机号不对应查询失败</span></span><br><span class="line">2 15311111111 148400</span><br><span class="line">验证码错误或已失效，请重试！</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同一手机号三次获取验证码后提示已达三次</span></span><br><span class="line">1 110</span><br><span class="line">476165</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line">1 110</span><br><span class="line">071776</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line">1 110</span><br><span class="line">128346</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line">1 110</span><br><span class="line">您今日获取验证码次数已达三次，请联系客服或明日重试！</span><br><span class="line">1. 生成验证码</span><br><span class="line">2. 校验验证码</span><br><span class="line">0. 退出</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h3><p><strong>在pom.xml文件中引入Redis的相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在application.properties中配置Redis</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment">#Redis连接密码</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>= <span class="string">0</span></span><br><span class="line"><span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><p><strong>在/config/下添加redis配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRedis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;heavytiger&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        String name = (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><h3 id="事务的定义"><a href="#事务的定义" class="headerlink" title="事务的定义"></a>事务的定义</h3><p>Redis事务是一个单独的隔离操作，事务中的所有命令都会被序列化按顺序地执行，事务在执行的过程中，不会被其他的客户端发送过来的命令请求所打断</p><p>Redis事务地主要作用就是<strong>串联多个命令</strong>，防止其他的命令在中间插队使得结果出现偏差</p><h3 id="Multi、Exec、Discard"><a href="#Multi、Exec、Discard" class="headerlink" title="Multi、Exec、Discard"></a>Multi、Exec、Discard</h3><p>从输入<code>Multi</code>命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入<code>Exec</code>后，Redis会将之前的命令队列中的命令依次执行。组队的过程中可以通过<code>discard</code>来放弃组队。</p><p><img src="image-20220127164809897.png" alt="image-20220127164809897"></p><p>在输入<code>multi</code>后，事务开启，在中间输入的所有命令都会进入队列中等待，在输入<code>exec</code>执行命令后，所有队列中的命令被依次执行。当组队阶段出现任何问题时，组队都将失败，此时执行<code>exec</code>命令会提示之前存在错误，无法执行。</p><h3 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h3><p>若组队中的某个命令出现了报错，执行时所有队列中的命令都会被取消。</p><p><img src="image-20220127165228796.png" alt="image-20220127165228796"></p><p>若执行阶段时，某个命令才出现报错，那么只有这个报错的命令被取消，其余的所有命令仍会继续执行，不会回滚</p><p><img src="image-20220127165321307.png" alt="image-20220127165321307"></p><h3 id="事务冲突问题"><a href="#事务冲突问题" class="headerlink" title="事务冲突问题"></a>事务冲突问题</h3><p>假设银行卡余额有10000，有三个人同时使用余额交易，分别花了8000，5000，2000，此时如果不加锁机制，则会产生事务冲突，导致某一笔交易出现问题。</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p><strong>悲观锁(<code>Pessimistic Lock</code>)</strong>, 顾名思义，就是很悲观对待每次数据获取，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p><p><img src="image-20220127212236873.png" alt="image-20220127212236873"></p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p><strong>乐观锁(<code>Optimistic Lock</code>)</strong>, 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。<strong>Redis就是利用这种check-and-set机制实现事务的。</strong></p><p><img src="image-20220127212311020.png" alt="image-20220127212311020"></p><h4 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key … ]"></a>WATCH key [key … ]</h4><p>在执行<code>multi</code>之前，先执行<code>WATCH key1 [key2 ... ]</code>，可以监视一个或多个<code>key</code>，如果在事务执行之前，这个或这些<code>key</code>被其他命令所改动，那么该事务会被打断，不予执行。</p><h4 id="UNWATCH-key-key-…"><a href="#UNWATCH-key-key-…" class="headerlink" title="UNWATCH key [key … ]"></a>UNWATCH key [key … ]</h4><p>取消<code>WATCH</code>命令对所有的<code>key</code>的监视</p><p>如果在执行<code>WATCH</code>命令之后，<code>EXEC</code>命令或<code>DISCARD</code>命令被执行的话，就不再需要执行<code>UNWATCH</code>了</p><h3 id="事务的三特性"><a href="#事务的三特性" class="headerlink" title="事务的三特性"></a>事务的三特性</h3><ul><li><p><strong>单独的隔离操作</strong> </p><p>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p></li><li><p><strong>没有隔离级别的概念</strong> </p><p>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p></li><li><p><strong>不保证原子性</strong> </p><p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p></li></ul><h2 id="Redis秒杀案例"><a href="#Redis秒杀案例" class="headerlink" title="Redis秒杀案例"></a>Redis秒杀案例</h2><h3 id="秒杀中存在的问题"><a href="#秒杀中存在的问题" class="headerlink" title="秒杀中存在的问题"></a>秒杀中存在的问题</h3><ol><li>高并发下可能会产生超卖问题，即卖出的商品多于库存</li><li>高并发下可能会产生超时问题，即来不及处理导致连接超时</li><li>使用乐观锁导致很多请求失败，先点击的没有秒杀到商品，后点击的反而抢到了商品，商品库存很多的情况下卖完了仍有库存，但是之前抢失败的用户无法购买了，还剩很多库存。</li></ol><h3 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案"></a>问题解决方案</h3><ol><li>可以使用事务和乐观锁进行处理，可以解决超卖问题，但是仍会存在2，3的问题</li><li>可以加入<code>JedisPool</code>连接池，解决获取连接超时问题</li><li>可以使用<code>LUA</code>脚本解决问题，将复杂或多步的Redis操作改写为一个脚本，一次性提交给Redis执行，减少了反复连接Redis的次数，能提高性能。</li></ol><blockquote><p><strong>Lua</strong>是一个小巧的脚本语言，Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。</p><p>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</p><p>这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</p><p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p><p><strong>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</strong></p><p>利用lua脚本淘汰用户，解决超卖问题。</p><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p></blockquote><h3 id="代码及运行效果"><a href="#代码及运行效果" class="headerlink" title="代码及运行效果"></a>代码及运行效果</h3><p><strong>创建Jedis连接池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JedisPoolUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getJedisPoolInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单例模式创建Redis线程池</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (JedisPoolUtil.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line">                    JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">                    poolConfig.setMaxTotal(<span class="number">200</span>);</span><br><span class="line">                    poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">                    poolConfig.setMaxWaitMillis(<span class="number">100</span> * <span class="number">1000</span>);</span><br><span class="line">                    poolConfig.setBlockWhenExhausted(<span class="keyword">true</span>);</span><br><span class="line">                    poolConfig.setTestOnBorrow(<span class="keyword">true</span>);  <span class="comment">// ping  PONG</span></span><br><span class="line"></span><br><span class="line">                    jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">&quot;121.xxx.xxx.xxx&quot;</span>, <span class="number">6379</span>, <span class="number">60000</span>,</span><br><span class="line">                            <span class="string">&quot;6o5FLS9b..............f56vE1orO&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秒杀service，此方法存在问题3，加乐观锁导致剩库存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Redis实现秒杀场景的数据缓存，减轻频繁访问数据库的压力</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKill_redis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//秒杀过程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line"><span class="keyword">if</span>(uid == <span class="keyword">null</span> || prodid == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 连接redis</span></span><br><span class="line"><span class="comment">//通过连接池得到jedis对象</span></span><br><span class="line">JedisPool jedisPoolInstance = JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">Jedis jedis = jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 拼接key</span></span><br><span class="line"><span class="comment">// 3.1 库存key</span></span><br><span class="line">String kcKey = <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line"><span class="comment">// 3.2 秒杀成功用户key</span></span><br><span class="line">String userKey = <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监视库存，加乐观锁，之后的事务中若版本不一致将提交失败，因此会导致剩库存问题</span></span><br><span class="line">jedis.watch(kcKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 获取库存，如果库存null，秒杀还没有开始</span></span><br><span class="line">String kc = jedis.get(kcKey);</span><br><span class="line"><span class="keyword">if</span>(kc == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀还没有开始，请等待&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 判断用户是否重复秒杀操作</span></span><br><span class="line"><span class="keyword">if</span>(jedis.sismember(userKey, uid)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span></span><br><span class="line"><span class="keyword">if</span>(Integer.parseInt(kc)&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀已经结束了&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7 秒杀过程</span></span><br><span class="line"><span class="comment">//使用事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//组队操作</span></span><br><span class="line">multi.decr(kcKey);</span><br><span class="line">multi.sadd(userKey,uid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(results == <span class="keyword">null</span> || results.size()==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀失败了....&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.1 库存-1</span></span><br><span class="line"><span class="comment">//jedis.decr(kcKey);</span></span><br><span class="line"><span class="comment">//7.2 把秒杀成功用户添加清单里面</span></span><br><span class="line"><span class="comment">//jedis.sadd(userKey,uid);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;秒杀成功了..&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改后使用LUA脚本解决问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKill_redisByScript</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger logger = LoggerFactory.getLogger(SecKill_redisByScript.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String secKillScript = <span class="string">&quot;local userid=KEYS[1];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local prodid=KEYS[2];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local qtkey=&#x27;sk:&#x27;..prodid..\&quot;:qt\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local usersKey=&#x27;sk:&#x27;..prodid..\&quot;:usr\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(userExists)==1 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 2;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(num)&lt;=0 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 0;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;else \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;return 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String secKillScript2 =</span><br><span class="line">            <span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,\&quot;&#123;sk&#125;:0101:usr\&quot;,userid);\r\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; return 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doSecKill</span><span class="params">(String uid, String prodid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JedisPool jedispool = JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">        Jedis jedis = jedispool.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 导入Lua脚本</span></span><br><span class="line">        String sha1 = jedis.scriptLoad(secKillScript);</span><br><span class="line">        <span class="comment">// 运行Lua脚本，提供两个参数，分别为uid和prodid，使用Object接受返回值</span></span><br><span class="line">        Object result = jedis.evalsha(sha1, <span class="number">2</span>, uid, prodid);</span><br><span class="line"></span><br><span class="line">        String reString = String.valueOf(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(reString)) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;已抢空！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(reString)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;抢购成功！！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(reString)) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;该用户已抢过！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;抢购异常！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LUA脚本如下所示</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> userid=KEYS[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">local</span> prodid=KEYS[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">local</span> qtkey=<span class="string">&quot;sk:&quot;</span>..prodid..<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> usersKey=<span class="string">&quot;sk:&quot;</span>..prodid.<span class="string">&quot;:usr&#x27;; </span></span><br><span class="line"><span class="string">local userExists=redis.call(&quot;</span>sismember<span class="string">&quot;,usersKey,userid);</span></span><br><span class="line"><span class="string">if tonumber(userExists)==1 then </span></span><br><span class="line"><span class="string">  return 2;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">local num= redis.call(&quot;</span>get<span class="string">&quot; ,qtkey);</span></span><br><span class="line"><span class="string">if tonumber(num)&lt;=0 then </span></span><br><span class="line"><span class="string">  return 0; </span></span><br><span class="line"><span class="string">else </span></span><br><span class="line"><span class="string">  redis.call(&quot;</span>decr<span class="string">&quot;,qtkey);</span></span><br><span class="line"><span class="string">  redis.call(&quot;</span>sadd<span class="string">&quot;,usersKey,userid);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">return 1;</span></span><br></pre></td></tr></table></figure><p><strong>秒杀操作Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecKillServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String userid = <span class="keyword">new</span> Random().nextInt(<span class="number">50000</span>) +<span class="string">&quot;&quot;</span> ;</span><br><span class="line">String prodid =request.getParameter(<span class="string">&quot;prodid&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isSuccess=SecKill_redis.doSecKill(userid,prodid);</span></span><br><span class="line"><span class="keyword">boolean</span> isSuccess= SecKill_redisByScript.doSecKill(userid,prodid);</span><br><span class="line">response.getWriter().print(isSuccess);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;iPhone <span class="number">13</span> Pro !!!  <span class="number">1</span>元秒杀！！！</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form id=<span class="string">&quot;msform&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/doseckill&quot;</span> enctype=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;prodid&quot;</span> name=<span class="string">&quot;prodid&quot;</span> value=<span class="string">&quot;0101&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span>  id=<span class="string">&quot;miaosha_btn&quot;</span> name=<span class="string">&quot;seckill_btn&quot;</span> value=<span class="string">&quot;秒杀点我&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script  type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/script/jquery/jquery-3.1.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script  type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(<span class="string">&quot;#miaosha_btn&quot;</span>).click(function()&#123; </span><br><span class="line"><span class="keyword">var</span> url=$(<span class="string">&quot;#msform&quot;</span>).attr(<span class="string">&quot;action&quot;</span>);</span><br><span class="line">     $.post(url,$(<span class="string">&quot;#msform&quot;</span>).serialize(),function(data)&#123;</span><br><span class="line">     <span class="keyword">if</span>(data==<span class="string">&quot;false&quot;</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;抢光了&quot;</span> );</span><br><span class="line">    $(<span class="string">&quot;#miaosha_btn&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );    </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>测试结果如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Redis结果显示</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set sk:0101:qt 10</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 10件商品进行抢购</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;sk:0101:usr&quot;</span><br><span class="line">2) &quot;sk:0101:qt&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 抢购后结果如下</span></span><br><span class="line">127.0.0.1:6379&gt; get sk:0101:qt</span><br><span class="line">&quot;0&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS sk:0101:usr</span><br><span class="line"> 1) &quot;2004&quot;</span><br><span class="line"> 2) &quot;12176&quot;</span><br><span class="line"> 3) &quot;15858&quot;</span><br><span class="line"> 4) &quot;21790&quot;</span><br><span class="line"> 5) &quot;24473&quot;</span><br><span class="line"> 6) &quot;25066&quot;</span><br><span class="line"> 7) &quot;26166&quot;</span><br><span class="line"> 8) &quot;32644&quot;</span><br><span class="line"> 9) &quot;37576&quot;</span><br><span class="line">10) &quot;41021&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat服务器输出结果</span></span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">抢购成功！！！！</span><br><span class="line">已抢空！！</span><br><span class="line">已抢空！！</span><br><span class="line">已抢空！！</span><br><span class="line">已抢空！！</span><br><span class="line">已抢空！！</span><br></pre></td></tr></table></figure><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><h4 id="RDB持久化简介"><a href="#RDB持久化简介" class="headerlink" title="RDB持久化简介"></a>RDB持久化简介</h4><p>在<strong>指定的时间间隔内</strong>将内存中的数据集快照写入磁盘，也就是<code>Snapshot快照</code>，<strong>它恢复时是将快照文件直接读到内存里</strong></p><blockquote><p><strong>RDB持久化流程：</strong></p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong>。</p><p><strong>Fork介绍：</strong></p><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了<strong>写时复制技术</strong></li><li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><p><strong>持久化流程图：</strong></p><p><img src="image-20220129164417936.png" alt="image-20220129164417936"></p></blockquote><h4 id="RDB使用方法"><a href="#RDB使用方法" class="headerlink" title="RDB使用方法"></a>RDB使用方法</h4><p><strong>1.配置备份文件名称</strong></p><p>文件名称默认是<code>dump.rdb</code>，若要进行修改，可以去配置文件<code>redis.conf</code>中进行修改<code>dbfilename</code>配置后的属性值</p><p><strong>2.配置rdb文件存放位置</strong></p><p>rdb文件默认为Redis启动时命令行所在的目录下(一般为<code>/usr/local/bin</code>目录)，通过<code>redis.conf</code>的<code>dir</code>配置中的值决定。</p><p><strong>3.保持策略触发快照</strong></p><p>在<code>redis.conf</code>配置文件中存在<code>save 60 10000</code>等参数，默认被注释掉，意思是若在<code>60s</code>之内存在<code>10000</code>次对key的修改，此时将进行快照</p><p>有两种命令也可以直接触发快照，<code>save</code>&amp;<code>bgsave</code>命令，<strong>save只管保存，其它不管，全部阻塞，手动保存，不建议。bgsave会在后台异步进行快照操作，快照同时还可以响应客户端请求。</strong></p><p>执行<code>flushall</code>命令也会产生<code>dump.rdb</code>文件，但是为空无意义，使用<code>lastsave</code>将获取最近的一次成功执行快照的时间。</p><blockquote><p><strong>相关配置：</strong></p><ol><li><code>stop-writes-on-bgsave-error</code> 当Redis无法写入磁盘的话，直接关掉Redis的写操作，默认为yes.</li><li><code>rdbcompression</code> 对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用<code>LZF</code>算法进行压缩，默认为<code>yes</code>。</li><li><code>rdbchecksum</code> 在存储快照后，可以让redis使用<code>CRC64</code>算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能，推荐<code>yes</code></li></ol></blockquote><h4 id="RDB的备份恢复流程"><a href="#RDB的备份恢复流程" class="headerlink" title="RDB的备份恢复流程"></a>RDB的备份恢复流程</h4><p><strong>1.将<code>dump.rdb</code>文件修改名备份到别的目录</strong></p><p>​    <code>cp dump.rdb temp.rdb</code></p><p><strong>2. 关闭Redis(一般要数据恢复的原因也是因为Redis突然挂掉)</strong></p><p><strong>3. 将备份的文件拷贝到工作路径下改回<code>dump.rdb</code>，启动Redis会直接加载备份数据</strong></p><h4 id="RDB的优劣势"><a href="#RDB的优劣势" class="headerlink" title="RDB的优劣势"></a>RDB的优劣势</h4><p><strong>优势</strong></p><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><p><strong>劣势</strong></p><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ul><h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><h4 id="AOF持久化简介"><a href="#AOF持久化简介" class="headerlink" title="AOF持久化简介"></a>AOF持久化简介</h4><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><blockquote><p><strong>AOF持久化流程</strong></p><ol><li>客户端的请求写命令会被append追加到AOF缓冲区内；</li><li>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</li><li>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</li></ol><p><strong>相关问题</strong></p><ol><li>AOF默认不开启，可以在redis.conf中配置文件名称，默认为<code>appendonly.aof</code></li><li>AOF和RDB同时开启，系统默认取AOF的数据（<strong>因为数据不会存在丢失</strong>）</li></ol></blockquote><h4 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h4><ul><li>修改默认的<code>appendonly no</code>，改为<code>yes</code></li><li>如遇到<strong>AOF文件损坏</strong>，通过<code>/usr/local/bin/redis-check-aof--fix appendonly.aof</code>进行恢复</li><li>备份被写坏的AOF文件</li><li>恢复：重启redis，然后重新加载</li></ul><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><ol><li><p>AOF同步频率设置</p><ol><li><p><code>appendfsync always</code></p><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p></li><li><p><code>appendfsync everysec</code></p><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p></li><li><p><code>appendfsync no</code></p><p>redis不主动进行同步，<strong>把同步时机交给操作系统</strong>。</p></li></ol></li><li><p>Rewrite压缩</p><ol><li><p>AOF采用文件追加的方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令<code>bgrewriteaof</code>执行，<strong>原理为：fork出一个新进程重写，只关注最终结果，将冗杂的操作步骤替换成尽可能少的步骤</strong></p></li><li><p>触发条件</p><blockquote><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p><p><code>auto-aof-rewrite-percentage</code>：设置重写的基准值，默认文件增量达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p><p><code>auto-aof-rewrite-min-size</code>：设置重写的基准值，默认最小文件64MB。达到这个值开始重写。</p><p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p><p>IF <code>cur_size &gt;= base_size + base_size * percentage(100%)</code> &amp;&amp; <code>cur_size &gt;= min_size(64MB)</code>的情况下，Redis会对AOF进行重写。</p></blockquote></li><li><p>重写流程</p><blockquote><ol><li><p><code>bgrewriteaof</code>触发重写，判断是否当前有<code>bgsave</code>或<code>bgrewriteaof</code>在运行，如果有，则等待该命令结束后再继续执行。</p></li><li><p>主进程<code>fork</code>出子进程执行重写操作，保证主进程不会阻塞。</p></li><li><p>子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入<code>aof_buf</code>缓冲区和<code>aof_rewrite_buf</code>重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p></li><li><p>子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。</p></li><li><p>主进程把<code>aof_rewrite_buf</code>中的数据写入到新的AOF文件。</p></li><li><p>使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。    </p></li></ol></blockquote></li></ol></li></ol><h4 id="AOF的优劣势"><a href="#AOF的优劣势" class="headerlink" title="AOF的优劣势"></a>AOF的优劣势</h4><p><strong>优势</strong></p><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul><p><strong>劣势</strong></p><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>官方推荐两个都启用。</p><p>如果对数据不敏感，可以选单独用RDB。</p><p>不建议单独用 AOF，因为可能会出现Bug。</p><p>如果只是做纯内存缓存，可以都不用。</p></blockquote><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h3 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h3><p>主机数据更新后根据配置和策略， 自动同步到备机的<code>master/slaver</code>机制，<strong>Master以写为主，Slave以读为主</strong></p><p>这样可以实现读写分离，性能扩展，容灾快速恢复等功能</p><h3 id="搭建主从环境"><a href="#搭建主从环境" class="headerlink" title="搭建主从环境"></a>搭建主从环境</h3><p>由于没有多台云服务器，因此使用一台开多个端口实现主从复制的环境，原理为创建多个配置文件，分别通过这些配置文件开启<code>redis-server</code>，本次环境搭建使用<code>1主2从</code>配置</p><p><strong>配置文件内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以redis6379.conf为例</span> </span><br><span class="line">include /usr/local/dbBackup/redis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">redis6379.conf  redis6380.conf  redis6381.conf  redis.conf</span><br></pre></td></tr></table></figure><p><strong>启动3个服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS redis]# redis-server /usr/local/dbBackup/redis/redis6379.conf</span><br><span class="line">[root@CentOS redis]# redis-server /usr/local/dbBackup/redis/redis6380.conf</span><br><span class="line">[root@CentOS redis]# redis-server /usr/local/dbBackup/redis/redis6381.conf</span><br><span class="line">[root@CentOS redis]# ps -ef | grep redis</span><br><span class="line">root      505404       1  0 22:04 ?        00:00:00 redis-server *:6379</span><br><span class="line">root      505410       1  0 22:04 ?        00:00:00 redis-server *:6380</span><br><span class="line">root      505416       1  0 22:04 ?        00:00:00 redis-server *:6381</span><br><span class="line">root      505422  504948  0 22:04 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p><strong>查看服务运行情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择端口连接服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis-cli -p 6379 -a 6o5FLS..........lyqJWxiEGf56vE1orO</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis-cli -p 6380 -a 6o5FLS..........lyqJWxiEGf56vE1orO</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis-cli -p 6381 -a 6o5FLS..........lyqJWxiEGf56vE1orO</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6379为主服务master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 127.0.0.1:6379&gt; INFO replication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5755185537a056e2924171ae2ef15f3046a51a5b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380为主服务master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 127.0.0.1:6380&gt; INFO replication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:82a18c130081c64623ded446a958e1647fa271e0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381为主服务master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 127.0.0.1:6381&gt; INFO replication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:0a9d18bf383123dc81e23a963796183f62bee05f</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p><strong>配置从机</strong></p><p>若主机设置了密码，需要在从机配置文件中加上<code>masterauth password</code></p><p>从机使用<code>slaveof &lt;ip&gt; &lt;port&gt;</code>连接到主机，也可以直接加入从机配置文件中，启动服务将自动连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379端口主机查看详情，显示有两台从机</span></span><br><span class="line">127.0.0.1:6379&gt; INFO replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=84,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=84,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:121d997c9f2d16b45322f2929e66c68ac404eb5b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:84</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:84</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380端口从机查看详情，连接状态为up</span></span><br><span class="line">127.0.0.1:6380&gt; INFO replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:4</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:56</span><br><span class="line">slave_repl_offset:56</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:121d997c9f2d16b45322f2929e66c68ac404eb5b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:56</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:56</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381端口从机查看详情，连接状态为up</span></span><br><span class="line">127.0.0.1:6381&gt; INFO replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:70</span><br><span class="line">slave_repl_offset:70</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:121d997c9f2d16b45322f2929e66c68ac404eb5b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:70</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:56</span><br></pre></td></tr></table></figure><p><strong>读写分离测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set s1 v1</span><br><span class="line">OK</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 主机写入的数据可以在从机读取</span></span><br><span class="line">127.0.0.1:6380&gt; get s1</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6381&gt; keys *</span><br><span class="line">1) &quot;s1&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从机禁止写入数据</span></span><br><span class="line">127.0.0.1:6381&gt; set k2 v2</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica.</span><br></pre></td></tr></table></figure><p>主机挂掉后直接重启就行，但是从机要重设<code>slaveof</code>，加入到配置文件中将永久生效，不需要多次配置</p><h3 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h3><p>主从复制存在如下问题：</p><ol><li><p><strong>切入点问题</strong> (若<code>master</code>已写入数据，从机<code>slave2</code>挂掉，重连后恢复之前的数据吗？)</p><blockquote><p>能！从机挂掉后，会从头恢复主机中的所有数据</p></blockquote></li><li><p>主机挂掉后，从机上位还是待命等到主机？</p><blockquote><p>等待主机！大哥永远是大哥，从机会等主机 “东山再起”</p><p>从机<code>INFO replication</code>后，<code>master_link_status</code>从<code>up</code>变为<code>down</code>，但是<code>role</code>仍为<code>slave</code>且保留主服务器的连接信息</p><p>主机重启后自动连接从机，宕机期间redis暂时失去写功能，只有读功能</p></blockquote></li></ol><h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><p>一台主机同步2-3台从机可能没有问题，但是从机的数量很多时，将导致同步的开销过大，因此可以类似二叉树的造型来<strong>薪火相传</strong>，从机只找自己的父节点同步数据，这样一台主机只对应两台从机，从机再将数据同步给其他的从机。</p><p><code>slave</code>作为了链条中下一个的<code>master</code>, 可以有效减轻<code>master</code>的写压力,去中心化降低风险。</p><blockquote><p>用 <code>slaveof &lt;ip&gt; &lt;port&gt;</code></p><p>中途变更转向:会清除之前的数据，重新建立拷贝最新的</p><p>风险是一旦某个<code>slave</code>宕机，后面的<code>slave</code>都没法复制</p><p>主机挂了，从机还是从机，可以读，只是无法写数据了</p></blockquote><h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><p>当一个<code>master</code>宕机后，后面的<code>slave</code>可以立刻升为<code>master</code>，其后面的<code>slave</code>不用做任何修改。</p><p>只需要在从机输入命令<code>slaveof no one</code>，将该从机变为主机，其后从机不做修改。</p><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><ol><li><code>Slave</code>启动成功连接到<code>master</code>后会发送一个<code>sync</code>命令，请求主机同步数据</li><li><code>Master</code>接到命令启动后台的存盘进程(<strong>进行持久化存盘为rdb文件</strong>)，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，<code>master</code>将传送整个数据文件(<strong>rdb文件</strong>)到<code>slave</code>，从机执行<code>flushall</code>后恢复rdb文件以完成一次完全同步</li><li><strong>全量复制</strong>：<code>slave</code>服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li><strong>增量复制</strong>：<code>Master</code>继续将新的所有收集到的修改命令依次传给<code>slave</code>,完成同步</li><li><code>slave</code>只要是重新连接<code>master</code>，一次完全同步(全量复制)将被自动执行</li></ol><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>哨兵模式是反客为主的自动升级版，反客为主还需要运维人员手动切换，但是哨兵模式将自动完成主从的切换，在主机挂掉后自动根据投票数指派从机作为主机</p><h4 id="哨兵模式实现"><a href="#哨兵模式实现" class="headerlink" title="哨兵模式实现"></a>哨兵模式实现</h4><p><strong>1.在目录下新建<code>sentinel.conf</code>文件</strong></p><p><code>touch /usr/local/dbBackup/redis/sentinel.conf</code></p><p><strong>2.配置哨兵，填写相关内容</strong></p><p><code>vim /usr/local/dbBackup/redis/sentinel.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 该配置指定哨兵观测本机6379端口，将该主机命名为mymaster，有一个哨兵允许切换后，直接切换主从</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选开启，设为yes后，设置为守护进程，允许在后台运行</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><p><strong>3.启动哨兵</strong></p><p>执行<code>redis-sentinel /usr/local/dbBackup/redis/sentinel.conf --sentinel</code></p><p><strong>4.测试哨兵功能</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将master主机手动挂掉</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待sentinel哨兵做出反应选举出新的主机，哨兵选举新主机如下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 碰到了主机挂掉后无法切换主从的问题，原因是从机也有password，需要在主机配置文件和sentinel中设置密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 主机的redis.conf中也要设置其他从机的密码</span></span><br><span class="line">masterauth password</span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵配置文件中也要设置主从机密码，密码应该保证一致</span></span><br><span class="line">sentinel auth-pass mymaster password</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时，哨兵才知道主机和从机的配置，之前不设置密码是无法连接的</span></span><br><span class="line">506732:X 30 Jan 2022 11:09:05.389 # +monitor master mymaster 127.0.0.1 6379 quorum 1</span><br><span class="line">506732:X 30 Jan 2022 11:09:05.391 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:09:05.394 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时若主机挂掉，从机会自动上位，主机再次连接后，变成从机</span></span><br><span class="line">506732:X 30 Jan 2022 11:11:20.844 # +sdown master mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.844 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.844 # +new-epoch 7</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.844 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.847 # +vote-for-leader 3c577838b1155d034ecafbad3854918cc5473220 7</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.847 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.847 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选举了6380作为此时的主机mymaster</span></span><br><span class="line">506732:X 30 Jan 2022 11:11:20.930 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.930 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:20.982 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:21.632 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:21.632 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:21.694 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:22.677 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:22.677 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:22.735 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line">506732:X 30 Jan 2022 11:11:22.735 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时6379变为从机</span> </span><br><span class="line">506732:X 30 Jan 2022 11:11:22.735 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class="line">506732:X 30 Jan 2022 11:11:22.735 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:17058</span><br><span class="line">slave_repl_offset:17058</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:6e0aa18c6c8ee1750aa8a84acdd23f2ea2876581</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:17058</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15944</span><br><span class="line">repl_backlog_histlen:1115</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时6380成为主机，6379上线后变为从机</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=19228,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6379,state=online,offset=19228,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:6e0aa18c6c8ee1750aa8a84acdd23f2ea2876581</span><br><span class="line">master_replid2:7285213316fc0f8f3c3d66d22fcd8d79e3b33051</span><br><span class="line">master_repl_offset:19228</span><br><span class="line">second_repl_offset:6961</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:19228</span><br></pre></td></tr></table></figure><p><img src="image-20220130111620706.png" alt="image-20220130111620706"></p><blockquote><p><strong>优先级在redis.conf中默认：replica-priority 100，值越小优先级越高</strong></p><p>偏移量是指获得原主机数据最全的</p><p>每个redis实例启动后都会随机生成一个40位的runid</p></blockquote><h4 id="Java连接池修改"><a href="#Java连接池修改" class="headerlink" title="Java连接池修改"></a>Java连接池修改</h4><p>java连接池需要做出相应的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisSentinelPool jedisSentinelPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedisFromSentinel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jedisSentinelPool==<span class="keyword">null</span>)&#123;</span><br><span class="line">    Set&lt;String&gt; sentinelSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    sentinelSet.add(<span class="string">&quot;xxx.xxx.xxx.xxx:26379&quot;</span>);</span><br><span class="line"></span><br><span class="line">    JedisPoolConfig jedisPoolConfig =<span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    jedisPoolConfig.setMaxTotal(<span class="number">10</span>); <span class="comment">// 最大可用连接数</span></span><br><span class="line">jedisPoolConfig.setMaxIdle(<span class="number">5</span>); <span class="comment">// 最大闲置连接数</span></span><br><span class="line">jedisPoolConfig.setMinIdle(<span class="number">5</span>); <span class="comment">// 最小闲置连接数</span></span><br><span class="line">jedisPoolConfig.setBlockWhenExhausted(<span class="keyword">true</span>); <span class="comment">// 连接耗尽是否等待</span></span><br><span class="line">jedisPoolConfig.setMaxWaitMillis(<span class="number">2000</span>); <span class="comment">// 等待时间</span></span><br><span class="line">jedisPoolConfig.setTestOnBorrow(<span class="keyword">true</span>); <span class="comment">// 取连接的时候测试 ping pong</span></span><br><span class="line"><span class="comment">// 从jedis连接池的哨兵监控进程中获取mymaster主从机相关配置</span></span><br><span class="line">jedisSentinelPool=<span class="keyword">new</span> JedisSentinelPool(<span class="string">&quot;mymaster&quot;</span>,sentinelSet,jedisPoolConfig);</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h3 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h3><p>容量不够，redis如何进行扩容？</p><p>并发写操作， redis如何分摊？</p><p>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过<strong>代理主机</strong>来解决，但是redis3.0中提供了解决方案。就是<strong>无中心化集</strong></p><p><strong>群配置</strong>。集群就是用来解决这些而问题的。</p><p><strong>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</strong></p><p>Redis 集群通过分区（<code>partition</code>）来提供一定程度的可用性（<code>availability</code>）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><blockquote><p><code>Cluster</code>模式推荐最少有6个节点。Cluster模式是数据分开存放在不同的节点上，如果有6个节点，通常设置3个主节点，每个主节点有一个从节点作为备份。正常情况下读写操作的是主节点，从节点会同步主节点的更变。当某个主节点挂了之后，其对应的从节点会变成主节点。如果一段时间后之前挂掉的主节点恢复了，它将变成从节点。如果某个主节点挂了之后，其对应的从节点也挂了，集群将不可访问。即每个主节点相互独立，从节点作为主节点的备份。</p></blockquote><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p><strong>1.删除持久化数据</strong></p><p>将路径中的rdb，aof文件全部删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.rdb&quot; | xargs rm -rf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行结果</span></span><br><span class="line">[root@CentOS redis]# find . -name &quot;*.rdb&quot; | xargs rm -rf</span><br><span class="line">[root@CentOS redis]# ls</span><br><span class="line">redis6379.conf  redis6380.conf  redis6381.conf  redis.conf  sentinel.conf</span><br></pre></td></tr></table></figure><p><strong>2.制作六个server实例，分别开放6379，6380，6381，6389，6390，6391端口作为集群</strong></p><p>配置<code>redis cluster</code>，相关参数如下所示：</p><blockquote><p><code>cluster-enabled yes</code>  打开集群模式</p><p><code>cluster-config-file nodes-6379.conf</code> 设定节点配置文件名</p><p><code>cluster-node-timeout 15000</code>  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p></blockquote><p>配置文件如下所示，以<code>6379</code>为例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include /usr/local/dbBackup/redis/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">dir &quot;/usr/local/dbBackup/redis_cluster&quot;</span><br><span class="line">logfile &quot;/usr/local/dbBackup/redis_cluster/redis_err_6379.log&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p>使用<code>sed</code>命令，查找替换其他文本中的内容<code>sed &#39;s/source/target/g&#39; filename</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表示在redis6380.conf文件中全局搜索替换，s表示搜索其后的6379，g表示全局替换为6380</span></span><br><span class="line">[root@CentOS redis]# sed &#x27;s/6379/6380/g&#x27; redis6380.conf </span><br><span class="line">include /usr/local/dbBackup/redis/redis.conf</span><br><span class="line">port 6380</span><br><span class="line">pidfile &quot;/var/run/redis_6380.pid&quot;</span><br><span class="line">dbfilename &quot;dump6380.rdb&quot;</span><br><span class="line">dir &quot;/usr/local/dbBackup/redis_cluster&quot;</span><br><span class="line">logfile &quot;/usr/local/dbBackup/redis_cluster/redis_err_6380.log&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6380.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">[root@CentOS redis]# sed -i &#x27;s/6379/6381/g&#x27; redis6381.conf </span><br><span class="line">[root@CentOS redis]# sed -i &#x27;s/6379/6389/g&#x27; redis6389.conf </span><br><span class="line">[root@CentOS redis]# sed -i &#x27;s/6379/6390/g&#x27; redis6390.conf </span><br><span class="line">[root@CentOS redis]# sed -i &#x27;s/6379/6391/g&#x27; redis6391.conf </span><br></pre></td></tr></table></figure><p>由于设置了密码，因此从机连接到主机时会需要<code>masterauth</code>参数，可以使用如下语句添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通配符查找并将masterauth添加到末尾</span></span><br><span class="line">find . -name &#x27;redis????.conf&#x27; | xargs sed -i &quot;$ a masterauth 6o5FLS9bSJm......6vE1orO&quot;</span><br></pre></td></tr></table></figure><p><strong>3.搭建完成后启动集群(开启6个服务)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS redis]# redis-server redis6379.conf </span><br><span class="line">[root@CentOS redis]# redis-server redis6380.conf </span><br><span class="line">[root@CentOS redis]# redis-server redis6381.conf </span><br><span class="line">[root@CentOS redis]# redis-server redis6389.conf </span><br><span class="line">[root@CentOS redis]# redis-server redis6390.conf </span><br><span class="line">[root@CentOS redis]# redis-server redis6391.conf </span><br><span class="line">[root@CentOS redis]# ps -ef | grep redis</span><br><span class="line">root      509954       1  0 15:06 ?        00:00:00 redis-server *:6379 [cluster]</span><br><span class="line">root      509960       1  0 15:06 ?        00:00:00 redis-server *:6380 [cluster]</span><br><span class="line">root      509966       1  0 15:06 ?        00:00:00 redis-server *:6381 [cluster]</span><br><span class="line">root      509972       1  0 15:07 ?        00:00:00 redis-server *:6389 [cluster]</span><br><span class="line">root      509978       1  0 15:07 ?        00:00:00 redis-server *:6390 [cluster]</span><br><span class="line">root      509984       1  0 15:07 ?        00:00:00 redis-server *:6391 [cluster]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到日志文件，结点文件已经在设定的文件夹下创建成功</span></span><br><span class="line">[root@CentOS dbBackup]# cd redis_cluster/</span><br><span class="line">[root@CentOS redis_cluster]# ls</span><br><span class="line">nodes-6379.conf  nodes-6389.conf  redis_err_6379.log  redis_err_6389.log</span><br><span class="line">nodes-6380.conf  nodes-6390.conf  redis_err_6380.log  redis_err_6390.log</span><br><span class="line">nodes-6381.conf  nodes-6391.conf  redis_err_6381.log  redis_err_6391.log</span><br></pre></td></tr></table></figure><p><strong>4.将六个结点合成一个集群</strong></p><p>首先在组合之前，要确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><p>在上述的<code>ls</code>命令后，可以看到文件均已经正常生成，因此可以合成集群</p><p>在<code>Redis 6</code>中，已经有<code>ruby</code>环境，不需要手动安装，可以直接结合成一个集群</p><p>进入之前安装redis的<code>src</code>目录中，输入命令<code>cd /usr/local/redis/src</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 -a 6o5FLS9bSJmdTGlyqJWxiEGf56vE1orO 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6389 127.0.0.1:6390 127.0.0.1:6391</span><br></pre></td></tr></table></figure><blockquote><p><code>--cluster-replicas 1</code>表示采用最简单的方式配置集群，即一台主机存储数据，一台从机做冗余备份，正好三组，若服务存在密码，需要<code>-a</code>输入密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输入上述命令后集群分配完成</span></span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:6390 to 127.0.0.1:6379</span><br><span class="line">Adding replica 127.0.0.1:6391 to 127.0.0.1:6380</span><br><span class="line">Adding replica 127.0.0.1:6389 to 127.0.0.1:6381</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span></span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: c9f227690a410075699ba85f19df4afe9b9cb1a5 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: beeb9abad9c2b862110a4b4e174f8994b70dc0ce 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 85fed45d7009d92c24d1f718aaab5fa0b14d23ef 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 84f87182c207465adcef4213540836466735b34e 127.0.0.1:6389</span><br><span class="line">   replicates beeb9abad9c2b862110a4b4e174f8994b70dc0ce</span><br><span class="line">S: b490572ff5e41c090c55f6d124dd4dbe7229ef8d 127.0.0.1:6390</span><br><span class="line">   replicates 85fed45d7009d92c24d1f718aaab5fa0b14d23ef</span><br><span class="line">S: b1ac18fcaf0475a004f74138fe141f8a5411a9c9 127.0.0.1:6391</span><br><span class="line">   replicates c9f227690a410075699ba85f19df4afe9b9cb1a5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入yes允许按照上述master &amp; slaver分配</span></span><br><span class="line"></span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span></span><br><span class="line">M: c9f227690a410075699ba85f19df4afe9b9cb1a5 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 84f87182c207465adcef4213540836466735b34e 127.0.0.1:6389</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates beeb9abad9c2b862110a4b4e174f8994b70dc0ce</span><br><span class="line">M: beeb9abad9c2b862110a4b4e174f8994b70dc0ce 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 85fed45d7009d92c24d1f718aaab5fa0b14d23ef 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b490572ff5e41c090c55f6d124dd4dbe7229ef8d 127.0.0.1:6390</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 85fed45d7009d92c24d1f718aaab5fa0b14d23ef</span><br><span class="line">S: b1ac18fcaf0475a004f74138fe141f8a5411a9c9 127.0.0.1:6391</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c9f227690a410075699ba85f19df4afe9b9cb1a5</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p><strong>集群的分配原则应该尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在同一个IP地址上（否则岂不是一台机器宕机，主从全挂了，那从机冗余意义何在？）</strong></p><h3 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h3><p><strong>1.采用集群策略连接到Redis集群</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -a password -p 6379 </span><br></pre></td></tr></table></figure><p><code>-c</code>表示采取集群策略连接，在设置数据后，会自动切换到相应的写主机</p><p>使用<code>cluster nodes</code>命令可以查看集群的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">84f87182c207465adcef4213540836466735b34e 127.0.0.1:6389@16389 slave beeb9abad9c2b862110a4b4e174f8994b70dc0ce 0 1643700901000 2 connected</span><br><span class="line">beeb9abad9c2b862110a4b4e174f8994b70dc0ce 127.0.0.1:6380@16380 master - 0 1643700902089 2 connected 5461-10922</span><br><span class="line">85fed45d7009d92c24d1f718aaab5fa0b14d23ef 127.0.0.1:6381@16381 master - 0 1643700901000 3 connected 10923-16383</span><br><span class="line">c9f227690a410075699ba85f19df4afe9b9cb1a5 127.0.0.1:6379@16379 myself,master - 0 1643700900000 1 connected 0-5460</span><br><span class="line">b490572ff5e41c090c55f6d124dd4dbe7229ef8d 127.0.0.1:6390@16390 slave 85fed45d7009d92c24d1f718aaab5fa0b14d23ef 0 1643700903092 3 connected</span><br><span class="line">b1ac18fcaf0475a004f74138fe141f8a5411a9c9 127.0.0.1:6391@16391 slave c9f227690a410075699ba85f19df4afe9b9cb1a5 0 1643700901087 1 connected</span><br></pre></td></tr></table></figure><p><strong>2.什么是slots？</strong></p><p>一个<code>Redis</code>集群包含<code>16384</code>个插槽(<code>hash slot</code>)，数据库中的每个键都属于这<code>16384</code>个插槽的其中一个， </p><p>集群使用公式 <code>CRC16(key) % 16384</code> 来计算键<code>key</code>属于哪个槽，其中<code>CRC16(key)</code>语句用于计算键<code>key</code>的<code>CRC16</code>校验和。集群中的每个节点负责处理一部分插槽。类似于<code>hash</code>一样，计算hash值进行散列，判断该值应该归哪个主机存储，这样可以做出分布式存储的效果。</p><blockquote><p><strong>举例说明</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">127.0.0.1:6379@16379 myself,master - 0 1643700900000 1 connected 0-5460</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">127.0.0.1:6380@16380 master - 0 1643700902089 2 connected 5461-10922</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">127.0.0.1:6381@16381 master - 0 1643700901000 3 connected 10923-16383</span></span><br></pre></td></tr></table></figure><p>本次集群布置，节点<code>6379</code>负责处理<code>0</code>号至<code>5460</code>号插槽。</p><p>节点<code>6380</code>负责处理<code>5461</code>号至<code>10922</code>号插槽。</p><p>节点<code>6381</code>负责处理<code>10923</code>号至<code>16383</code>号插槽。</p><p><strong>为什么选择<code>mod 16384</code>？</strong></p><p>集群在工作时，会定期发送<code>ping/pong</code>消息交换数据，知道彼此的状态</p><p>传递时肯定会存在消息体消息头等信息</p><p>消息头中最占空间的是<code>unsigned char myslots[CLUSTER_SLOTS/8]</code>，这块类似于<code>bitmap</code>每一个位代表一个槽，该位置为1表示槽属于发送消息的结点。此块存储的信息大小为：<code>16384÷8÷1024=2kb</code></p><p>在消息体中也会携带其他结点的信息用于交换，携带的约为总结点数的1/10，至少3个。</p><p>(1)如果槽位为<code>65536</code>，发送心跳信息的消息头达<code>8k</code>，发送的<code>ping/pong</code>包过于庞大。<br>如上所述，在消息头中，最占空间的是<code>myslots[CLUSTER_SLOTS/8]</code>。当槽位为<code>65536</code>时，这块的大小是:<code>65536÷8÷1024=8kb</code></p><p>(2)redis的集群主节点数量基本不可能超过<code>1000</code>个。<br>如上所述，集群节点越多，心跳包的消息体内携带的数据越多。如果节点过1000个，也会导致网络拥堵。那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。</p><p>(3)槽位越小，节点少的情况下，压缩比高<br>Redis主节点的配置信息中，它所负责的哈希槽是通过一张<code>bitmap</code>的形式来保存的，在传输过程中，会对bitmap进行压缩，但是如果<code>bitmap</code>的填充率<code>slots / N</code>很高的话(N表示节点数)，<code>bitmap</code>的压缩率就很低。</p></blockquote><p><strong>3.相关操作</strong></p><p>不在一个<code>slot</code>下的键，无法使用<code>mget</code>和<code>mset</code>等多键的操作，可以用<code>&#123;name&#125;</code>来定义组的概念，从而使得<code>&#123;name&#125;</code>内值相同的内容的键值对放入一个slot中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MSET age&#123;user&#125; 20 name&#123;user&#125;heavytiger</span><br></pre></td></tr></table></figure><p>可以使用<code>CLUSTER KEYSLOT &lt;name&gt;</code>查找组被放置在哪个插槽中</p><p>可以使用<code>CLUSTER COUNTKEYSINSLOT &lt;slot&gt;</code>查找该插槽中的键的数量，<strong>但是需要保证该插槽在该集群结点被分配的<code>slot</code>范围内，否则查询到的结果为<code>0</code></strong></p><p>可以使用<code>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;</code> 返回<code>count</code>个<code>slot</code>槽中的键。</p><h3 id="集群故障恢复"><a href="#集群故障恢复" class="headerlink" title="集群故障恢复"></a>集群故障恢复</h3><p><strong>1.如果主节点下线，从节点能否自动升级为主节点？</strong></p><p>能！主机恢复后会变为从机，从机自动顶为主节点</p><p><strong>2.主节点恢复后，主从关系会如何？</strong></p><p>主节点回来变为从节点</p><p><strong>3.一段插槽的主从节点全部宕掉，能否继续提供服务？</strong></p><p>看配置，若<code>cluster-require-full-coverage</code>为<code>yes</code>，那么，整个集群都挂掉，若为<code>no</code>，则只挂当前槽位的所有数据和信息</p><h3 id="集群的Jedis开发"><a href="#集群的Jedis开发" class="headerlink" title="集群的Jedis开发"></a>集群的Jedis开发</h3><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p><p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClusterTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">Set&lt;HostAndPort&gt;set =<span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        <span class="comment">// 写任何一个都可以，因为集群在操作时会自动切换</span></span><br><span class="line">set.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.31.211&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">JedisCluster jedisCluster=<span class="keyword">new</span> JedisCluster(set);</span><br><span class="line">jedisCluster.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">System.out.println(jedisCluster.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集群的优缺点"><a href="#集群的优缺点" class="headerlink" title="集群的优缺点"></a>集群的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>多键操作不被支持 </li><li>多键的Redis事务不被支持的。lua脚本不被支持</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li></ul><h2 id="应用问题解决"><a href="#应用问题解决" class="headerlink" title="应用问题解决"></a>应用问题解决</h2><h3 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>键对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如恶意访问一直用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击最终可能压垮数据库。</p><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中的时候被动写的，并且出于容错考虑，如果从存储层数据源查不到数据则不会写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>对空值缓存</strong></p><p>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p><p><strong>设置可访问的名单（白名单）</strong></p><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p><p><strong>采用布隆过滤器</strong></p><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p><p><strong>进行实时监控</strong></p><p>当发现Redis的命中率开始急速降低，需要快速排查访问对象和访问的数据，和运维人员配合，可以实时设置黑名单限制对某一特征的用户服务。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>键对应的数据存在，但在redis中已经过期，此时突然有大量相同的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据源压垮。</p><p>例如某一个key作为热门词经常被搜索，随后其过期了，此时出现了大量同一时刻地对其访问，导致缓存被击穿，后台数据库崩了，详见微博程序猿。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>key可能会在某些时间点被超高并发地访问，是一种非常<strong>热点</strong>的数据。</p><ol><li><p><strong>预先设置热门数据</strong>：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的过期时长</p></li><li><p><strong>实时调整</strong>：现场监控哪些数据热门，动态实时地调整key的过期时长</p></li><li><p><strong>使用锁</strong>：</p><ol><li><p>就是在缓存失效的时候（判断拿出来的值为空），不是立即去<code>load db</code>。</p></li><li><p>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</p></li><li><p>当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</p></li><li><p>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</p></li></ol><p><img src="image-20220201214014677.png" alt="image-20220201214014677"></p></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>缓存雪崩和缓存击穿类似，与之不同的是这个的规模更大，若有很多键同时失效，导致同一时间有大量的请求打到后端DB中，大并发会瞬间键DB压垮，缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>构建多级缓存架构：</strong></p><p>nginx缓存 + redis缓存 + 其他缓存（ehcache等）</p><p><strong>使用锁或队列：</strong></p><p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。<strong>不适用高并发情况</strong></p><p><strong>设置过期标志更新缓存：</strong></p><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p><p><strong>将缓存失效时间分散开：</strong></p><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>在单机部署时，很多锁可以用来解决多线程问题，但是现在的业务发展逐渐变大变广，导致单机无法完成高并发下的要求，因此演化出了分布式集群系统，由于分布式的系统多线程，多进程分布在不同的机器上，这将会导致宕机部署情况下的并发控制锁策略师兄啊，单纯的JavaAPI不能提供分布式锁的能力，因此为了解决这个问题，需要一种能够跨越JVM的互锁机制来控制共享资源的访问，避免出现并发时出现错误。</p><p>主流的分布式锁主流实现方式有：1. 基于数据库实现的分布式锁；2. 基于缓存实现分布式锁；3. 基于Zookeeper实现</p><p>使用redis能够获得最高的性能，使用zookeeper能够获得最高的可用性</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>使用Redis实现分布式锁</strong></p><p>实现分布式锁需要具备以下条件：</p><ul><li>互斥性：在任意一个时刻，只有一个客户端持有锁。</li><li>无死锁：即便持有锁的客户端崩溃或者其他意外事件，锁仍然可以被获取。</li><li>容错：只要大部分Redis节点都活着，客户端就可以获取和释放锁。</li></ul><p>Redis可以完美实现上述需求，互斥性可以通过<code>SETNX</code>操作来实现，设置成功时返回1，表示持有锁，若已经存在<code>key</code>时，表示其他的线程正在持有锁，应该禁止访问资源，待到其他线程访问资源完毕时，则可以删除<code>key</code>释放锁；无死锁可以通过设置键的过期时间来保证，例如<code>set lock ex 5 nx</code>，在5秒后无论出现任何情况，锁都会被释放，其他进程此时访问时仍能获取锁；容错是因为Redis通过集群哨兵等容错机制保证了效率以及可用性。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testLock&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取锁，set lock ex 3 nx，3s后自动过期保证不出现死锁</span></span><br><span class="line">    Boolean lock = redisTemplate.opsForValue()</span><br><span class="line">        .setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 2. 若获取锁成功、查询num的值；否则过0.1s继续尝试获取锁</span></span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        Object value = redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.1. 判断num为空return</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(value))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2. 有值就转成成int</span></span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(value+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.3. 把redis的num加1</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>, ++num);</span><br><span class="line">        <span class="comment">// 2.4. 释放锁，del lock</span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 3. 获取锁失败、每隔0.1秒再获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            testLock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但是这样做仍然存在问题！</strong></p><p>若一个业务需要<code>4s</code>执行，一开始<code>request1</code>请求控制器，获取锁后业务还没有完成，到了设定<code>lock</code>时设置的<code>3s</code>时，<code>lock</code>被<code>Redis</code>过期自动释放，此时<code>request2</code>成功获取到了锁<code>lock</code>，却在其运行的第一秒被完成的<code>request1</code>业务给释放掉。最终等于没有上锁，因为自己业务的锁被其他先前业务释放掉了。</p><blockquote><p><strong>解决方案：</strong>可以在存入<code>lock</code>时<code>value</code>存入一个<code>uuid</code>，在最后释放锁时先获取锁，判断值是否与之前的<code>uuid</code>相等，若相等释放值，若不相等则不释放，因为此时已经是其他进程获取到的锁。</p></blockquote><p><strong>但是这样做又引入了新的问题！</strong></p><p>删除释放锁操作缺乏原子性：原因是若获取<code>lock</code>中的<code>uuid</code>确实与之前存放的<code>uuid</code>一致，但是还没删除就已经过期了，此时则可能又将新的进程已经获取到的锁删除了，导致出现资源抢占问题</p><blockquote><p><strong>解决方案：</strong>使用LUA脚本保证删除的原子性</p><p>LUA脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> </span><br><span class="line">   <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>]) </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.yiibai.com/redis">Redis教程™ (yiibai.com)</a></p><p>[2] <a href="https://www.bilibili.com/video/BV1Rv41177Af">【尚硅谷】Redis 6 入门到精通 超详细 教程_哔哩哔哩_bilibili</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot核心功能</title>
      <link href="/articles/SpringBoot%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/"/>
      <url>/articles/SpringBoot%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>SpringBoot的核心功能包括，配置文件、web开发、数据访问、单元测试、指标监控等，本文记录SpringBoot核心功能的相关学习过程。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>Java中常见的配置文件，基本格式如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line"><span class="attr">str</span> = <span class="string">helloworld</span></span><br><span class="line"><span class="comment">#以下为服务器、数据库信息</span></span><br><span class="line"><span class="attr">dbPort</span> = <span class="string">localhost</span></span><br><span class="line"><span class="attr">databaseName</span> = <span class="string">mydb</span></span><br><span class="line"><span class="attr">dbUserName</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">dbPassword</span> = <span class="string">123456</span></span><br><span class="line"><span class="comment">#以下为数据库表信息</span></span><br><span class="line"><span class="attr">dbTable</span> = <span class="string">mytable</span></span><br><span class="line"><span class="comment">#以下为服务器信息</span></span><br><span class="line"><span class="attr">ip</span> = <span class="string">192.168.0.9</span></span><br></pre></td></tr></table></figure><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>YAML 是 “YAML Ain’t Markup Language”（YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p><strong>非常适合用来做以数据为中心的配置文件</strong></p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p>key: value；kv之间有空格</p></li><li><p>大小写敏感</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用tab，只允许空格</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p></li><li><p>‘#’表示注释</p></li><li><p><strong>字符串无需加引号，如果要加，’’ 与 “” 表示字符串内容会被 转义 / 不转义</strong> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加上单引号会输出\n不换行，而字符串中有转义字符本身应该被换行，</span></span><br><span class="line"><span class="comment"># 说明单引号再次转义了，抑制了其中的转义字符</span></span><br><span class="line"><span class="attr">key1:</span> <span class="string">&#x27;hello \n tom&#x27;</span></span><br><span class="line"><span class="comment"># 加上双引号会换行，说明其中的转义字符没有被抑制</span></span><br><span class="line"><span class="attr">key2:</span> <span class="string">&quot;hello \n tom&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key1:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">key2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">key3:</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="attr">key4:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">key5:</span> <span class="number">2022</span><span class="string">/1/13</span> <span class="number">09</span><span class="string">:25:21</span></span><br></pre></td></tr></table></figure><ul><li>对象：键值对的集合，例如：map、hash、set、object等</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="string">key1：&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="string">v2,</span> <span class="attr">k3:</span> <span class="string">v3&#125;</span></span><br><span class="line"><span class="comment"># 多行写法</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>配置一个person对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> Boolean boss;</span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Pet pet;</span><br><span class="line"><span class="keyword">private</span> String[] interests;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line"><span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yaml文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml表示以上对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dog</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;,&#123;<span class="attr">name:</span> <span class="string">tiger</span>, <span class="attr">weight:</span> <span class="number">180</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="配置提示"><a href="#配置提示" class="headerlink" title="配置提示"></a>配置提示</h3><p>自定义的类和配置文件在配置文件绑定时一般没有提示，加入依赖即可进行提示</p><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>        </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--打包时排除配置提示插件，否则将没有必要地占用不少资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h3 id="SpringMVC自动配置概览"><a href="#SpringMVC自动配置概览" class="headerlink" title="SpringMVC自动配置概览"></a>SpringMVC自动配置概览</h3><blockquote><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p></li><li><ul><li>内容协商视图解析器和BeanName视图解析器</li></ul></li><li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p></li><li><ul><li>静态资源（包括webjars）</li></ul></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p></li><li><ul><li>自动注册 <code>Converter，GenericConverter，Formatter </code></li></ul></li><li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p></li><li><ul><li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p></li><li><ul><li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li></ul></li><li><p>Static <code>index.html</code> support.</p></li><li><ul><li>静态index.html 页支持</li></ul></li><li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p></li><li><ul><li>自定义 <code>Favicon</code>  </li></ul></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p></li><li><ul><li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li></ul></li></ul></blockquote><h3 id="简单功能分析"><a href="#简单功能分析" class="headerlink" title="简单功能分析"></a>简单功能分析</h3><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><p>默认的情况下，只需要静态资源放在类路径下，就可以通过资源名访问到静态资源： </p><ul><li><code>/static</code> </li><li><code>/public</code> </li><li><code>/resources</code></li><li><code>/META-INF/resources</code></li></ul><p>访问 ： 当前项目根路径/ + 静态资源名 如：<code>http://localhost:8080/hello.jpg</code></p><p>原理： 静态映射/**。</p><p><strong>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</strong></p><h4 id="改变默认的静态资源路径"><a href="#改变默认的静态资源路径" class="headerlink" title="改变默认的静态资源路径"></a>改变默认的静态资源路径</h4><p>默认的静态资源访问是无前缀的，但此时若需要做拦截，与静态资源合理地做区分，而不影响效率，可以将静态资源的前缀进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示所有的静态资源都以以下前缀为准进行访问</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示此时静态资源只允许放到/haha/文件夹下才能被访问</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><h4 id="前后端不分离访问jquery"><a href="#前后端不分离访问jquery" class="headerlink" title="前后端不分离访问jquery"></a>前后端不分离访问jquery</h4><p>自动映射 <code>/webjars/**</code></p><p>网址：<a href="https://www.webjars.org/">https://www.webjars.org/</a></p><p>需要在<code>pom.xml</code>中引入相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a> 后面地址要按照依赖里面的包路径</p><h4 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h4><ul><li><p>第一种方式：静态资源路径下  index.html</p></li><li><ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><ul><li>第二种方式：存在controller能处理/index请求</li></ul><h4 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h4><p>将<code>favicon.ico</code>放入到静态资源目录下即可使网站的图标被替换</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure><h3 id="请求参数的处理"><a href="#请求参数的处理" class="headerlink" title="请求参数的处理"></a>请求参数的处理</h3><h4 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h4><h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><p><code>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</code></p><p>使用样例如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="comment">//2、SpringBoot默认是禁用了矩阵变量的功能</span></span><br><span class="line">    <span class="comment">//      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span></span><br><span class="line">    <span class="comment">//              removeSemicolonContent（移除分号内容）支持矩阵变量的</span></span><br><span class="line">    <span class="comment">//3、矩阵变量必须有url路径变量才能被解析</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h5><p><code>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</code></p><p><strong>ServletRequestMethodArgumentResolver以上的部分参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line"><span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">(pushBuilder != <span class="keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">Principal.class.isAssignableFrom(paramType) ||</span><br><span class="line">InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">HttpMethod.class == paramType ||</span><br><span class="line">Locale.class == paramType ||</span><br><span class="line">TimeZone.class == paramType ||</span><br><span class="line">ZoneId.class == paramType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h5><p>Map、Model（map、model里面的数据会被放在request的请求域  request.setAttribute）、Errors/BindingResult、RedirectAttributes（ 重定向携带数据）、ServletResponse（response）、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p><p><strong>使用map，model，request作为Controller的参数，向其中放置数据等于向requestScope中放数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map,  Model model, HttpServletRequest request; <span class="comment">//通过这些都可以给request域中放数据</span></span><br><span class="line">request.getAttribute();</span><br></pre></td></tr></table></figure><p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel（）；得到 —&gt; BindingAwareModelMap 是Model 也是Map </p><p>mavContainer.getModel(); 获取到值</p><h5 id="自定义对象参数"><a href="#自定义对象参数" class="headerlink" title="自定义对象参数"></a>自定义对象参数</h5><p>可以自动类型转换与格式化，可以级联封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据响应与内容协商"><a href="#数据响应与内容协商" class="headerlink" title="数据响应与内容协商"></a>数据响应与内容协商</h3><h4 id="数据响应JSON"><a href="#数据响应JSON" class="headerlink" title="数据响应JSON"></a>数据响应JSON</h4><p>JSON数据响应使用<code>jackson.jar + @ResponseBody</code>实现功能</p><p>首先需要引用依赖<code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--web场景自动引入了json场景--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给前端自动返回JSON数据的原理如下：</p><p><strong>1. 首先在15个返回值解析器中寻找目标类型所需的解析器</strong></p><p><strong>2. 通过MessageConverter将对象转换为前端需要的内容</strong></p><blockquote><p><strong>其原理如下所示:</strong></p><ol><li>返回值处理器判断是否支持这种类型返回值<code>supportsReturnType</code></li><li>返回值处理器调用<code>handleReturnValue </code>进行处理</li><li><code>RequestResponseBodyMethodProcessor </code>解析器可以处理返回值标记了<code>@ResponseBody</code>注解的。<ol><li>利用<code>MessageConverters</code>进行处理将数据重新写为<code>json</code>格式<ol><li>内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li><li>服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</li><li>SpringMVC会挨个遍历所有容器底层的 <code>HttpMessageConverter </code>，看谁能处理？<ol><li>得到<code>MappingJackson2HttpMessageConverter</code>可以将对象写为<code>json</code></li><li>利用<code>MappingJackson2HttpMessageConverter</code>将对象转为<code>json</code>再写出去。</li></ol></li></ol></li></ol></li></ol></blockquote><p>支持的返回值解析器有如下几种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line"><span class="comment"># 有 @ModelAttribute 且为对象类型的</span></span><br><span class="line">RequestResponseBodyMethodProcessor；<span class="comment"># 有@ResponseBody注解，通过该解析器解析成</span></span><br></pre></td></tr></table></figure><p>支持的转换器类型有如下几种:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0 ByteArrayHttpMessageConverter - 只支持Byte类型的</span><br><span class="line">1 StringHttpMessageConverter - String</span><br><span class="line">2 ResourceHttpMessageConverter - Resource</span><br><span class="line">3 ResourceRegionHttpMessageConverter - ResourceRegion</span><br><span class="line">4 SourceHttpMessageConverter - DOMSource.class \ SAXSource.class) \ StAXSource.class \StreamSource.class \Source.class</span><br><span class="line">5 AllEncompassingFormHttpMessageConverter - MultiValueMap</span><br><span class="line">6 MappingJackson2HttpMessageConverter - 将对象转换为json类型</span><br><span class="line">7 Jaxb2RootElementHttpMessaaeConverter - 支持注解方式xml处理的。</span><br></pre></td></tr></table></figure><h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><h5 id="引入xml依赖"><a href="#引入xml依赖" class="headerlink" title="引入xml依赖"></a>引入xml依赖</h5><p>引入xml依赖后，服务端允许按照xml回传数据，因为json和xml的依赖不同，因此需要导入xml依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="apifox测试返回json和xml数据"><a href="#apifox测试返回json和xml数据" class="headerlink" title="apifox测试返回json和xml数据"></a>apifox测试返回json和xml数据</h5><p>比如电脑端浏览器访问后端接口时只能处理xml数据，而手机app访问时只能处理json数据，应该如何写后端接口，保证前端能够获取所需的数据呢？</p><p>其实并不需要人为进行判断，spring可以解析http请求头中的<code>Accept</code>字段，该字段是Http协议中规定的，用于告诉服务器发起请求的客户端能够接收处理的数据类型，因此需要返回<code>json</code>或者<code>xml</code>格式，只需要在<code>Accept</code>中进行设定即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认Accept如下：</span></span><br><span class="line">Accept ：*/*</span><br><span class="line"><span class="comment"># 获取json</span></span><br><span class="line">Accept ：application/json</span><br><span class="line"><span class="comment"># 获取xml</span></span><br><span class="line">Accept ：application/xml</span><br></pre></td></tr></table></figure><h5 id="开启浏览器使用参数内容进行返回值协商的功能"><a href="#开启浏览器使用参数内容进行返回值协商的功能" class="headerlink" title="开启浏览器使用参数内容进行返回值协商的功能"></a>开启浏览器使用参数内容进行返回值协商的功能</h5><p>如果使用浏览器直接发送请求，除非使用<code>Ajax</code>，否则可能没有办法指定可以接收的类型，会按照顺序使用靠前的格式响应：</p><p><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</code></p><p>因此可以开启返回值协商功能，达到相应的目的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span>  <span class="comment">#开启请求参数内容协商模式</span></span><br></pre></td></tr></table></figure><p>客户端通过参数协商获取json格式数据：</p><p><code>http://localhost:8080/test/person?format=json</code></p><p>客户端通过参数协商获取xml格式数据：</p><p><code>http://localhost:8080/test/person?format=xml</code></p><h5 id="内容协商的原理"><a href="#内容协商的原理" class="headerlink" title="内容协商的原理"></a>内容协商的原理</h5><p>1、判断当前响应头中是否已经有确定的媒体类型（MediaType）。</p><p>2、获取客户端（PostMan、浏览器、app）支持接收的内容类型。（获取客户端Accept请求头字段）**[application/xml]**</p><p>3、遍历循环所有当前系统的 <code>MessageConverter</code>，看谁支持操作这个对象（Person）</p><p>4、找到支持操作<code>Person</code>类型的<code>converter</code>，把<code>converter</code>支持的媒体类型统计出来。</p><p>5、找到客户端所需的**[application/xml]**返回类型，进行内容协商，匹配最佳的媒体类型。</p><p>6、使用获取的支持将对象转换为最佳的匹配媒体类型的<code>converter</code>转换器，调用其进行相应的转化。</p><h3 id="视图解析与模板引擎"><a href="#视图解析与模板引擎" class="headerlink" title="视图解析与模板引擎"></a>视图解析与模板引擎</h3><p>视图解析：<strong>SpringBoot默认不支持<code>JSP</code>，因此需要引入第三方模板引擎技术实现页面渲染</strong></p><blockquote><p><strong>视图解析的处理方式有以下几种：</strong></p><ol><li>转发</li><li>重定向</li><li>自定义视图</li></ol></blockquote><h4 id="模板引擎-Thymeleaf介绍"><a href="#模板引擎-Thymeleaf介绍" class="headerlink" title="模板引擎-Thymeleaf介绍"></a>模板引擎-Thymeleaf介绍</h4><p><strong>Thymeleaf是现代化，服务端的java模板引擎</strong></p><p>Thymeleaf文档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes">Tutorial: Using Thymeleaf</a></p><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td>生成链接，自动拼接项目的路径</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><h5 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h5><p>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></p><p>空值: <strong>null</strong></p><p>变量： one，two，…. 变量中不能出现空格</p><h5 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h5><p>字符串拼接: <strong>+</strong></p><p>变量替换: <strong>|The name is ${name}|</strong> </p><h5 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h5><p>运算符: + , - , * , / , %</p><h5 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h5><p>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></p><p>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </p><h5 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h5><p>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> **)**等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </p><h5 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h5><p>If-then: <strong>(if) ? (then)</strong></p><p>If-then-else: <strong>(if) ? (then) : (else)</strong></p><p>Default: (value) <strong>?: (defaultvalue)</strong> </p><h5 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h5><p>无操作： _</p><h5 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值 th:attr"></a>设置属性值 th:attr</h5><p><strong>设置单个值：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;subscribe.html&quot;</span> <span class="attr">th:attr</span>=<span class="string">&quot;action=@&#123;/subscribe&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Subscribe!&quot;</span> <span class="attr">th:attr</span>=<span class="string">&quot;value=#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设置多个值：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../images/gtvglogo.png&quot;</span>  <span class="attr">th:attr</span>=<span class="string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>替代写法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Subscribe!&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;subscribe.html&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--类似于foreach循环遍历--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod,iterStat : $&#123;prods&#125;&quot;</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;iterStat.odd&#125;? &#x27;odd&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;comments.html&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h5><p><img src="image-20220117140121149.png" alt="image-20220117140121149"></p><h4 id="thymeleaf的使用"><a href="#thymeleaf的使用" class="headerlink" title="thymeleaf的使用"></a>thymeleaf的使用</h4><h5 id="引入Starter"><a href="#引入Starter" class="headerlink" title="引入Starter"></a>引入Starter</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、所有thymeleaf的配置值都在 <code>ThymeleafProperties</code></p><p>2、配置好了 <code>SpringTemplateEngine</code> </p><p>3、配好了 <code>ThymeleafViewResolver</code> </p><p>4、我们只需要直接开发页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已经自动配置好了，只需要直接开发即可</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀后缀已经被指定好了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;  <span class="comment">//xxx.html</span></span><br></pre></td></tr></table></figure><h5 id="页面开发"><a href="#页面开发" class="headerlink" title="页面开发"></a>页面开发</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>你好哇！Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heavytiger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/heavytiger&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">heavytiger</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;来自后端的你好！&quot;</span>);</span><br><span class="line">        <span class="comment">// 只需要写名称即可，已经自动配置好视图解析器了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若直接访问该页面，即没有后台传值，会正常显示标签内的数据：</p><p><img src="image-20220117141914389.png" alt="image-20220117141914389"></p><p>若后台开启，通过<code>controller</code>进行访问，得到的即是<code>requestScope</code>中的值</p><p><img src="image-20220117211839008.png" alt="image-20220117211839008"></p><p>可以看到此时标签内的值已经被后端传递的<code>$&#123;msg&#125;</code>覆盖</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="HandlerInterceptor接口"><a href="#HandlerInterceptor接口" class="headerlink" title="HandlerInterceptor接口"></a>HandlerInterceptor接口</h4><p>拦截器需要继承<code>HandlerInterceptor</code>接口即可运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录检查</span></span><br><span class="line"><span class="comment"> * 1、配置好拦截器要拦截哪些请求</span></span><br><span class="line"><span class="comment"> * 2、把这些配置放在容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line"><span class="comment">//        re.sendRedirect(&quot;/&quot;);</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><p>所有的web相关的配置文件都继承<code>WebMvcConfigurer</code>接口即可</p><p>继承<code>WebMvcConfigurer</code>接口的<code>addInterceptors</code>方法，通过该方法的参数<code>InterceptorRegistry</code>注册拦截器的相关参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、编写一个拦截器实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span></span><br><span class="line"><span class="comment"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>); <span class="comment">//放行的请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拦截器的原理"><a href="#拦截器的原理" class="headerlink" title="拦截器的原理"></a>拦截器的原理</h4><p>1、根据当前请求，找到<code>HandlerExecutionChain</code>【可以处理请求的handler以及handler的所有拦截器】</p><p>2、先来顺序执行所有拦截器的<code>preHandle</code>方法</p><p>​    1、如果当前拦截器<code>prehandler</code>返回为<code>true</code>。则执行下一个拦截器的<code>preHandle</code></p><p>​    2、如果当前拦截器返回为<code>false</code>。直接倒序执行所有已经执行了的拦截器的<code>afterCompletion</code>；</p><p>3、如果任何一个拦截器返回<code>false</code>。直接跳出不执行目标方法</p><p>4、所有拦截器都返回<code>True</code>。执行目标方法</p><p>5、倒序执行所有拦截器的<code>postHandle</code>方法。</p><p>6、前面的步骤有任何异常都会直接倒序触发<code>afterCompletion</code></p><p>7、页面成功渲染完成以后，也会倒序触发<code>afterCompletion</code></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="页面表单"><a href="#页面表单" class="headerlink" title="页面表单"></a>页面表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传单一文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InputOneFile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传多文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InputFiles&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件上传Controller代码"><a href="#文件上传Controller代码" class="headerlink" title="文件上传Controller代码"></a>文件上传Controller代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * MultipartFile 自动封装上传过来的文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> headerImg</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> photos</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@RequestPart(&quot;files&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;上传的信息：headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,</span><br><span class="line">               headerImg.getSize(), photos.length);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!headerImg.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//保存到文件服务器，OSS服务器</span></span><br><span class="line">           String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">           headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(photos.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">               <span class="keyword">if</span>(!photo.isEmpty())&#123;</span><br><span class="line">                   String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                   photo.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传自动配置原理"><a href="#文件上传自动配置原理" class="headerlink" title="文件上传自动配置原理"></a>文件上传自动配置原理</h4><p>文件上传自动配置类-<code>MultipartAutoConfiguration</code>-<code>MultipartProperties</code></p><ul><li><p>自动配置好了<code>StandardServletMultipartResolver</code>【文件上传解析器】</p></li><li><p>原理步骤</p></li><li><ul><li>1、请求进来使用文件上传解析器判断（<code>isMultipart</code>）并封装（<code>resolveMultipart</code>，返回<code>MultipartHttpServletRequest</code>）文件上传请求</li><li>2、参数解析器来解析请求中的文件内容封装成<code>MultipartFile</code></li></ul></li><li><ul><li>3、将<code>request</code>中文件信息封装为一个Map；<code>MultiValueMap&lt;String, MultipartFile&gt;</code></li></ul></li></ul><p><code>FileCopyUtils</code>。实现文件流的拷贝</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h4><ul><li><p>默认的情况下，<code>Spring Boot</code>提供<code>/error</code>处理所有错误的映射</p></li><li><p>对于机器客户端，它将生成<code>JSON</code>响应，<strong>其中包含错误，HTTP状态和异常消息的详细信息</strong>。对于浏览器客户端，响应一个<code>whitelabel</code>错误视图，以HTML格式呈现相同的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json响应</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;xxxxxxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Not Found&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;No xxxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/api/xxxx&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="替换错误页面"><a href="#替换错误页面" class="headerlink" title="替换错误页面"></a>替换错误页面</h4><p>可以在<code>templates/error</code>文件夹下放置需要相应的页面，将会自动替换SpringBoot的白页报错，例如<code>templates/error/4xx.html</code>，<code>templates/error/500.html</code></p><p><strong>其逻辑如下：</strong></p><ol><li><p>error/404.html   error/5xx.html；</p></li><li><p>有精确的错误状态码页面就匹配精确，没有就找 4xx.html；</p></li><li><p>如果都没有就触发白页</p></li></ol><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="SQL数据库"><a href="#SQL数据库" class="headerlink" title="SQL数据库"></a>SQL数据库</h3><h4 id="数据源自动配置"><a href="#数据源自动配置" class="headerlink" title="数据源自动配置"></a>数据源自动配置</h4><p>使用<strong>HikariDataSource</strong>进行数据源的自动配置</p><p><strong>首先要导入JDBC场景：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会引入以下依赖：</p><ul><li>HikanCP 数据源</li><li>spring-jdbc jdbc驱动</li><li>spring-tx 事务支持</li></ul><p>我们会发现官方没有导入数据库驱动，原因是spring不知道开发人员会使用什么驱动，因此不导入，需要自己导入</p><p><strong>导入数据库驱动：</strong></p><p>默认版本是: <code>&lt;mysql.version&gt;8.0.22&lt;/mysql.version&gt;</code></p><p>数据库的版本需要和驱动版本对应</p><p>两种方法可以解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1. 直接在依赖中修改，maven会进行仲裁，就近依赖原则，不选择patter中的版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. 修改properties属性，在其中标明版本号，属性就近优先原则--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用Druid数据源"><a href="#使用Druid数据源" class="headerlink" title="使用Druid数据源"></a>使用Druid数据源</h4><p><strong>导入依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建数据源配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxOpenPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@ConditionalOnMissingBean(DataSource.class) 的含义是：当容器中没有 DataSource（数据源类）时，Spring Boot 才会使用 HikariCP 作为其默认数据源。 也就是说，若我们向容器中添加 Druid 数据源类（DruidDataSource，继承自 DataSource）的对象时，Spring Boot 就会使用 Druid 作为其数据源，而不再使用 HikariCP。</p><p>例如，我们需要在config包中创建一个<code>MyDataSourceConfig</code>的配置类，并将 Druid 数据源对象添加到容器中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当向容器中添加了 Druid 数据源</span></span><br><span class="line"><span class="comment">   * 使用 <span class="doctag">@ConfigurationProperties</span> 将配置文件中 spring.datasource 开头的配置与数据源中的属性进行绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//我们一般不建议将数据源属性硬编码到代码中，而应该在配置文件中进行配置（@ConfigurationProperties 绑定）</span></span><br><span class="line"><span class="comment">//        druidDataSource.setUrl(&quot;jdbc:mysql://127.0.0.1:3306/jdbc&quot;);</span></span><br><span class="line"><span class="comment">//        druidDataSource.setUsername(&quot;root&quot;);</span></span><br><span class="line"><span class="comment">//        druidDataSource.setPassword(&quot;root&quot;);</span></span><br><span class="line"><span class="comment">//        druidDataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件 application.yml 中添加以下数据源配置，它们会与与 Druid 数据源中的属性进行绑定:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据源连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>至此，我们就已经将数据源从 HikariCP 切换到了 Druid 了。</p><h4 id="通过starter整合Druid"><a href="#通过starter整合Druid" class="headerlink" title="通过starter整合Druid"></a>通过starter整合Druid</h4><p>Druid 可以说是国内使用最广泛的数据源连接池产品，但到目前为止 Spring Boot 官方只对 Hikari、Tomcat、Dbcp2 和 OracleUcp 等 4 种数据源产品提供了自动配置支持，对于其他的数据源连接池产品（包括 Druid），则并没有提供自动配置支持。这就导致用户只能通过自定义的方式整合 Druid，非常繁琐。</p><p>为了解决这一问题，于是阿里官方提供了 <a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">Druid Spring Boot Starter</a>，它可以帮助我们在 Spring Boot 项目中，轻松地整合 Druid 的数据库连接池和监控功能。</p><p><strong>引入依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加 druid 的 starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置属性：</strong></p><p>在 Spring Boot 配置文件中配置以下内容：</p><ul><li>JDBC 通用配置</li><li>Druid 数据源连接池配置</li><li>Druid 监控配置</li><li>Druid 内置 Filter 配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################### JDBC 通用配置  ####################</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>                                                                   <span class="comment">#数据库登陆用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>                                                                   <span class="comment">#数据库登陆密码</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jdbc</span>                                            <span class="comment">#数据库url</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>                                      <span class="comment">#数据库驱动</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">##################### Druid连接池的配置 ##################</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span>                                                                 <span class="comment">#初始化连接大小</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span>                                                                     <span class="comment">#最小连接池数量</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span>                                                                  <span class="comment">#最大连接池数量</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span>                                                                 <span class="comment">#获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span>                                        <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span>                                          <span class="comment">#配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span>                                            <span class="comment">#测试连接</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span>                                                           <span class="comment">#申请连接的时候检测，建议配置为true，不影响性能，并且保证安全性</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span>                                                           <span class="comment">#获取连接时执行检测，建议关闭，影响性能</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span>                                                           <span class="comment">#归还连接时执行检测，建议关闭，影响性能</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">false</span>                                                 <span class="comment">#是否开启PSCache，PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span>                             <span class="comment">#开启poolPreparedStatements后生效</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>                                                              <span class="comment">#配置扩展插件，常用的插件有=&gt;stat:监控统计  wall:防御sql注入</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">&#x27;druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000&#x27;</span> <span class="comment">#通过connectProperties属性来打开mergeSql功能;慢SQL记录</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">###################### Druid 监控配置信息  ##################</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>                                                                 <span class="comment">#是否开启内置监控页面，默认值为 false</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">&#x27;/druid/*&#x27;</span>                                                       <span class="comment">#StatViewServlet 的映射路径，即内置监控页面的访问地址</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">true</span>                                                            <span class="comment">#是否启用重置按钮</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span>                                                         <span class="comment">#内置监控页面的登录页用户名 username</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span>                                                         <span class="comment">#内置监控页面的登录页密码 password</span></span><br><span class="line">      <span class="comment"># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>                                                                 <span class="comment">#是否开启内置监控中的 Web-jdbc 关联监控的数据</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">&#x27;/*&#x27;</span>                                                             <span class="comment">#匹配路径</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span>                     <span class="comment">#排除路径</span></span><br><span class="line">        <span class="attr">session-stat-enable:</span> <span class="literal">true</span>                                                     <span class="comment">#是否监控session</span></span><br><span class="line">      <span class="comment"># Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.heavytiger.jdbc.*</span>                                             <span class="comment">#Spring监控AOP切入点，如x.y.z.abc.*,配置多个英文逗号分隔</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">###################### Druid 监控配置信息  ####################</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment">#对配置已开启的 filters 即 stat(sql 监控)  wall（防火墙）</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="comment">#配置StatFilter (SQL监控配置)</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>                                                               <span class="comment">#开启 SQL 监控</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span>                                                       <span class="comment">#慢查询</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span>                                                          <span class="comment">#记录慢查询 SQL</span></span><br><span class="line">        <span class="comment">#配置WallFilter (防火墙配置)</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>                                                               <span class="comment">#开启防火墙</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">update-allow:</span> <span class="literal">true</span>                                                        <span class="comment">#允许更新操作</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span>                                                   <span class="comment">#禁止删表操作</span></span><br><span class="line">            <span class="attr">insert-allow:</span>  <span class="literal">true</span>                                                       <span class="comment">#允许插入操作</span></span><br><span class="line">            <span class="attr">delete-allow:</span> <span class="literal">true</span>                                                        <span class="comment">#删除数据操作</span></span><br></pre></td></tr></table></figure><p>在配置 Druid 内置 Filter 时，需要先将对应 Filter 的 enabled 设置为 true，否则内置 Filter 的配置不会生效。</p><h4 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入 mybatis-spring-boot-starter 的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置MyBatis"><a href="#配置MyBatis" class="headerlink" title="配置MyBatis"></a>配置MyBatis</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###################################### MyBatis 配置######################################</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定 mapper.xml 的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment">#扫描实体类的位置,在此处指明扫描实体类的包，在 mapper.xml 中就可以不写实体类的全路径名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.heavytiger.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#默认开启驼峰命名法，可以不用设置该属性</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  </span><br></pre></td></tr></table></figure><h5 id="创建实体类及接口"><a href="#创建实体类及接口" class="headerlink" title="创建实体类及接口"></a>创建实体类及接口</h5><p>实体类不再占用位置书写</p><p>Mapper接口需要进行标记：<code>@Mapper</code>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过用户名密码查询用户数据</span></span><br><span class="line">    <span class="function">User <span class="title">getByUserNameAndPassword</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当 mapper 接口较多时，我们可以在 Spring Boot 主启动类上使用 @MapperScan 注解扫描指定包下的 mapper 接口，而不再需要在每个 mapper 接口上都标注 @Mapper 注解。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.bilibili.com/video/BV19K4y1L7MT">尚硅谷雷神SpringBoot2零基础入门springboot全套完整版（spring boot2）_哔哩哔哩_bilibili</a></p><p>[2] <a href="https://www.yuque.com/atguigu/springboot">SpringBoot2核心技术与响应式编程 · 语雀 (yuque.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础入门</title>
      <link href="/articles/SpringBoot%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/articles/SpringBoot%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p><strong>Spring Boot</strong>是一个构建在Spring框架顶部的项目。它提供了一种简便，快捷的方式来设置，配置和运行基于Web的简单应用程序。它是一个Spring模块，提供了<strong>RAD(快速应用程序开发)<strong>功能。它可以用于快速创建独立的基于Spring的应用程序，因为它需要最少的Spring配置就可以运行。简而言之，Spring Boot是</strong>Spring Framework</strong>和<strong>嵌入式服务器</strong>的组合。在Spring Boot不需要XML配置(部署描述符)。它使用<strong>约定优于配置</strong>的软件设计范例，这意味着可以减少开发人员的工作量。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><h3 id="SpringBoot能做什么"><a href="#SpringBoot能做什么" class="headerlink" title="SpringBoot能做什么"></a>SpringBoot能做什么</h3><p>我们应该使用<code>Spring Boot Framework</code>，因为:</p><ul><li>Spring Boot中使用了依赖项注入方法。</li><li>它包含强大的数据库事务管理功能。</li><li>它简化了与其他Java框架(如JPA/Hibernate ORM，Struts等)的集成。</li><li>它减少了应用程序的成本和开发时间。</li></ul><p>与Spring Boot框架一起，其他许多Spring姐妹项目也有助于构建满足现代业务需求的应用程序。 </p><p>Spring姐妹项目如下:</p><ul><li><strong>Spring Data:</strong> 它简化了来自关系数据库和 <strong>NoSQL</strong> 数据库的数据访问。</li><li><strong>Spring Batch:</strong> 它提供了强大的<strong>批处理</strong>处理。</li><li><strong>Spring Security:</strong> 这是一个安全框架，可为应用程序提供强大的<strong>安全性</strong>。</li><li><strong>Spring Social:</strong> 它支持与LinkedIn等<strong>社交网络</strong>集成。</li><li><strong>Spring Integration:</strong> 它是企业集成模式的实现。使用轻量级消息传递和声明性适配器，它有助于与其他<strong>企业应用程序</strong>集成。</li></ul><h3 id="SpringBoot优缺点"><a href="#SpringBoot优缺点" class="headerlink" title="SpringBoot优缺点"></a>SpringBoot优缺点</h3><blockquote><p><strong>优点：</strong></p><ul><li><p>Create stand-alone Spring applications</p></li><li><ul><li>创建独立Spring应用</li></ul></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p></li><li><ul><li>内嵌web服务器</li></ul></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p></li><li><ul><li>自动starter依赖，简化构建配置</li></ul></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p></li><li><ul><li>自动配置Spring以及第三方功能</li></ul></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p></li><li><ul><li>提供生产级别的监控、健康检查及外部化配置</li></ul></li><li><p>Absolutely no code generation and no requirement for XML configuration</p></li><li><ul><li>无代码生成、无需编写XML</li></ul></li></ul><blockquote><p>SpringBoot是整合Spring技术栈的一站式框架</p><p>SpringBoot是简化Spring技术栈的快速开发脚手架</p></blockquote><p><strong>缺点：</strong></p><ul><li>迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ul></blockquote><h2 id="第一个Hello-world程序"><a href="#第一个Hello-world程序" class="headerlink" title="第一个Hello world程序"></a>第一个Hello world程序</h2><p><strong>pom.xml配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heavytiger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Learn_SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>主程序ApplicationMain：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类.</span></span><br><span class="line"><span class="comment"> * 该注解告诉这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heavytiger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务层HelloController：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器.</span></span><br><span class="line"><span class="comment"> * 该控制器用于接受/hello请求，返回hello world</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heavytiger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world, hello Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>直接运行MainApplication中的main方法即可启动，原因是springboot封装了tomcat服务器</strong></p><p><img src="image-20220112161714239.png" alt="image-20220112161714239"></p><p><strong>创建application.properties简化全局配置：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8088</span></span><br><span class="line"><span class="comment"># 即将端口号改为8088</span></span><br></pre></td></tr></table></figure><p><strong>修改端口后，通过8088可以访问：</strong></p><p><img src="image-20220112161921050.png" alt="image-20220112161921050"></p><p><strong>简化部署流程：</strong></p><p>在<code>pom.xml</code>中添加如下插件依赖，可以打包成jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heavytiger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Learn_SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--选择打包成jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加插件支持，简化部署流程--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行<code>mvn package</code>命令后，得到jar包，在shell下可以直接使用语句<code>java -jar abc.jar</code>运行jar包，启动web服务。</p><blockquote><p>若命令行下启动时卡死，需要禁用cmd的快速编辑模式，之后即可正常运行jar包</p></blockquote><h2 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h2><h3 id="SpringBoot的特点"><a href="#SpringBoot的特点" class="headerlink" title="SpringBoot的特点"></a>SpringBoot的特点</h3><h4 id="SpringBoot的依赖管理"><a href="#SpringBoot的依赖管理" class="headerlink" title="SpringBoot的依赖管理"></a>SpringBoot的依赖管理</h4><p>我们上一章编写的<code>hello world</code>服务中，<code>pom.xml</code>下非常整洁，只导入了一个依赖，就能直接运行相应的功能，但是以往在Spring和SpringMVC中，要导入很多东西。SpringBoot简化的原理是：<strong>父项目做依赖管理</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父项目做依赖管理，此时已经选择了版本号，因此在后续dependency导入依赖时，不需要另赋版本号--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring-boot-starter-parent的父项目--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring-boot-dependencies中几乎声明了所有开发中常用的依赖的版本号，运用自动版本仲裁机制--&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot无需关注版本号，自动实现版本仲裁：</p><ol><li>引入依赖默认可以不写版本</li><li>引入非版本仲裁的jar包，即SpringBoot未声明的依赖，需要写版本号</li></ol><p>在<code>spring-boot-dependencies</code>文件中，引入的mysql驱动是<code>8.0.21</code>版本，若想将其人为设置成<code>5.1.43</code>版本，则可以在<code>properties</code>标签下声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、查看spring-boot-dependencies里面规定当前依赖的版本所用的key。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2、在当前项目里面重写配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Maven提供的特性，就近优先原则</strong></p><p>SpringBoot导入starter场景启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、pom.xml中的 spring-boot-starter-* ： *就某种场景，例如web，cache，batch等</span></span><br><span class="line"><span class="comment">2、只要引入starter，这个场景的所有常规需要的依赖都会被自动导入</span></span><br><span class="line"><span class="comment">3、SpringBoot所有支持的场景可以在如下的文档中找到</span></span><br><span class="line"><span class="comment">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span></span><br><span class="line"><span class="comment">4、见到的所有 *-spring-boot-starter： 均为第三方为我们提供的简化开发的场景启动器(不要以Spring开头了)。</span></span><br><span class="line"><span class="comment">5、所有场景启动器最底层的依赖，都会依赖以下所示的依赖</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spspring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot-starter-web的依赖树，可以看到常见的web开发中的依赖均已经被导入，非常简洁明了</p><p><img src="image-20220112164852346.png" alt="image-20220112164852346"></p><h4 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h4><p><strong>SpringBoot帮忙做好的事情：</strong></p><ul><li><p>自动配置好Tomcat</p><ul><li>引入Tomcat依赖</li><li>配置Tomcat</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）视图解析器，dispatcherServlet等</li></ul></li><li><p>自动配好Web常见功能</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景及问题，如：字符编码乱码问题</li></ul></li><li><p>默认的包结构</p><ul><li><p><strong>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</strong></p></li><li><p>无需以前的包扫描配置</p></li><li><p>想要改变扫描路径，<code>@SpringBootApplication(scanBasePackages=&quot;com.heavytiger&quot;)</code></p><ul><li>或者使用 <code>@ComponentScan</code>指定扫描路径，已经写了<code>@SpringBootApplication()</code>后，不能重复使用，因为其本质使用<code>@ComponentScan</code>实现，默认扫描到该注解的包下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 等同于以下三句</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.heavytiger.boot&quot;)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>各种配置拥有默认值</p><ul><li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li><li>配置文件的值最终会绑定某个类上，这个类会在容器中被创建对象</li></ul></li><li><p>按需加载所有自动配置项</p><ul><li><p>非常多的starter</p></li><li><p><strong>按需加载，引入了哪些场景，该场景的自动配置才会被开启，不一定类都被加载，只有需要的时候才会被加载</strong></p></li><li><p>SpringBoot所有的自动配置功能都在<code>spring-boot-autoconfigure</code>包里面</p></li></ul></li><li><p>……</p></li></ul><h3 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h3><h4 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h4><h5 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h5><ul><li>基本模式<code>@Configuration</code>，表示该类是一个配置类</li><li>Full模式<code>@Configuration(proxyBeanMethods = true)</code>和Lite模式<code>@Configuration(proxyBeanMethods = false)</code></li></ul><p>建议使用方案：</p><ul><li>配置类中，组件之间没有依赖关系，使用Lite模式加速容器的启动，否则每次获取实例都需要判断是否存在实例</li><li>配置类中，组件之间存在依赖关系，方法调用必须要得到之前的单实例组件，此时应该用Full模式保证获取到的是同一实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ########################################Configuration使用示例######################################</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是一个组件，可以获取组件后调用其中的方法</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment"> *      组件依赖必须使用Full模式，其他今年使用Lite模式</span></span><br><span class="line"><span class="comment"> * Spring 5.2版本后支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ###################################@Configuration测试代码如下########################################</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.heavytiger.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line"></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、com.heavytiger.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果@Configuration(proxyBeanMethods = true)代理对象调用方法。</span></span><br><span class="line">        <span class="comment">// SpringBoot总会检查这个组件是否在容器中已经存在实例</span></span><br><span class="line">        <span class="comment">// 这样能够保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Bean、-Component、-Controller、-Service、-Repository"><a href="#Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="@Bean、@Component、@Controller、@Service、@Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h5><p>和之前的SSM中一样，在类上标注注解，可以直接通过名称获取，也可以实现自动装配</p><h5 id="ComponentScan、-Import"><a href="#ComponentScan、-Import" class="headerlink" title="@ComponentScan、@Import"></a>@ComponentScan、@Import</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Import</span>(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="comment"> *      给容器中通过无参方法自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h5><p>条件装配：满足Conditional指定的条件，则进行组件注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">=====================测试条件装配==========================</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中Tom组件：&quot;</span>+tom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">&quot;user01&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中user01组件：&quot;</span>+user01);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> tom22 = run.containsBean(<span class="string">&quot;tom22&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中tom22组件：&quot;</span>+tom22);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml配置文件引入"><a href="#xml配置文件引入" class="headerlink" title="xml配置文件引入"></a>xml配置文件引入</h4><p>使用<code>@ImportResource</code>注解，可以把原生的配置文件导入到容器中，适用于公司中存在较老的不方便进行迁移的组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--======================beans.xml=========================--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">======================测试=================</span><br><span class="line"><span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h4><p>使用Java读取properties配置文件中的内容，并把它封装到JavaBean中，以供随时使用</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties</span></span><br><span class="line"><span class="meta">mycar.brand</span> = <span class="string">BYD</span></span><br><span class="line"><span class="meta">mycar.price</span> = <span class="string">100000</span></span><br></pre></td></tr></table></figure><h5 id="方案一：-Component-ConfigurationProperties"><a href="#方案一：-Component-ConfigurationProperties" class="headerlink" title="方案一：@Component + @ConfigurationProperties"></a>方案一：@Component + @ConfigurationProperties</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> * prefix表示以mycar为前缀的被注册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方案二：-EnableConfigurationProperties-ConfigurationProperties"><a href="#方案二：-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="方案二：@EnableConfigurationProperties + @ConfigurationProperties"></a>方案二：@EnableConfigurationProperties + @ConfigurationProperties</h5><p>若使用第三方的组件，不可能去给类上添加一个<code>@Component</code>，因此只能在需要使用到组件的配置类上添加<code>@EnableConfigurationProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动配置原理入门"><a href="#自动配置原理入门" class="headerlink" title="自动配置原理入门"></a>自动配置原理入门</h3><h4 id="引导加载自动配置类"><a href="#引导加载自动配置类" class="headerlink" title="引导加载自动配置类"></a>引导加载自动配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication&#123;&#125;</span><br></pre></td></tr></table></figure><p>从<code>@SpringBootConfiguration</code>中开始查询实现：</p><p><strong>1.@SpringBootConfiguration</strong></p><p>里面的注解有@Configuration代表当前是一个配置类</p><p><strong>2.@ComponentScan</strong></p><p>指定扫描哪些内容，哪些包</p><p><strong>3.@EnableAutoConfiguration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>4.@AutoConfigurationPackage</strong></p><p>自动配置包，指定了默认的包的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br></pre></td></tr></table></figure><p><strong>5.@Import(AutoConfigurationImportSelector.class)</strong></p><blockquote><p>1、利用<code>getAutoConfigurationEntry(annotationMetadata);</code>给容器中批量导入一些组件<br>2、调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>获取到所有需要导入到容器中的配置类<br>3、利用工厂加载<code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；</code>得到所有的组件<br>4、从<code>META-INF/spring.factories</code>位置来加载一个文件。<br>   默认扫描我们当前系统里面所有<code>META-INF/spring.factories</code>位置的文件<br>  <code> spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包里面也有<code>META-INF/spring.factories</code></p></blockquote><h4 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h4><blockquote><p>虽然一共有127个场景在自动配置启动的时候会被默认全部加载，但是由于各个场景的<code>xxxAutoConfiguration</code>会按照条件装配规则(<code>@Conditional</code>)，最终实现按需分配</p></blockquote><h4 id="修改默认设置"><a href="#修改默认设置" class="headerlink" title="修改默认设置"></a>修改默认设置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="comment">// 给容器中加入了文件上传解析器；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">    <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line"><span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</li><li>生效的配置类就会给容器中装配很多组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>定制化配置<ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration —&gt; 组件 —&gt;</strong> <strong>xxxxProperties里面拿值 —-&gt; application.properties</strong></p><h4 id="最佳实现"><a href="#最佳实现" class="headerlink" title="最佳实现"></a>最佳实现</h4><ul><li><p>引入场景依赖</p><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li></ul></li><li><p>查看自动配置了哪些（选做）</p><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中设置<code>debug=true</code>开启自动配置报告。Negative（不生效）\Positive（生效）</li></ul></li><li><p>是否需要修改</p><ul><li>参照文档修改配置项<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。</li></ul></li></ul><ul><li><p>自定义加入或者替换组件</p><ul><li>@Bean、@Component</li></ul></li><li><p>自定义器  <strong>XXXXXCustomizer</strong>；</p></li></ul><ul><li>……</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.bilibili.com/video/BV19K4y1L7MT">尚硅谷雷神SpringBoot2零基础入门springboot全套完整版（spring boot2）_哔哩哔哩_bilibili</a></p><p>[2] <a href="https://www.yuque.com/atguigu/springboot">SpringBoot2核心技术与响应式编程 · 语雀 (yuque.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合开发</title>
      <link href="/articles/SSM%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91/"/>
      <url>/articles/SSM%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>记录使用SSM(Spring + SpringMVC + MyBatis)框架前后端分离完成的一个简易电商用户端系统的开发流程，此项目已部署上线。仅用来检测自己对ssm的学习掌握情况。该系统使用git进行版本控制，由我和室友两人共同完成后台所有功能的开发，现特记录如下。该项目的Github地址为：<a href="https://github.com/HeavyTiger/mall">HeavyTiger/mall: 使用ssm+vue框架实现的商城系统 (github.com)</a>，欢迎各路大佬或想参考该项目共同学习的小伙伴为该项目加上小星星⭐！</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="项目技术栈及工具使用"><a href="#项目技术栈及工具使用" class="headerlink" title="项目技术栈及工具使用"></a>项目技术栈及工具使用</h2><ol><li>Spring + SpringMVC + MyBatis + Maven完成开发</li><li>JWT技术实现身份权限认证</li><li>PageHelper实现快速分页</li><li>IDEA集成开发环境 </li><li>git实现版本控制管理</li><li>Navicat编写数据库结构及骨架，测试远程数据库</li><li>ApiFox完成接口文档及接口测试</li><li>XShell + Xftp远程控制服务器</li><li>Tomcat测试及部署war包</li><li>CentOS_8.3阿里云服务器部署生产环境</li></ol><h2 id="电商用户端需求"><a href="#电商用户端需求" class="headerlink" title="电商用户端需求"></a>电商用户端需求</h2><p><strong>用户层要求</strong></p><ol><li>用户能够在网页端完成注册登录，登录后通过服务器颁发token访问站内资源，30分钟内有效，超过30分钟需要重新登录</li><li>用户能够查看并完善自己的全部个人信息</li></ol><p><strong>商品层要求</strong></p><ol><li>用户能够分页浏览由供应商发布的商品，通过各种字段信息检索发布的商品</li></ol><p><strong>购物车层要求</strong></p><ol><li>用户在商品页浏览时，把所需商品选中添加到购物车</li><li>用户在购物车页面可以查看添加进购物车的商品</li><li>用户在购物车页面可以更新购物车中的商品选购数量</li><li>用户在购物车页面可以移除不需要的商品</li><li>用户可以在订单页面中通过查看订单详情，展示该订单中的所有商品信息</li></ol><p><strong>订单层要求</strong></p><ol><li>用户可以在购物车页面中结算选购的所有商品，计算金额，生成订单</li><li>用户可以查询自己在平台上消费的所有订单</li></ol><h2 id="SSM框架的整合"><a href="#SSM框架的整合" class="headerlink" title="SSM框架的整合"></a>SSM框架的整合</h2><p><strong>SSM项目的文件树：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">E:\PROGRAMDEMO\MALL</span><br><span class="line">│  .gitignore</span><br><span class="line">│  LICENSE</span><br><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─mall</span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          │      CustomerController.java</span><br><span class="line">│  │  │          │      OrderCartController.java</span><br><span class="line">│  │  │          │      OrderController.java</span><br><span class="line">│  │  │          │      ProductController.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─interceptor</span><br><span class="line">│  │  │          │      CheckInterceptor.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─mapper</span><br><span class="line">│  │  │          │      CustomerMapper.java</span><br><span class="line">│  │  │          │      OrderCartMapper.java</span><br><span class="line">│  │  │          │      OrderMapper.java</span><br><span class="line">│  │  │          │      ProductMapper.java</span><br><span class="line">│  │  │          │      SupplierMapper.java</span><br><span class="line">│  │  │          │      TagMapper.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─pojo</span><br><span class="line">│  │  │          │      Customer.java</span><br><span class="line">│  │  │          │      EnumResult.java</span><br><span class="line">│  │  │          │      Order.java</span><br><span class="line">│  │  │          │      OrderCart.java</span><br><span class="line">│  │  │          │      ProductDetail.java</span><br><span class="line">│  │  │          │      ProductSearch.java</span><br><span class="line">│  │  │          │      ResultBean.java</span><br><span class="line">│  │  │          │      Supplier.java</span><br><span class="line">│  │  │          │      Tag.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─service</span><br><span class="line">│  │  │          │  │  CustomerService.java</span><br><span class="line">│  │  │          │  │  OrderCartService.java</span><br><span class="line">│  │  │          │  │  OrderService.java</span><br><span class="line">│  │  │          │  │  ProductService.java</span><br><span class="line">│  │  │          │  │  SupplierService.java</span><br><span class="line">│  │  │          │  │  TagService.java</span><br><span class="line">│  │  │          │  │</span><br><span class="line">│  │  │          │  └─impl</span><br><span class="line">│  │  │          │          CustomerServiceImpl.java</span><br><span class="line">│  │  │          │          OrderCartServiceImpl.java</span><br><span class="line">│  │  │          │          OrderServiceImpl.java</span><br><span class="line">│  │  │          │          ProductServiceImpl.java</span><br><span class="line">│  │  │          │          SupplierServiceImpl.java</span><br><span class="line">│  │  │          │          TagServiceImpl.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─util</span><br><span class="line">│  │  │                  JsonUtil.java</span><br><span class="line">│  │  │                  JwtUtil.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      ├─com</span><br><span class="line">│  │      │  └─mall</span><br><span class="line">│  │      │      └─mapper</span><br><span class="line">│  │      │              CustomerMapper.xml</span><br><span class="line">│  │      │              OrderCartMapper.xml</span><br><span class="line">│  │      │              OrderMapper.xml</span><br><span class="line">│  │      │              ProductMapper.xml</span><br><span class="line">│  │      │              SupplierMapper.xml</span><br><span class="line">│  │      │              TagMapper.xml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      └─conf</span><br><span class="line">│  │              applicationContext.xml</span><br><span class="line">│  │              database.properties</span><br><span class="line">│  │              mybatis-config.xml</span><br><span class="line">│  │              spring-dao.xml</span><br><span class="line">│  │              spring-mvc.xml</span><br><span class="line">│  │              spring-service.xml</span><br><span class="line">│  │</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─com</span><br><span class="line">│              └─mall</span><br><span class="line">│                  └─service</span><br><span class="line">│                      └─impl</span><br><span class="line">│                              CustomerServiceImplTest.java</span><br><span class="line">│                              OrderCartServiceImplTest.java</span><br><span class="line">│                              OrderServiceImplTest.java</span><br><span class="line">│                              ProductServiceImplTest.java</span><br><span class="line">│                              SupplierServiceImplTest.java</span><br><span class="line">│                              TagServiceImplTest.java</span><br><span class="line">│</span><br><span class="line">└─web</span><br><span class="line">    └─WEB-INF</span><br><span class="line">            web.xml</span><br></pre></td></tr></table></figure><p><strong>使用Maven进行依赖管理，在pom层导入需要的包：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--datasource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql_connector_8.0.25--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet_api，注意低于3.0版本会与junit4冲突，导致单元测试报错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--page helper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--json web token--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--约定解决静态资源导出问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resource<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置Spring的Context上下文：</strong></p><p>上下文关系如下图所示：</p><p><img src="image-20211227212701984.png" alt="image-20211227212701984"></p><p><strong>applicationContext.xml为根上下文，在其中引入所有的其他上下文：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-dao.xml为Spring中dao层相关的上下文：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:conf/database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置druid连接池数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册SqlSessionFactoryBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:conf/mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置扫描Mapper接口包，动态实现Mapper接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mall.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在该层中引入了database.properties，控制连接的用户名密码URL等信息：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mall?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">mall</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p><strong>在该层注册SqlSessionFactoryBean时，可以引入配置文件mybatis-config.xml文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源，交给Spring做--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--取别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mall.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置分页助手插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定使用的数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mall.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-service.xml上下文用来配置Service层相关的包扫描以及事务注解支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mall.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- enable transaction annotation support --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-mvc.xml上下文用来配置拦截器包扫描和声明注解支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mall.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源实施拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不拦截登录和注册相关的Api--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/register&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/userExist&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mall.interceptor.CheckInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有前后端分离的SSM项目基本都可以使用这一套模板创建Spring上下文，提升开发的效率。</p><h2 id="数据库的相关设计"><a href="#数据库的相关设计" class="headerlink" title="数据库的相关设计"></a>数据库的相关设计</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><strong>数据库命名：mall</strong></p><p><strong>字符集</strong>：utf8mb4 MySQL在5.5.3之前，Unicode收录的字符有限，所以MySQL将utf8存储设计为3字节存储（即utf8mb3），后来Unicode收录的字符增多（比如增加了表情），所以扩展为4个字节，名为utf8mb4。该字符集支持中文。MySQL在5.5.3版本之后增加了utf8mb4编码，mb4即most bytes 4，专门用来兼容四字节的Unicode。</p><p><strong>数据库创建语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">########## 创建mall数据库 ##########</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mall;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mall <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br><span class="line">USE mall;</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><strong>用户表：customers</strong></p><p><strong>字段设计：</strong>用户表存储用户的基本信息，包括用户id，用户登录信息（用户名、密码），用户的个人信息（用户性别、联系电话、电子邮箱、用户简介），为了简化开发，所以没有将详情分表存储。</p><p><strong>存储引擎</strong>：需要支持事务，选择InnoDB引擎。</p><p><strong>用户表创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">########################</span><br><span class="line"># <span class="keyword">Create</span> customers <span class="keyword">table</span></span><br><span class="line">########################</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">customer_id<span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">customer_username    <span class="type">VARCHAR</span>(<span class="number">20</span>)   <span class="keyword">NULL</span>,</span><br><span class="line">customer_password    <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">NULL</span>,</span><br><span class="line">customer_gender     <span class="type">CHAR</span>(<span class="number">1</span>)       <span class="keyword">NULL</span>,</span><br><span class="line">customer_phone      <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">customer_email      <span class="type">VARCHAR</span>(<span class="number">20</span>)   <span class="keyword">NULL</span>,</span><br><span class="line">customer_description   <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (customer_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p><strong>供应商表：providers</strong></p><p><strong>字段设计：</strong>供应商表存储供应商的基本信息，包括供应商id，供应商登录信息（用户名、密码），供应商的详情信息（联系电话、电子邮箱、供应商描述），为了简化开发，所以没有将详情分表存储。</p><p><strong>存储引擎</strong>：需要支持事务，选择InnoDB引擎。</p><p><strong>供应商表创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">########################</span><br><span class="line"># <span class="keyword">Create</span> suppliers <span class="keyword">table</span></span><br><span class="line">########################</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> suppliers (</span><br><span class="line">supplier_id       <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">supplier_username    <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">supplier_password    <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">NULL</span>,</span><br><span class="line">supplier_phone      <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">supplier_email      <span class="type">VARCHAR</span>(<span class="number">20</span>)   <span class="keyword">NULL</span>,</span><br><span class="line">supplier_description   <span class="type">VARCHAR</span>(<span class="number">100</span>)   <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (supplier_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p><strong>标签表：tags</strong></p><p><strong>字段设计：</strong>标签表存商品的分类信息，包括标签id，标签名称。</p><p><strong>存储引擎</strong>：需要支持事务，选择InnoDB引擎。</p><p><strong>供应商表创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">###################</span><br><span class="line"># <span class="keyword">Create</span> tags <span class="keyword">table</span></span><br><span class="line">###################</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tags (</span><br><span class="line">tag_id       <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 分类表ID，自动生成</span></span><br><span class="line">tag_name        <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NULL</span>, <span class="comment">-- 类别名称</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (tag_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p><strong>商品表：products</strong></p><p><strong>字段设计：</strong>商品表存储商品的基本信息，包括商品id，商品详情信息（商品名称、商品价格、商品库存数量、商品分类、商品描述、上下架状态、商品的供应商id）</p><p><strong>存储引擎</strong>：需要支持事务，选择InnoDB引擎。</p><p><strong>供应商表创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#######################</span><br><span class="line"># <span class="keyword">Create</span> products <span class="keyword">table</span></span><br><span class="line">#######################</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products(</span><br><span class="line">product_id       <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 商品id</span></span><br><span class="line"> product_name      <span class="type">VARCHAR</span>(<span class="number">20</span>)   <span class="keyword">NULL</span>, <span class="comment">-- 商品名称</span></span><br><span class="line"> product_price      <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)   <span class="keyword">NULL</span>, <span class="comment">-- 商品价格</span></span><br><span class="line"> product_stock      <span class="type">INT</span> UNSIGNED   <span class="keyword">NULL</span>, <span class="comment">-- 商品库存数量</span></span><br><span class="line"> product_tag_id      <span class="type">INT</span> UNSIGNED <span class="keyword">NULL</span>, <span class="comment">-- 商品分类</span></span><br><span class="line"> product_description     <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>, <span class="comment">-- 商品描述</span></span><br><span class="line"> product_status     TINYINT <span class="keyword">DEFAULT</span> <span class="number">1</span> , <span class="comment">-- 上下架状态：0下架，1上架</span></span><br><span class="line"> supplier_id         <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 添加商品前需指定供应商 外键，引用supplier.supplier_id</span></span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (product_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p><strong>购物车表：order_carts</strong></p><p><strong>字段设计：</strong>购物车表存储用户加入购物车的商品数据，包括购物车id，用户信息（用户id），商品信息（商品id、加入购物车的数量、商品价格、购买标识），订单信息（订单id）、添加时间</p><p><strong>存储引擎</strong>：需要支持事务，选择InnoDB引擎。</p><p><strong>供应商表创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">##########################</span><br><span class="line"># <span class="keyword">Create</span> order_carts <span class="keyword">table</span></span><br><span class="line">##########################</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> order_carts (</span><br><span class="line">order_cart_id      <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 购物车ID</span></span><br><span class="line">customer_id<span class="type">INT</span> UNSIGNED<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 用户ID</span></span><br><span class="line">product_id<span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 商品ID</span></span><br><span class="line">product_amount   <span class="type">INT</span> <span class="keyword">NULL</span>, <span class="comment">-- 加入购物车数量</span></span><br><span class="line">product_price   <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)<span class="keyword">NULL</span>, <span class="comment">-- 商品价格</span></span><br><span class="line">statusTINYINT<span class="keyword">DEFAULT</span> <span class="number">1</span>, <span class="comment">-- 购买标识，0为已购买；1为未购买</span></span><br><span class="line">order_id<span class="type">INT</span> UNSIGNED <span class="keyword">NULL</span>, <span class="comment">-- 订单id</span></span><br><span class="line">add_time <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 加入购物车时间</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (order_cart_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p><strong>订单表：orders</strong></p><p><strong>字段设计：</strong>订单表存储用户的订单信息，包括订单id，订单编号，用户信息（用户id），收货人信息（收货人姓名、收货人地址、收货人联系方式），订单信息（订单金额、下单时间）</p><p><strong>存储引擎</strong>：需要支持事务，选择InnoDB引擎。</p><p><strong>供应商表创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#####################</span><br><span class="line"># <span class="keyword">Create</span> orders <span class="keyword">table</span></span><br><span class="line">#####################</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">order_id      <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 订单ID</span></span><br><span class="line">order_sn<span class="type">VARCHAR</span>(<span class="number">32</span>)<span class="keyword">NULL</span>, <span class="comment">-- 订单编号（年+月+日+order_id） yyyymmddnnnnnnnnnn</span></span><br><span class="line">customer_id<span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 下单用户ID</span></span><br><span class="line">shipping_user   <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NULL</span>, <span class="comment">-- 收货人姓名</span></span><br><span class="line">shipping_address   <span class="type">VARCHAR</span>(<span class="number">100</span>)<span class="keyword">NULL</span>, <span class="comment">-- 收货人地址</span></span><br><span class="line">shipping_phone<span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NULL</span>, <span class="comment">-- 收货人联系方式</span></span><br><span class="line">order_money <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>), <span class="comment">-- 订单金额</span></span><br><span class="line">create_time<span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 下单时间</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (order_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><h3 id="索引和完整性设计"><a href="#索引和完整性设计" class="headerlink" title="索引和完整性设计"></a>索引和完整性设计</h3><h4 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h4><p><strong>主键</strong></p><p>为了节省索引结构的存储空间，且保证索引字段有新值插入时索引树结构调整较小，本项目中所有的主键均采用自增非空主键，数据类型为UNSIGNED INT，且主键不参与业务逻辑，仅作为行的唯一标识，统一以xxx_id命名。主键定义语句已包含在建表语句中。</p><p><strong>唯一索引</strong></p><p>根据业务逻辑，数据库中有三个字段需要唯一约束。分别是customers(username)，客户用户名唯一；suppliers(username)，供应商用户名唯一；tags(tag_name)，商品分类唯一。</p><p><strong>唯一索引创建语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 唯一约束（customer_username）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> customers <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_username <span class="keyword">UNIQUE</span>(customer_username);</span><br><span class="line">## 唯一约束（supplier_username）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> suppliers <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_username <span class="keyword">UNIQUE</span>(supplier_username);</span><br><span class="line">## 唯一约束（tag_name）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tags <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(tag_name);</span><br></pre></td></tr></table></figure><p><strong>普通索引</strong></p><p>为了优化查询性能，在如下字段创建普通索引。</p><p>**联合索引(customer_username, customer_password)**：用户的登录、注册属于高频需求，需要根据给定的用户名查询密码。由于高频请求只涉及这两个字段，所以可以建立联合索引实现索引覆盖，减少一次回表操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 联合索引（customer_username, customer_password）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> customers <span class="keyword">ADD</span> INDEX index_username_password (customer_username, customer_password);</span><br></pre></td></tr></table></figure><p><strong>联合索引(supplier_username, supplier_password)</strong></p><p>供应商信息的注册登录同样需要校验，所以同样建立联合索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 联合索引（supplier_username, supplier_password）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> suppliers <span class="keyword">ADD</span> INDEX index_username_password (supplier_username, supplier_password);</span><br></pre></td></tr></table></figure><p><strong>索引优化方案：</strong></p><p>根据最左前缀原则，在建立联合索引的时候，合理地安排索引顺序可以少维护一个索引。根据业务需求，用户表和供应商表的两个复合索引顺序安排合理。</p><p>考虑到MySQL支持前缀索引，对于占用空间较大的字段，如果有较高的查询需求，可以定义字段的一部分作为索引。如</p><p><code>ALTER TABLE products ADD INDEX index_description(description(10));</code></p><p>这同时带来的损失是，可能会增加额外的记录扫描次数，即多次回表取出目标字段判断是否与查询条件一致，然后取索引指向位置的下一个记录，再次判断…，直到索引值与查询条件不一致，循环结束。要提升存储效率、兼顾查询效率，需要取适当的索引长度。可通过DISTINCT关键字计算各个索引长度下，目标列有多少个不同的索引值，与总行数相除，横向对比，设定一个可以接受的损失比例，选择合适的索引长度。</p><h4 id="完整性设计"><a href="#完整性设计" class="headerlink" title="完整性设计"></a>完整性设计</h4><p>参照完整性主要体现在表的外键约束。具体实现如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## 外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> products <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_products_tags <span class="keyword">FOREIGN</span> KEY(product_tag_id) <span class="keyword">REFERENCES</span> tags(tag_id);</span><br><span class="line">## 外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> products <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_products_suppliers <span class="keyword">FOREIGN</span> KEY (supplier_id) <span class="keyword">REFERENCES</span> suppliers (supplier_id);</span><br><span class="line">## 外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> order_carts <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_order_carts_customers <span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customers (customer_id);</span><br><span class="line">## 外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> order_carts <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_order_carts_products <span class="keyword">FOREIGN</span> KEY (product_id) <span class="keyword">REFERENCES</span> products (product_id);</span><br><span class="line">## 外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> order_carts <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_order_carts_orders <span class="keyword">FOREIGN</span> KEY (order_id) <span class="keyword">REFERENCES</span> orders (order_id);</span><br><span class="line">## 外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orders <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orders_customers <span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customers (customer_id);</span><br></pre></td></tr></table></figure><p>实体完整性主要体现在表级的完整性约束——主键。定义语句已在建表语句中包含。</p><p>对于外键字段，也添加了非空约束，通过NOT NULL指定列级完整性约束。具体实现可查看建表语句。</p><h2 id="项目部署流程"><a href="#项目部署流程" class="headerlink" title="项目部署流程"></a>项目部署流程</h2><p>首先使用Xshell连接CentOS服务器，安装MySQL数据库，安装流程借鉴该博客：<a href="https://blog.csdn.net/qq_39150374/article/details/112471108">centos8安装mysql8.0.22教程(超详细)_上善若水滴世界-CSDN博客</a></p><p>安装完成后，继续安装<code>tomcat</code>，直接下载tar包后使用xftp传入服务器中解压，解压完后可以直接使用。</p><p>将<code>IDEA</code>中的文件打包成war包，将war包放入tomcat的webapps路径下，之后在tomcat的bin目录下运行脚本<code>./startup.sh</code>即可启动后台，不过记得要开放<code>8080</code>端口，开放后，即可从接口获取相应的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架学习 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础学习</title>
      <link href="/articles/SpringMVC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/SpringMVC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>Spring MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助简化开发，Spring Web MVC也是要简化日常Web开发的。</p><p>Spring MVC主要是通过前端控制器controller中的注解来完成请求处理的。前端无论是以何种方式请求，都会通过controller进行轻度处理、转发以及调度后端的处理器进行处理，最后返回正确的视图及响应。<strong>以此来看，springMVC既可以返回合适的页面，也可以响应RESTful请求。</strong></p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="Spring-MVC简介"><a href="#Spring-MVC简介" class="headerlink" title="Spring MVC简介"></a>Spring MVC简介</h2><h3 id="Spring-MVC的特征"><a href="#Spring-MVC的特征" class="headerlink" title="Spring MVC的特征"></a>Spring MVC的特征</h3><ol><li><p>让我们能非常简单的设计出干净和整洁的Web层；</p></li><li><p>进行更简洁的Web层的开发；</p></li><li><p>天生与Spring框架集成（如IoC容器、AOP等）；</p></li><li><p>提供强大的约定大于配置的契约式编程支持；</p></li><li><p>能简单的进行Web层的单元测试；</p></li><li><p>支持灵活的URL到页面控制器的映射；</p></li><li><p>非常容易与其他视图技术集成，如Velocity、FreeMarker等等，因为模型数据不放在特定的API里，而是放在一个Model里（Map数据结构实现，因此很容易被其他框架使用）；</p></li><li><p>非常灵活的数据验证、格式化和数据绑定机制，能使用任何对象进行数据绑定，不必实现特定框架的API；</p></li><li><p>提供一套强大的JSP标签库，简化JSP开发；</p></li><li><p>支持灵活的本地化、主题等解析；</p></li><li><p>更加简单的异常处理；</p></li><li><p>对静态资源的支持；</p></li><li><p>支持Restful风格。</p></li></ol><h3 id="Spring-MVC的优势"><a href="#Spring-MVC的优势" class="headerlink" title="Spring MVC的优势"></a>Spring MVC的优势</h3><ol><li><p>清晰的角色划分：前端控制器（DispatcherServlet）、请求到处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、处理器或页面控制器（Controller）、验证器（Validator）、命令对象（Command 请求参数绑定到的对象就叫命令对象）、表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</p></li><li><p>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要；</p></li><li><p>由于命令对象就是一个POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象；</p></li><li><p>和Spring 其他框架无缝集成，是其它Web框架所不具备的；</p></li><li><p>可适配，通过HandlerAdapter可以支持任意的类作为处理器；</p></li><li><p>可定制性，HandlerMapping、ViewResolver等能够非常简单的定制；</p></li><li><p>功能强大的数据验证、格式化、绑定机制；</p></li><li><p>利用Spring提供的Mock对象能够非常简单的进行Web层单元测试；</p></li><li><p>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p></li><li><p>强大的JSP标签库，使JSP编写更容易。</p></li></ol><h2 id="SpringMVC实现HelloWorld"><a href="#SpringMVC实现HelloWorld" class="headerlink" title="SpringMVC实现HelloWorld"></a>SpringMVC实现HelloWorld</h2><p><strong>导入SpringMVC依赖</strong></p><p><strong>配置web.xml注册DispatcherServlet：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写SpringMVC的配置文件：springmvc-servlet.xml，添加处理映射器，处理器适配器，视图解析器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写要跳转的jsp页面，显示ModelandView存放的数据，以及正常页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Hello world!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><h2 id="SpringMVC的执行原理"><a href="#SpringMVC的执行原理" class="headerlink" title="SpringMVC的执行原理"></a>SpringMVC的执行原理</h2><p><img src="20160427094830780.png" alt="SpringMVC的执行原理"></p><p>(1) Http请求：客户端请求提交到DispatcherServlet。<br>(2) 寻找处理器：由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。<br>(3) 调用处理器：DispatcherServlet将请求提交到Controller。<br>(4)(5)调用业务处理和返回结果：Controller调用业务逻辑处理后，返回ModelAndView。<br>(6)(7)处理视图映射并返回模型： DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。<br>(8) Http响应：视图负责将结果显示到客户端。</p><h2 id="使用注解开发，实现HelloWorld"><a href="#使用注解开发，实现HelloWorld" class="headerlink" title="使用注解开发，实现HelloWorld"></a>使用注解开发，实现HelloWorld</h2><p><strong>导入SpringMVC依赖</strong></p><p><strong>配置web.xml注册DispatcherServlet：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写SpringMVC的配置文件：springmvc-servlet.xml，使其支持注解开发</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.heavytiger.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 .css .js等资源被过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用注解编写HelloController:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springMVC&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloSpringMVC</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello world, this is SpringMVC!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;     <span class="comment">// return 的结果会被视图解析器解析，拼接后找到视图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/spring&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloSpring</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello world, this is Spring!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;     <span class="comment">// return 的结果会被视图解析器解析，拼接后找到视图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mybatis&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloMyBatis</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello world, this is MyBatis!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;     <span class="comment">// return 的结果会被视图解析器解析，拼接后找到视图</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="image-20211216223424524.png" alt="image-20211216223424524"></p><p>此时访问不同的网页，导入到了不同的页面中</p><h2 id="RESTful-API风格"><a href="#RESTful-API风格" class="headerlink" title="RESTful API风格"></a>RESTful API风格</h2><p>REST：英文representational state transfer直译为表现层状态转移，或者表述性状态转移；Rest是web服务的一种架构风格，一种设计风格，是一种思想；同时Rest不是针对某一种编程语言的。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>API与用户的通信协议，总是使用HTTPs协议。</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>应该尽量将API部署在专用域名之下。</p><p>应该尽量将API部署在专用域名之下。</p><p><code>https://api.example.com</code></p><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><p><code>https://example.org/api/</code></p><h3 id="版本（Versioning）"><a href="#版本（Versioning）" class="headerlink" title="版本（Versioning）"></a>版本（Versioning）</h3><p>应该将API的版本号放入URL。</p><p><code>https://api.example.com/v1/</code></p><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><h3 id="路径（Endpoint）"><a href="#路径（Endpoint）" class="headerlink" title="路径（Endpoint）"></a>路径（Endpoint）</h3><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p><strong>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</strong></p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><blockquote><ul><li><code>https://api.example.com/v1/zoos</code></li><li><code>https://api.example.com/v1/animals</code></li><li><code>https://api.example.com/v1/employees</code></li></ul></blockquote><h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><blockquote><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul></blockquote><p>还有两个不常用的HTTP动词。</p><blockquote><ul><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul></blockquote><p>下面是一些例子。</p><blockquote><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul></blockquote><h3 id="过滤信息（Filtering）"><a href="#过滤信息（Filtering）" class="headerlink" title="过滤信息（Filtering）"></a>过滤信息（Filtering）</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul></blockquote><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h3 id="状态码（Status-Codes）"><a href="#状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><blockquote><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul></blockquote><h3 id="错误处理（Error-handling）"><a href="#错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: <span class="string">&quot;Invalid API key&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><blockquote><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ul></blockquote><h3 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;link&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;rel&quot;</span>:   <span class="string">&quot;collection https://www.example.com/zoos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;href&quot;</span>:  <span class="string">&quot;https://api.example.com/zoos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;List of zoos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>:  <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/">api.github.com</a>会得到一个所有可用API的网址列表。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;current_user_url&quot;</span>: <span class="string">&quot;https://api.github.com/user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authorizations_url&quot;</span>: <span class="string">&quot;https://api.github.com/authorizations&quot;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user">api.github.com/user</a>，然后就得到了下面结果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;current_user_url&quot;</span>: <span class="string">&quot;https://api.github.com/user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authorizations_url&quot;</span>: <span class="string">&quot;https://api.github.com/authorizations&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;emails_url&quot;</span>: <span class="string">&quot;https://api.github.com/user/emails&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;emojis_url&quot;</span>: <span class="string">&quot;https://api.github.com/emojis&quot;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>（1）API的身份认证应该使用OAuth 2.0框架。</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p><h2 id="重定向及转发"><a href="#重定向及转发" class="headerlink" title="重定向及转发"></a>重定向及转发</h2><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发二，手动补上forward: 但是没必要</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/jsp/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/WEB-INF/jsp/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="处理提交的数据"><a href="#处理提交的数据" class="headerlink" title="处理提交的数据"></a>处理提交的数据</h3><p><strong>提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <code>http://localhost:8080/hello?name=helloworld</code></p><p>处理方法 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出 : helloworld</p><p><strong>提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <code>http://localhost:8080/hello?username=helloworld</code></p><p>处理方法 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出 : helloworld</p><p><strong>提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致，参数使用对象即可</p><p>1、实体类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   private int id;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   //构造</span><br><span class="line">   //get/set</span><br><span class="line">   //tostring()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、提交数据 : <code>http://localhost:8080/user?name=helloworld&amp;id=1&amp;age=18</code></p><p>3、处理方法 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public String user(User user)&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出 : User { id=1, name=’helloworld’, age=18 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则得到的值就是null，因为无法反射注入。</p><h2 id="返回JSON数据"><a href="#返回JSON数据" class="headerlink" title="返回JSON数据"></a>返回JSON数据</h2><h3 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h3><p>增加Spring提供的filter，将请求的编码全部修改为utf-8</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="返回json字符串统一解决"><a href="#返回json字符串统一解决" class="headerlink" title="返回json字符串统一解决"></a>返回json字符串统一解决</h3><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;hello&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1282383921807393">使用Spring MVC - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><p>[2] <a href="https://www.bilibili.com/video/BV1aE41167Tu">【狂神说Java】SpringMVC最新教程IDEA版通俗易懂_哔哩哔哩_bilibili</a></p><p>[3] <a href="https://www.jianshu.com/p/91a2d0a1e45a">Spring MVC【入门】就这一篇！ - 简书 (jianshu.com)</a></p><p>[4] <a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南 - 阮一峰的网络日志 (ruanyifeng.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> SSM框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5基础学习</title>
      <link href="/articles/Spring5%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/Spring5%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>Spring是一个支持快速开发Java EE应用程序的框架。它提供了一系列底层容器和基础设施，并可以和大量常用的开源框架无缝集成，可以说是开发Java EE应用程序的必备。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring Framework主要包括几个模块：</p><ul><li>支持IoC和AOP的容器；</li><li>支持JDBC和ORM的数据访问模块；</li><li>支持声明式事务的模块；</li><li>支持基于Servlet的MVC开发；</li><li>支持基于Reactive的Web开发；</li><li>以及集成JMS、JavaMail、JMX、缓存等其他模块。</li></ul><p>Spring的优点：</p><ul><li>Spring是一个开源的免费的框架（容器）；</li><li>Spring是一个轻量级，非入侵式的框架；</li><li>控制反转(Ioc)，面向切面的编程(AoP)；</li><li>支持事务的处理，对框架整合的支持；</li></ul><h2 id="IoC理论推导"><a href="#IoC理论推导" class="headerlink" title="IoC理论推导"></a>IoC理论推导</h2><p><code>IoC</code>全称``Inversion of Control`，直译为控制反转。那么何谓IoC？在理解IoC之前，我们先看看通常的Java组件是如何协作的。</p><p>在JavaWeb学习时使用的方案大致是：</p><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>USerServiceImpl业务实现类</li></ol><p>假如现在多了很多需求，要求实现UserDaoMysqlImpl、UserDaoOracleImpl等很多实现类。本来只是改动了dao层，却导致此时Service层的代码也要因此而改变，仅仅是因为客户的需求发生了一点小变更，就要更改整个核心代码代价很大，得不偿失。</p><p>每一个Service都去实例化Dao层的实现类，采用简单的<code>new</code>去创建实例并持有该实例，会导致以下的缺点：</p><blockquote><ol><li>实例化一个组件其实很难，例如，<code>UserServiceImpl</code>要创建<code>UserDaoImpl</code>，实际上需要读取配置，建立连接，做很多操作才能够实例化该对象。</li><li>没有必要让<code>BookService</code>和<code>UserService</code>等分别创建<code>DataSource</code>实例，完全可以共享同一个<code>DataSource</code>，但谁负责创建<code>DataSource</code>，谁负责获取其他组件已经创建的<code>DataSource</code>，不好处理。</li><li>很多组件需要销毁以便释放资源，例如<code>DataSource</code>，但如果该组件被多个组件共享，如何确保它的使用方都已经全部被销毁？</li><li>随着更多的组件被引入，例如，评论，用户对话等组件，需要共享的组件写起来会更困难，这些组件的依赖关系会越来越复杂。</li><li>测试某个组件，例如<code>BookService</code>，非常复杂，因为必须要在真实的数据库环境下执行，否则很难发现问题。</li></ol></blockquote><p>使用Set接口进行实现，导致程序发生了革命性的变化！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userdao;</span><br><span class="line"><span class="comment">// 例用set进行动态实现值的注入；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前，程序是主动创建对象，控制权掌握在了程序员手上，小变动会导致大修改。</li><li>使用了set注入后，程序变得不再有主动性，而是变成了被动的接受对象。</li></ul><p>这种思想，从本质解决了问题，程序员不用再去管理对象的创建，使得系统的耦合性大大降低，可以更加专注的在业务的实现上！这是IOC的原型，将控制方进行了转换，让用户自行选择。</p><h3 id="IoC本质"><a href="#IoC本质" class="headerlink" title="IoC本质"></a>IoC本质</h3><p>控制反转是一种设计思想，在没有使用IoC的程序中，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制；但是在引入控制反转的思想后，将对象的创建转移给了第三方，获取所依赖对象的方式交换了。</p><p>IoC是Spring框架的核心，可以使用XML配置，也可以使用注解等方法实现IOC，Spring容器在初始化时读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序要使用时，再从IoC容器中取出所需的对象进行使用。</p><p><img src="image-20211211170715855.png" alt="image-20211211170715855"></p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h2 id="第一个Spring程序"><a href="#第一个Spring程序" class="headerlink" title="第一个Spring程序"></a>第一个Spring程序</h2><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Hello类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建beans.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello&#123;str=&#x27;Spring&#x27;&#125;</span><br></pre></td></tr></table></figure><p>没有创建对象，但是得到了所需的对象。原因是Spring通过反射机制，找到对应的包下的类，调用其<code>set</code>方法达到注入的效果。</p><h2 id="Spring的配置"><a href="#Spring的配置" class="headerlink" title="Spring的配置"></a>Spring的配置</h2><p>不同于<code>pom.xml</code>，<code>web.xml</code>，设计思路为约定优于配置，Spring的配置名称可以随意更改。因为可能使用多个业务，或者使用不同的程序员进行开发，因此可能有多个<code>spring.xml</code>文件，所以可以在<code>web.xml</code>下配置其路径(该配置可以将所有的<code>spring-</code>开头的xml文件配置成为所需路径)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        /WEB-INF/spring-*.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，若添加了别名，可以通过该名称，例如userNew直接获得该对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id: bean的唯一标识符，相当于对象名</span></span><br><span class="line"><span class="comment">class: bean对象所对应的全限定名：包名+类型名</span></span><br><span class="line"><span class="comment">name: 也是别名，且可以取多个别名，中间可以用很多符号隔断</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user1 u2,u3;u4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">propertity</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;heavytiger&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>import一般用于团队开发，不同的程序员可能编写不同的模块，可能有自己的beans.xml名称，因此可以使用import语句将不同的xml合并。</p><ul><li>applicationContext.xml</li><li>bean_a.xml</li><li>bean_b.xml</li><li>bean_c.xml</li></ul><p>可以在所有的程序中，都使用获取一个applicationContext.xml，在其中import</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean_a.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean_b.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean_c.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用的时候，全部使用applicationContext.xml即可</p><h3 id="懒初始化Bean"><a href="#懒初始化Bean" class="headerlink" title="懒初始化Bean"></a>懒初始化Bean</h3><p>默认情况下，作为初始化过程的一部分，<code>ApplicationContext</code>实现会急于创建和配置所有<strong>singleton bean</strong>，但是如果多天后取用bean时配置出现了变化，会导致错误，因此可以标记为延迟初始化来防止单例bean的预实例化。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.ExpensiveToCreateBean&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;not.lazy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.AnotherBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><ol><li><p>使用无参构造，默认方式，Spring会自动调用无参构造方法帮助创建对象</p></li><li><p>使用有参构造，反射通过构造器注入参数：</p><ol><li><p>通过参数类型匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--基本类型简称，引用类型全类名，不建议使用，若有多个同样类型无法匹配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过参数索引匹配创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>直接通过参数名创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;years&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ultimateAnswer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>容器在配置文件加载的时候就已经将对象创建了，并且只有一份实例，获取到的对象都是同一个实例。</p><h3 id="Set方法注入"><a href="#Set方法注入" class="headerlink" title="Set方法注入"></a>Set方法注入</h3><p>以复杂类型为例，使用Set方法注入：</p><h4 id="Address类"><a href="#Address类" class="headerlink" title="Address类"></a>Address类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Student类"><a href="#Student类" class="headerlink" title="Student类"></a>Student类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; cards;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String mate;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Address类后，beans中可以引用该类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;马房山男子职业技术学院&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种，普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;heavytiger&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第二种，引用类型使用Bean注入，使用ref进行引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第三种，数组类型注入，使用array标签注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第四种，List类型注入，使用list标签注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>骂彬彬<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打电动<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>登dua郎<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>怼阿妈<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第五种，Map类型注入，使用map标签注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cards&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1145141919&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;杰哥好&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第六种，Set类型注入，使用Set标签注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>WoT<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CoC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第六种，null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mate&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第七种，properties类型注入，使用prop标签注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>114514<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;密码&quot;</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Test类"><a href="#Test类" class="headerlink" title="Test类"></a>Test类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;</span><br><span class="line">    name=&#x27;heavytiger&#x27;,</span><br><span class="line">    address=Address&#123;address=&#x27;马房山男子职业技术学院&#x27;&#125;,</span><br><span class="line">    books=[红楼梦, 水浒传, 三国演义, 西游记],</span><br><span class="line">    hobbies=[骂彬彬, 打电动, 登dua郎, 怼阿妈],</span><br><span class="line">    cards=&#123;</span><br><span class="line">        身份证=1145141919,</span><br><span class="line">        hello=杰哥好</span><br><span class="line">    &#125;,</span><br><span class="line">    games=[WoT, CoC],</span><br><span class="line">    mate=&#x27;null&#x27;,</span><br><span class="line">    info=&#123;</span><br><span class="line">        密码=12345678,</span><br><span class="line">        学号=114514</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展方法注入"><a href="#拓展方法注入" class="headerlink" title="拓展方法注入"></a>拓展方法注入</h3><h4 id="p命名空间注入"><a href="#p命名空间注入" class="headerlink" title="p命名空间注入"></a>p命名空间注入</h4><p>p命名空间注入，可以直接注入属性的值：property</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--该p命名空间使用set方法注入，必须导入xmlns:p--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;heavytiger&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="c命名空间注入"><a href="#c命名空间注入" class="headerlink" title="c命名空间注入"></a>c命名空间注入</h4><p>c命名空间注入，可以通过构造器注入: constructor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--该c命名空间使用构造器方法注入，必须导入xmlns:c--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;heavytiger&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>创建bean时，可以指定bean的作用域，Spring框架支持六个作用域</p><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-singleton">singleton</a></td><td>(默认)将每个 Spring IoC 容器的单个 bean 配置范围限定为单个对象实例。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-prototype">prototype</a></td><td>将单个 bean 配置的作用域限定为任意数量的对象实例。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-request">request</a></td><td>将单个 bean 配置的范围限定为单个 HTTP 请求的生命周期。也就是说，每个 HTTP 请求都有一个在单个 bean 配置后面创建的 bean 实例。仅在可感知网络的 Spring <code>ApplicationContext</code>中有效。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-session">session</a></td><td>将单个 bean 配置的范围限定为 HTTP <code>Session</code>的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code>上下文中有效。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-application">application</a></td><td>将单个 bean 配置的范围限定为<code>ServletContext</code>的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code>上下文中有效。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket-stomp-websocket-scope">websocket</a></td><td>将单个 bean 配置的范围限定为<code>WebSocket</code>的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code>上下文中有效。</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单例模式每次都是同一个对象，原型模式每次都会产生一个值一摸一样的新对象，其余的均在web中可使用</p><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><p>自动装配时Spring满足Bean依赖的一种方式，简单来说，Spring会在上下文中自动寻找，并自动给Bean装配属性。</p><p>在Spring中有三种装配方式：</p><ol><li>在xml中显式地配置</li><li>在java中显示地配置</li><li>隐式自动装配bean</li></ol><h3 id="byName自动装配"><a href="#byName自动装配" class="headerlink" title="byName自动装配"></a>byName自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">proprety</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;heavytiger&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">本来需要写ref引用注入猫和狗对象，但是使用byName自动装配后，不再需要提供ref注入</span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>byName</code>会自动在容器的上下文中查找，和自己对应的set方法后面的值对应的beanId，但是此处把id改为cat1，dog2，将会报错，因为找不到和set方法后值对应的beanId了。</p><h3 id="byType自动装配"><a href="#byType自动装配" class="headerlink" title="byType自动装配"></a>byType自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog123&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat12345&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">proprety</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;heavytiger&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">本来需要写ref引用注入猫和狗对象，但是使用byType自动装配后，不再需要提供ref注入</span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>byType</code>会自动在容器的上下文中查找，和自己对象属性类型相同的bean，因此此时把id改为dog123和cat12345后，仍然可以找到。但是弊端是必须保证类型全局为一个，若有多个相同的类，必报错。</p><h3 id="注解自动装配"><a href="#注解自动装配" class="headerlink" title="注解自动装配"></a>注解自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.pojo.People&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先要导入<code>xmlns:context</code>和<code>xsi:schemaLocation</code>，然后使用<code>&lt;context:annotation-config/&gt;</code>开启注解支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;dog2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;<span class="comment">// 使用@Autowired添加注解自动装配</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 使用@Qualifier指定装配的beanId</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，甚至可以不需要set方法，因为可以通过反射直接拿到私有成员变量进行注入。</p><p><strong>@Autowired(required=(default)true/false)</strong></p><p><code>@Autowired</code>包含一个required参数，若<code>@Autowired(required=false)</code>表示允许在<code>beans.xml</code>中找不到该bean，此时也不会报错，和另一个注解<code>@Nullable</code>同理，表明字段可以为null。</p><p><strong>@Qualifier(value=”xxx”)</strong></p><p>如果环境很复杂的情况，例如有多个同一Type的bean，或beanId和属性名不一样时，可以使用<code>@Qualifier(value=&quot;xxx&quot;)</code>注解指定需要哪一个对象实例，进行自动装配</p><p><strong>@Resource(name=”xxx”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name=&quot;cat1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource(name=&quot;dog2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@Resource</code>注解也可以实现自动装配，name表示需要装配的beanId</p><p><strong>@Resource 和 @Autowired的区别：</strong></p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired通过byType的方式实现，设置required=false的情况下，允许找不到bean</li><li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType的方式实现，若两个都找不到，则会报错</li></ul><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p><strong>注解开发前提：</strong></p><ul><li>添加context依赖<ul><li>context:component-scan</li></ul></li><li>为类添加相应的注解<ul><li>导入aop包</li><li>spring-aop-4.0.0.RELEASE.jar</li></ul></li></ul><p>为了不再在IOC中一个个的声明类对象，首先根据每一个类的功能的不同，Spring中先规定了基于组件的注解，大致可以分为以下四种：</p><blockquote><p><strong>普通组件：@Component</strong></p><p>标识一个受Spring IOC容器管理的组件，我们也可以理解为是除了数据库层、业务逻辑层、控制层组件以外的其他组件使用的注解。</p><p><strong>持久化层组件：@Respository</strong></p><p>标识一个受Spring IOC容器管理的持久化层组件，一般就是用来标注数据库层</p><p><strong>业务逻辑层组件：@Service</strong></p><p>标识一个受Spring IOC容器管理的业务逻辑层组件，</p><p><strong>表述层控制器组件：@Controller</strong></p><p>标识一个受Spring IOC容器管理的表述层控制器组件。</p></blockquote><p>同时这几个注解后面也可以添加一些参数，比如比较常用的一个是注解的括号中加value属性，来表示这个组件在容器中的ID，如果不设置value值时，默认的ID是类名的全称（第一个字母小写）。</p><p>通过这四个注解我们首先就可以将所有的组件逐一分类，在这里有一点需要注意：<strong>事实上Spring并没有能力识别一个组件到底是不是它所标记的类型</strong></p><p><strong>扫描组件</strong></p><p>在<code>applicationConfig.xml</code>中配置了如下语句后，将扫描包下的注解，实现上下文：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.heavytiger&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用Java的方式配置Spring"><a href="#使用Java的方式配置Spring" class="headerlink" title="使用Java的方式配置Spring"></a>使用Java的方式配置Spring</h2><p>可以完全不适用Spring的xml配置，全权交给Java来完成！</p><p>JavaConfig是Spring的一个子项目，在Spring 4之后，成为了一个核心功能</p><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@value(&quot;heavytiger&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个也会使用Spring容器托管，注册到容器中，因为他本来就是一个@Component</span></span><br><span class="line"><span class="comment">// 表示是一个配置类，和beans.xml一样</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.heavytiger.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean，相当于一个bean标签</span></span><br><span class="line">    <span class="comment">// 方法的名字就相当于bean标签中的id名称</span></span><br><span class="line">    <span class="comment">// 方法的返回值就相当于标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigContext(Myconfig.class);</span><br><span class="line">        User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式(Proxy)"></a>代理模式(Proxy)</h2><p>代理模式是SpringAOP的底层，这样做的好处是:可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</p><p>这里使用到编程中的一个思想：不要随意去修改别人已经写好的代码或者方法，如果需改修改，可以通过代理的方式来扩展该方法。</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><strong>举例说明：</strong></p><ul><li>小明需要租房，但是他并没有直接取和房东交接，而是找到了中介所，让中介所和房东交接选房签合同，完成了很多很多的复杂操作，最后同样达成了租房的目的，这就是代理模式。</li></ul><p><strong>代理模式的好处：</strong></p><ul><li>可以使真实角色的操作更加纯粹，抽离其他业务，不需要再去关注其他的公共业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务发生拓展时，可以方便集中管理</li></ul><p><strong>代理模式的缺点：</strong></p><ul><li>一个真实角色会产生一个代理角色；代码量会翻倍，开发效率会变低</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理后，一般会进行附属操作</li><li>客户：访问代理对象的人</li></ul><p><strong>接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;<span class="comment">// 租房接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>真实角色：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东：我要出租房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理角色：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 房屋中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        contract();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介：我来帮忙签合同！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端访问代理角色：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顾客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Host());</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是被直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口–JDK动态代理</li><li>基于类–cglib</li><li>java字节码实现–javassist</li></ul></li></ul><p>需要了解两个类：<code>Proxy</code>代理，<code>InvocationHandler</code>调用处理程序</p><p><strong>InvocationHandler：</strong></p><p>在反射包下的一个接口，是由代理是你的调用处理程序所实现的接口。</p><p>每个代理实例都有一个关联的调用处理程序，在代理实例上调用此方法时，方法调用将被编码并分配到其调用处理程序的invoke方法。</p><p><strong>Proxy：</strong></p><p>Proxy提供了创建动态代理类和实例的静态方法，它也是由这些方法创建的所有动态代理类的超类。</p><h4 id="动态代理实例"><a href="#动态代理实例" class="headerlink" title="动态代理实例"></a>动态代理实例</h4><p><strong>首先实现动态代理类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;      <span class="comment">// 需要动态代理实现的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通过了动态代理！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现User类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现UserService接口及其实现类UserServiceImpl：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl实现了showUser: &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现Client客户端，通过代理实现showUser()方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.ProxyInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.service.impl.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;heavytiger&quot;</span>);</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        </span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();</span><br><span class="line">        proxy.showUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过了动态代理！</span><br><span class="line">UserServiceImpl实现了showUser: User&#123;name=&#x27;heavytiger&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h3><p>AOP(Aspect-Oriented Programming), 即 <strong>面向切面编程</strong>, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角。在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 **Aspect(切面)**。</p><p>概念很抽象，不妨看以下例子：</p><p>业务组件<code>BookService</code>，它有几个业务方法：</p><ul><li>createBook：添加新的Book；</li><li>updateBook：修改Book；</li><li>deleteBook：删除Book。</li></ul><p>但是对于每个业务方法，还需要在业务逻辑之外，进行安全检查，日志记录，事务处理等诸多事宜，代码会特别冗余，比如每个serviceImpl前后都加上log，加上安全审查等，而且对于这些新的需求(加log，check等，不太适合直接改变dao层和service层代码)，这些功能实际上“横跨”多个业务方法，为了实现这些功能，不得不在每个业务方法上重复编写代码。</p><p>一种可行的方式是使用Proxy模式，将某个功能，例如，权限检查，放入Proxy中；这种方式的缺点是比较麻烦，必须先抽取接口，然后，针对每个方法实现Proxy。</p><p>另一种方法是，既然<code>SecurityCheckBookService</code>的代码都是标准的Proxy样板代码，不如把权限检查视作一种切面（Aspect），把日志、事务也视为切面，然后，以某种自动化的方式，把切面织入到核心逻辑中，实现Proxy模式。</p><blockquote><p>如果我们以AOP的视角来编写上述业务，可以依次实现：</p><ol><li>核心逻辑，即BookService；</li><li>切面逻辑，即：</li><li>权限检查的Aspect；</li><li>日志的Aspect；</li><li>事务的Aspect。</li></ol><p>然后，以某种方式，让框架来把上述3个Aspect以Proxy的方式“织入”到<code>BookService</code>中，这样一来，就不必编写复杂而冗长的Proxy模式。</p></blockquote><h3 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h3><p>在Java平台上，对于AOP的织入，有3种方式：</p><ol><li>编译期：在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现织入；</li><li>类加载器：在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新“增强”；</li><li>运行期：目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态织入。</li></ol><p>最简单的方式是第三种，Spring的AOP实现就是基于JVM的动态代理。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过<a href="https://github.com/cglib/cglib">CGLIB</a>或者<a href="https://www.javassist.org/">Javassist</a>这些第三方库实现。</p><p>AOP技术看上去比较神秘，但实际上，它本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p><p>需要特别指出的是，AOP对于解决特定问题，例如事务管理非常有用，这是因为分散在各处的事务代码几乎是完全相同的，并且它们需要的参数（JDBC的Connection）也是固定的。另一些特定问题，如日志，就不那么容易实现，因为日志虽然简单，但打印日志的时候，经常需要捕获局部变量，如果使用AOP实现日志，我们只能输出固定格式的日志，因此，使用AOP时，必须适合特定的场景。</p><h3 id="AOP的实例"><a href="#AOP的实例" class="headerlink" title="AOP的实例"></a>AOP的实例</h3><p><strong>Maven导入依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写UserService接口和UserServiceImpl实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl实现了showUser: &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl实现了add，添加了一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl实现了delete，删除了一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl实现了update，修改了一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl实现了query，查找了一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写切面Aspect</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 接收的返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 执行目标对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 执行的对象方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 需要执行的目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 可能找不到方法，会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot;中的方法&quot;</span> + method.getName() + <span class="string">&quot;被执行了，返回值为：&quot;</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeLog</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 需要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 可能invoke找不到方法抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot;中的方法&quot;</span> + method.getName() + <span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写Spring配置文件，配置AOP：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop：需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点； expression表达式； execution(需要执行的位置 * * * * *)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.heavytiger.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.heavytiger.service.impl.*.*(..))&quot;/&gt;</code>中，<code>com.heavytiger.service.impl.*.*(..)</code>表示impl下的任何类中的任何方法，参数类型任意值都作为切面</p><table><thead><tr><th align="left">标识符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">execution()</td><td align="left">表达式的主体</td></tr><tr><td align="left">第一个<code>*</code>符号</td><td align="left">表示返回值的类型任意</td></tr><tr><td align="left">com.loongshawn.method.ces</td><td align="left">AOP所切的服务的包名，即，需要进行横切的业务类</td></tr><tr><td align="left">包名后面的<code>..</code></td><td align="left">表示当前包及子包</td></tr><tr><td align="left">第二个<code>*</code></td><td align="left">表示类名，<code>*</code>即所有类</td></tr><tr><td align="left"><code>.*(..)</code></td><td align="left">表示任何方法名，括号表示参数，两个点表示任何参数类型</td></tr></tbody></table><p><strong>编写测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heavytiger.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        userService.add();</span><br><span class="line">        userService.delete();</span><br><span class="line">        userService.update();</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法add被执行了</span><br><span class="line">UserServiceImpl实现了add，添加了一条记录</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法add被执行了，返回值为：null</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法delete被执行了</span><br><span class="line">UserServiceImpl实现了delete，删除了一条记录</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法delete被执行了，返回值为：null</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法update被执行了</span><br><span class="line">UserServiceImpl实现了update，修改了一条记录</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法update被执行了，返回值为：null</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法query被执行了</span><br><span class="line">UserServiceImpl实现了query，查找了一条记录</span><br><span class="line">com.heavytiger.service.impl.UserServiceImpl中的方法query被执行了，返回值为：null</span><br></pre></td></tr></table></figure><p>可以看到，在add、delete、update、query方法被调用的前后都通过切面调用了BeforeLog中的before和AfterLog中的AfterReturning方法，成功实现了AOP。</p><h3 id="使用自定义类实现AOP"><a href="#使用自定义类实现AOP" class="headerlink" title="使用自定义类实现AOP"></a>使用自定义类实现AOP</h3><p><strong>自定义切入点类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.diy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法被执行前--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法被执行后--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写Spring配置文件，配置AOP：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop：需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;Pc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.heavytiger.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;Pc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;Pc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编写测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heavytiger.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        userService.add();</span><br><span class="line">        userService.delete();</span><br><span class="line">        userService.update();</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---------方法被执行前--------</span><br><span class="line">UserServiceImpl实现了add，添加了一条记录</span><br><span class="line">---------方法被执行后--------</span><br><span class="line">---------方法被执行前--------</span><br><span class="line">UserServiceImpl实现了delete，删除了一条记录</span><br><span class="line">---------方法被执行后--------</span><br><span class="line">---------方法被执行前--------</span><br><span class="line">UserServiceImpl实现了update，修改了一条记录</span><br><span class="line">---------方法被执行后--------</span><br><span class="line">---------方法被执行前--------</span><br><span class="line">UserServiceImpl实现了query，查找了一条记录</span><br><span class="line">---------方法被执行后--------</span><br></pre></td></tr></table></figure><h3 id="通过注解实现AOP"><a href="#通过注解实现AOP" class="headerlink" title="通过注解实现AOP"></a>通过注解实现AOP</h3><p>在实际项目中，上面的写法很少使用，一般使用注解开发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.heavytiger.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SecurityContext.getCurrentUser() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;check failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本能实现无差别全覆盖，即某个包下面的所有Bean的所有方法都会被这个<code>check()</code>方法拦截。</p><h2 id="Spring整合Mybatis开发"><a href="#Spring整合Mybatis开发" class="headerlink" title="Spring整合Mybatis开发"></a>Spring整合Mybatis开发</h2><p><strong>首先导入依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnSpring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heavytiger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnSpring_02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resource<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写Spring配置，将DataSource，SqlSessionFactory，SqlSession，Mapper等工具bean直接一步配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring提供的datasource配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;37628981mm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定MyBatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/heavytiger/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--userMapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.heavytiger.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-config.xml名存实亡，其实可以不再需要编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.heavytiger.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写User类，UserMapper接口和UserMapperImpl实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写UserMapper.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义了一个命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heavytiger.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询所有User，Select语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定了方法--&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写测试类，直接从Spring配置文件中获得bean，得到Mapper工具类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heavytiger.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-dao.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">        <span class="keyword">for</span>(User user : userMapper.selectUsers()) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=2, name=&#x27;test&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=3, name=&#x27;admin&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=4, name=&#x27;m1&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;m2&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring声明式事务"><a href="#Spring声明式事务" class="headerlink" title="Spring声明式事务"></a>Spring声明式事务</h3><p>spring中数据库事务是通过<strong>PlatformTransactionManager</strong>进行管理的，通过它完成事务的创建、提交和回滚。<br>spring中约定，事务产生异常时回滚，无异常时会提交事务。</p><p>在spring中可以使用声明式事务和编程式事务，编程式事务几乎已经不再在企业中使用，因为代码可读性差。声明式事务又可以通过xml配置和注解方式来实现，主流的方法是使用<code>@Transaction</code>注解声明事务。使用声明式事务需要配置注解驱动，加入以下配置就可以使用@Transactional配置事务了。</p><p><code>&lt;tx:annotation-driver transaction-manager=&quot;transactionManager&quot;/&gt;</code></p><p><strong>配置spring处理事务的处理策略</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring事务管理器，mybatis使用DataSourceTransactionManager，hibernate使用HibernateTransactionManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;musesfrontdb&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启用注解方式定义事务时需要配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--也可以在配置类上加上注解@EnableTransactionManagement--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.bilibili.com/video/BV1WE411d7Dv">【狂神说Java】Spring5最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibili</a></p><p>[2] <a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/overview.html#overview-spring">Spring Framework 中文文档 - Spring 框架概述 | Docs4dev</a></p><p>[3] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1266263217140032">Spring开发 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUT自动化健康打卡</title>
      <link href="/articles/WUT%E8%87%AA%E5%8A%A8%E5%8C%96%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/"/>
      <url>/articles/WUT%E8%87%AA%E5%8A%A8%E5%8C%96%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>众所周知，WUT是一所为学生健康着想的大学，需要学生每日在晚8点前进行健康打卡，但是heavytiger同学经常摸鱼会忘记打卡，引发年级群中的“友好通知”，这样会让人很困扰，恰逢heavytiger同学某日逛B站时，发现一研究生学长通过python实现了自动化打卡，特研究一日，实现了自动化健康打卡。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="故事的开始"><a href="#故事的开始" class="headerlink" title="故事的开始"></a>故事的开始</h2><p>闲逛B站时发现一个实现自动化健康打卡的视频，恰好本人亦有困扰，于是点进去研究了以下，发现恰好是我校研究生学长（世界真小，视频地址如下，请一键三连：<a href="https://www.bilibili.com/video/BV1Qg411N7vS">Python 每天自动打卡小程序_哔哩哔哩_bilibili</a>）</p><p>该学长使用了<code>pyautogui</code>库模拟用户通过鼠标点击，登录微信，点击小程序进行签到，但是我的微信死活不支持一键登录，必须使用手机扫码，再加上本科生没有常年开机的电脑，通过bat实现有些不太现实，于是另辟蹊径，考虑使用python的requests库实现相同功能。</p><h3 id="分析健康打卡原理"><a href="#分析健康打卡原理" class="headerlink" title="分析健康打卡原理"></a>分析健康打卡原理</h3><p>使用手机进行抓包操作也不太方便，于是考虑使用电脑进行抓包，在windows笔电上登录微信后进入打卡小程序，使用Fiddler进行抓包，伪造证书后，实现了中间人攻击，获取到了https包并成功解包。</p><p><img src="image-20211209222108891.png" alt="image-20211209222108891"></p><p>小程序和后台使用json进行数据传输，text使用base64编码，很好解码</p><p>除了以上的几个Servlet之外，通过在github上搜轮子（轮子地址：<a href="https://github.com/xiaozhangtongx/WHUT-JKRBTB">xiaozhangtongx/WHUT-JKRBTB: 武汉理工大学健康打卡小脚本 (github.com)</a>），了解到本校的健康打卡小程序只能在微信端解绑定后才能再次打卡。</p><p><strong>具体流程如下：</strong></p><ol><li><p>请求<code>checkBind</code>接口实现登录操作，登陆成功后，返回会话id即<code>JSESSIONID</code>，之后的连接均通过该SessionId进行创建。</p></li><li><p>登录成功后，调用<code>bindUserInfo</code>接口查看绑定用户的信息，若此处没有在用户微信手机上解绑，后台应该持有一个用户微信的token导致mybatis查询不为空，导致后期的打卡<code>monitorRegister</code>接口失败</p><p>也可以在fiddler中找到自己的code值，模拟手机微信登录打卡，可以但没必要，因为门槛高。</p><p>（请忽视报错，不想修改截图了，啊吧啊吧）</p><p><img src="image-20211209224013336.png" alt="image-20211209224013336"></p></li><li><p>调用<code>monitorRegister</code>接口，通过该接口上传数据，内容大致如下（PS: 是否出省份的key是<code>isLeaveChengdu</code> 不愧是你啊WUT，也就你找这种外包了）：</p><p><img src="image-20211209231909197.png" alt="image-20211209231909197"></p></li><li><p>调用<code>cancelBind</code>接口，通过该接口传入SessionId取消绑定，否则同理，微信估计也登不上去了。</p></li></ol><h2 id="代码简介"><a href="#代码简介" class="headerlink" title="代码简介"></a>代码简介</h2><h3 id="完整目录结构"><a href="#完整目录结构" class="headerlink" title="完整目录结构"></a>完整目录结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">E:\COLLEGEDATA\打卡</span><br><span class="line">│  sign.py</span><br><span class="line">│</span><br><span class="line">├─jsons</span><br><span class="line">│      user.json</span><br><span class="line">│</span><br><span class="line">├─logs</span><br><span class="line">│      days.log</span><br><span class="line">│      error.log</span><br><span class="line">│      run.log</span><br><span class="line">│</span><br><span class="line">└─test</span><br><span class="line">        api.login.checkBind.json</span><br><span class="line">        monitorRegister.json</span><br><span class="line">        signin.json</span><br><span class="line">        testJson.py</span><br><span class="line">        testlog.log</span><br><span class="line">        打卡.saz</span><br></pre></td></tr></table></figure><p>其中重要部分包括：</p><p>打卡脚本<code>sign.py</code>；</p><p><code>jsons/user.json</code>用于存储用户信息（帮着把室友的也加进去了）；</p><p><code>logs/*.log</code>用来存储运行记录，<code>days.log</code>在linux下重定向保存运行输出与报错信息，<code>error.log</code>用来存储可预知的报错，即按程序中的设定输出异常信息，<code>run.log</code>用来存储运行时的正常日志。</p><p><strong>具体的代码不在过多介绍，就是简单的requests库调用</strong></p><blockquote><p><strong>可能出现的错误：</strong></p><p>可能出现使用requests请求时出现异常失败的情况，原因是，可能正在科学上网，使用了某端口进行转接作为代理服务器，此时需要手动设置：</p><p><code>win</code> -&gt; <code>键入Internet属性</code> -&gt; <code>点击连接</code> -&gt; <code>点击局域网设置</code> -&gt; <code>禁用代理服务器，选择自动检测设置</code></p><p><img src="image-20211210000041198.png" alt="image-20211210000041198"></p><p>配置成如下所示，即可使用requests库发送请求：</p><p><img src="image-20211210000129630.png" alt="image-20211210000129630"></p></blockquote><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机User-Agent</span></span><br><span class="line">useragentlist = [</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.14) Gecko/20110218 AlexaToolbar/alxf-2.0 Firefox/3.6.14&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机温度</span></span><br><span class="line">temperature = [<span class="string">&quot;36\&quot;C~36.5°C&quot;</span>, <span class="string">&quot;36.5°C~36.9°C&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sn, idCard</span>):</span></span><br><span class="line">        self.sn = sn</span><br><span class="line">        self.idCard = idCard</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            user = User(<span class="built_in">str</span>(dct[<span class="string">&quot;sn&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;idCard&quot;</span>])) </span><br><span class="line">            <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">return</span> dct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readJson</span>():</span></span><br><span class="line">    fileName = <span class="string">&#x27;jsons/user.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        userList = json.load(f)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(userList, <span class="built_in">dict</span>):</span><br><span class="line">        users = userList[<span class="string">&quot;users&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(users)):</span><br><span class="line">        users[i] = User.parseJSON(users[i])    </span><br><span class="line">    <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeError</span>(<span class="params">logs</span>):</span></span><br><span class="line">    fileName = <span class="string">&#x27;logs/error.log&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime()) + <span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        f.write(logs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeLog</span>(<span class="params">logs</span>):</span></span><br><span class="line">    fileName = <span class="string">&#x27;logs/run.log&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime()) + <span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        f.write(logs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_sessionId</span>(<span class="params">json_data</span>):</span></span><br><span class="line">    url = <span class="string">&quot;https://zhxg.whut.edu.cn/yqtjwx/api/login/checkBind&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://servicewechat.com/wxa0738e54aae84423/17/page-frame.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X-Tag&quot;</span>: <span class="string">&quot;flyio&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep - alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;zhxg.whut.edu.cn&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers[<span class="string">&#x27;User-Agent&#x27;</span>] = random.choice(useragentlist)</span><br><span class="line">    r = requests.post(url=url, headers=headers, json=json_data)</span><br><span class="line">    result = json.loads(r.text)</span><br><span class="line">    sessionId = result[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;sessionId&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&quot;status&quot;</span>] != <span class="literal">True</span> :</span><br><span class="line">        <span class="comment"># 说明登录失败</span></span><br><span class="line">        writeError(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(json_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Error: 登录失败\n&quot;</span>)</span><br><span class="line">        writeError(<span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        writeLog(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(json_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Data: 登录成功\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(sessionId)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_bindUserInfo</span>(<span class="params">sessionId, json_data</span>):</span></span><br><span class="line">    url = <span class="string">&quot;https://zhxg.whut.edu.cn/yqtjwx/api/login/bindUserInfo&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://servicewechat.com/wxa0738e54aae84423/17/page-frame.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;JSESSIONID=%s&quot;</span> % (sessionId),</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X-Tag&quot;</span>: <span class="string">&quot;flyio&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep - alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;zhxg.whut.edu.cn&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers[<span class="string">&#x27;User-Agent&#x27;</span>] = random.choice(useragentlist)</span><br><span class="line">    r = requests.post(url=url, headers=headers, json=json_data)</span><br><span class="line">    result = json.loads(r.text)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&quot;status&quot;</span>] != <span class="literal">True</span> :</span><br><span class="line">        <span class="comment"># 说明此时已在其他地方登录</span></span><br><span class="line">        writeError(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(json_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Error: 已被绑定\n&quot;</span>)</span><br><span class="line">        writeError(<span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        writeLog(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(json_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Data: 未被绑定\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_monitorRegister</span>(<span class="params">sessionId, user_data, province, city, county, street</span>):</span></span><br><span class="line">    currentAddress = <span class="built_in">str</span>(province) + <span class="built_in">str</span>(city) + <span class="built_in">str</span>(county) + <span class="built_in">str</span>(street)</span><br><span class="line">    url = <span class="string">&quot;https://zhxg.whut.edu.cn/yqtjwx/./monitorRegister&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://servicewechat.com/wxa0738e54aae84423/17/page-frame.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;JSESSIONID=%s&quot;</span> % (sessionId),</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X-Tag&quot;</span>: <span class="string">&quot;flyio&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep - alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;zhxg.whut.edu.cn&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers[<span class="string">&#x27;User-Agent&#x27;</span>] = random.choice(useragentlist)</span><br><span class="line">    json_data = &#123;</span><br><span class="line">        <span class="string">&quot;diagnosisName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;relationWithOwn&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;currentAddress&quot;</span>: currentAddress,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;healthInfo&quot;</span>: <span class="string">&quot;正常&quot;</span>,</span><br><span class="line">        <span class="string">&quot;isDiagnosis&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;isFever&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;isInSchool&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;isLeaveChengdu&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;isSymptom&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: random.choice(temperature),</span><br><span class="line">        <span class="string">&quot;province&quot;</span>: province,</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: city,</span><br><span class="line">        <span class="string">&quot;county&quot;</span>: county</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url, headers=headers, json=json_data)</span><br><span class="line">    result = json.loads(r.text)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&quot;status&quot;</span>] != <span class="literal">True</span> :</span><br><span class="line">        <span class="comment"># 说明每日打卡失败</span></span><br><span class="line">        writeError(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(user_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Error: 打卡失败\n&quot;</span>)</span><br><span class="line">        writeError(<span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        writeLog(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(user_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Data: 打卡成功\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cancelBind</span>(<span class="params">sessionId, json_data</span>):</span></span><br><span class="line">    url = <span class="string">&quot;https://zhxg.whut.edu.cn/yqtjwx/api/login/cancelBind&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://servicewechat.com/wxa0738e54aae84423/17/page-frame.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;JSESSIONID=%s&quot;</span> % (sessionId),</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep - alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;zhxg.whut.edu.cn&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers[<span class="string">&#x27;User-Agent&#x27;</span>] = random.choice(useragentlist)</span><br><span class="line">    r = requests.post(url=url, headers=headers)</span><br><span class="line">    result = json.loads(r.text)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&quot;status&quot;</span>] != <span class="literal">True</span> :</span><br><span class="line">        <span class="comment"># 说明解绑失败</span></span><br><span class="line">        writeError(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(json_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Error: 解绑失败\n&quot;</span>)</span><br><span class="line">        writeError(<span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        writeLog(<span class="string">&quot;StudentId: &quot;</span> + <span class="built_in">str</span>(json_data[<span class="string">&quot;sn&quot;</span>]) + <span class="string">&quot; SessionId: &quot;</span> + <span class="built_in">str</span>(sessionId) + <span class="string">&quot; Data: 解绑成功\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    users = readJson()</span><br><span class="line">    FLAG = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">        data = &#123;<span class="string">&#x27;sn&#x27;</span>: u.sn, <span class="string">&#x27;idCard&#x27;</span>: u.idCard&#125;</span><br><span class="line">        <span class="built_in">id</span> = request_sessionId(data)</span><br><span class="line">        request_bindUserInfo(<span class="built_in">id</span>, data)</span><br><span class="line">        res = request_monitorRegister(<span class="built_in">id</span>, data, <span class="string">&quot;湖北省&quot;</span>, <span class="string">&quot;武汉市&quot;</span>, <span class="string">&quot;洪山区&quot;</span>, <span class="string">&quot;工大路&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> res == <span class="literal">False</span>:</span><br><span class="line">            <span class="comment"># 说明打卡失败</span></span><br><span class="line">            <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time.localtime()) + <span class="string">&quot;: 学号为: &quot;</span> + <span class="built_in">str</span>(u.sn) + <span class="string">&quot;的用户出现错误！&quot;</span>)</span><br><span class="line">            FLAG = <span class="literal">False</span>      </span><br><span class="line">        cancelBind(<span class="built_in">id</span>, data)</span><br><span class="line">    <span class="keyword">if</span> FLAG == <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time.localtime()) + <span class="string">&quot;: 每日填报完成，但存在错误！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time.localtime()) + <span class="string">&quot;: 每日填报完成！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><p>服务器是之前几十块买的阿里云的服务器，运行<code>CentOS 7</code>操作系统</p><p>使用Xshell，Xftp等工具将文件传入到服务器中，测试完毕后，使用<code>crontab</code>设置为定时任务</p><p>使用命令<code>crontab -e</code>，将使用vi打开定时任务清单，自行配置即可，使用如下语句，设定每天中午12：45分执行命令，将报错以及运行结果输出到<code>./logs/days.log</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~]# crontab -l</span><br><span class="line">45 12 * * * cd /usr/local/src/daySign &amp;&amp; ./sign.py &gt;&gt; ./logs/days.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>多次打卡会提示打卡失败，可在<code>error.log</code>中查看：</p><p><img src="image-20211210000948325.png" alt="image-20211210000948325"></p><p>打卡时的响应数据会存储在<code>run.log</code>中，可以查看：</p><p><img src="image-20211210001054621.png" alt="image-20211210001054621"></p><p>学校的服务器凌晨运维，凌晨手动测试为啥提交不上的时候不小心把log删除了，因此上面没有打卡成功数据，成功时会在<code>run.log</code>增加一条记录<strong>打卡成功</strong></p><p>若有用户在手机上登录未解绑，<code>error.log</code>中会报错，otherData中报MyBatis调Mapper中查询selectOne错误，出现问题时，自然懂得都懂。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.yiibai.com/linux/crontab.html">crontab命令（Linux定时任务） - Linux命令大全教程™ (yiibai.com)</a></p><p>[2] <a href="https://www.bilibili.com/video/BV1Qg411N7vS">Python 每天自动打卡小程序_哔哩哔哩_bilibili</a></p><p>[3] <a href="https://github.com/xiaozhangtongx/WHUT-JKRBTB">xiaozhangtongx/WHUT-JKRBTB: 武汉理工大学健康打卡小脚本 (github.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫初探</title>
      <link href="/articles/python%E7%88%AC%E8%99%AB%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/python%E7%88%AC%E8%99%AB%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>大三上学期一直在当牛马，选了特别多懂得都懂的课，其中有一门课程是《软件工程经济学》，这门课程要求完成一篇《人人都是产品经理》的读后感和实现一个符合要求的爬虫的课设，于是抽了一个下午研究python爬虫，作品太过简陋本不好意思发，但担心下次造轮子的时候代码不知道烂在哪个文件夹里面了……所以特此记录。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="python爬虫简介"><a href="#python爬虫简介" class="headerlink" title="python爬虫简介"></a>python爬虫简介</h2><p>爬虫：一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息。</p><p>使用场景(我能想到的)：挖掘数据进行数据可视化分析，获取各种评论信息，书籍信息，文件批量下载等</p><h2 id="python爬虫流程"><a href="#python爬虫流程" class="headerlink" title="python爬虫流程"></a>python爬虫流程</h2><p>Python 爬虫架构主要由五个部分组成，分别是调度器、URL管理器、网页下载器、网页解析器、应用程序（爬取的有价值数据）。</p><p>    <strong>1.调度器</strong>：相当于一台电脑的CPU，主要负责调度URL管理器、下载器、解析器之间的协调工作。</p><p>    <strong>2.URL管理器</strong>：包括待爬取的URL地址和已爬取的URL地址，防止重复抓取URL和循环抓取URL，实现URL管理器主要用三种方式，通过内存、数据库、缓存数据库来实现。</p><p>    <strong>3.网页下载器</strong>：通过传入一个URL地址来下载网页，将网页转换成一个字符串，网页下载器有urllib2（Python官方基础模块）包括需要登录、代理、和cookie，requests(第三方包)</p><p>    <strong>4.网页解析器</strong>：将一个网页字符串进行解析，可以按照我们的要求来提取出我们有用的信息，也可以根据DOM树的解析方式来解析。网页解析器有正则表达式（直观，将网页转成字符串通过模糊匹配的方式来提取有价值的信息，当文档比较复杂的时候，该方法提取数据的时候就会非常的困难）、html.parser（Python自带的）、beautifulsoup（第三方插件，可以使用Python自带的html.parser进行解析，也可以使用lxml进行解析，相对于其他几种来说要强大一些）、lxml（第三方插件，可以解析 xml 和 HTML），html.parser 和 beautifulsoup 以及 lxml 都是以 DOM 树的方式进行解析的。</p><p>    <strong>5.应用程序</strong>：就是从网页中提取的有用数据组成的一个应用。</p><blockquote><p><strong>总结如下：</strong></p><p>指定请求页面的选择策略 -&gt; 调度器负责处理访问关系 -&gt; URL管理避免重复访问 -&gt; requests库执行下载 -&gt; BeautifulSoup负责解析dom树，允许访问标签 -&gt; 过滤器进行过滤去除脏数据 -&gt; 数据持久化</p></blockquote><h2 id="爬虫功能介绍"><a href="#爬虫功能介绍" class="headerlink" title="爬虫功能介绍"></a>爬虫功能介绍</h2><p>课程要求设计一个人才推广系统，完成以下目标：</p><blockquote><p>根据调查，目前市场上以宣传人才引进政策，促进大学生择业就业为主题的互联网产品大多为政府官方网站，资讯推广网站和微信类产品。官方网站是各地政府推出的向广大人民群众发布政策的窗口，由于过于具有权威性 ，其上的内容往往无法成为受大学生群体关注的热点信息，起不到良好的宣传作用。 相关的资讯推广网站通过发布由编辑对相关政策文件进行的解读与二次创作内容对人才引进政策进行宣传推广，此种方法无法针对性的对特定的大学生群体起到科普作用。相关产品在微信可分为公众号（如武汉本地宝）和小程序（如上海落户小助手）两种，公众号主打信息推送，为用户提供官网政策文件浏览 接口和相关资讯内容，通过简单的规则匹配模式引导用户对于相关信息进行检索，无法进行智能化的信息推荐；小程序主打辅助功能，如可帮助用户进行落户积分计算、记录落户流程等，此类产品工具感过强，无法启发用户更深入的了解人才引进政策 …</p></blockquote><p>翻译成为人话就是：</p><blockquote><p>在一个叫做本地宝的网站爬取与人才落户相关的所有信息，整理归纳所有信息，进行持久化，以便日后进行数据推送。(有一说一本地宝真的惨，突然就从WUT的IP来了亿堆高并发，而且初学者普遍是怎么暴力怎么来，好在该网站没有设置反爬虫，ip池，代理等功能都未使用到)</p></blockquote><p>具体的要求如下：</p><blockquote><ol><li>人才落户链接爬取</li><li>获取目标一线城市对应链接</li><li>拼接搜索url</li><li>获取详情页链接</li><li>爬取具体政策内容</li><li>脏数据清理</li><li>数据持久化</li></ol></blockquote><p><strong>注意：该爬虫代码仅供课程设计使用，行为目的为且只为学习，发布到互联网仅供日后学习参考，若有侵权请联系本人删除！</strong></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>共包含如下类：</p><h4 id="province"><a href="#province" class="headerlink" title="province"></a>province</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">province</span>:</span>     <span class="comment"># 用provinces（list对象）存储province</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, province_name, city_list = <span class="literal">None</span></span>):</span></span><br><span class="line">        self.province_name = province_name      <span class="comment">#存储省份的名字</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> city_list :</span><br><span class="line">            self.city_list = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.city_list = city_list      <span class="comment"># 存储城市列表，其中放city对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            p = province(<span class="built_in">str</span>(dct[<span class="string">&quot;province_name&quot;</span>]), dct[<span class="string">&quot;city_list&quot;</span>])</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> dct</span><br></pre></td></tr></table></figure><p>province类包含省份的信息，储存省份名称以及省份下的城市列表</p><p>类中包含构造函数和解析JSON字典的方法</p><h4 id="city"><a href="#city" class="headerlink" title="city"></a>city</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">city</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, city, href, searchUrl = <span class="string">&#x27;&#x27;</span>, detailUrl = <span class="literal">None</span></span>):</span></span><br><span class="line">        self.city = city</span><br><span class="line">        self.href = href</span><br><span class="line">        self.searchUrl = searchUrl</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> detailUrl :</span><br><span class="line">            self.detailUrl = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.detailUrl = detailUrl      <span class="comment"># ArrayList存放不超过10个详情页信息即urlContext</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            p = city(<span class="built_in">str</span>(dct[<span class="string">&quot;city&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;href&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;searchUrl&quot;</span>]), dct[<span class="string">&quot;detailUrl&quot;</span>])</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> dct</span><br></pre></td></tr></table></figure><p>city类中包含城市信息，存储该城市的名称，对应的详情页的地址，以及对应的搜索查询的URL，后期通过拼接将欲查询内容附到URL后，最终获取查询结果的前十个页面，返回对应的URL</p><p>类中包含构造函数和解析JSON字典的方法</p><h4 id="urlContext"><a href="#urlContext" class="headerlink" title="urlContext"></a>urlContext</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urlContext</span>:</span>       <span class="comment"># url文章详情</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, urlName, href, text = <span class="string">&#x27;&#x27;</span>, content = <span class="string">&#x27;&#x27;</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.urlName = urlName</span><br><span class="line">        self.href = href</span><br><span class="line">        self.text = text</span><br><span class="line">        self.content = content      <span class="comment"># 存储tag方便取用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            p = urlContext(<span class="built_in">str</span>(dct[<span class="string">&quot;urlName&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;href&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;text&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;content&quot;</span>]))</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> dct</span><br></pre></td></tr></table></figure><p>urlContext类中包含查询城市的详情信息，存储索引到的页面的相关数据</p><p>类中包含构造函数和解析JSON字典的方法</p><h4 id="download"><a href="#download" class="headerlink" title="download"></a>download</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">download</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.server = <span class="string">&#x27;http://www.bendibao.com/&#x27;</span></span><br><span class="line">        self.target = <span class="string">&#x27;http://www.bendibao.com/index.htm&#x27;</span> </span><br><span class="line">        self.search = <span class="string">&#x27;http://sou.%s.bendibao.com/cse/search&#x27;</span></span><br><span class="line">        self.search_question = <span class="string">&quot;人才落户&quot;</span></span><br><span class="line">        self.proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span> : <span class="string">&#x27;close&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.provinces = []     <span class="comment">#用于存储所有的省份</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明：搜索相关落户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_search_url</span>(<span class="params">self</span>) :</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.provinces :</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p, province) :</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> p.city_list :</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(c, city) :</span><br><span class="line">                        <span class="comment"># print(c.href)</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            tmp_html = requests.get(url = c.href, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)</span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> connError:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(connError).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> reqExcep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. &quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(reqExcep).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        tmp_html.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">                        body_bf = BeautifulSoup(tmp_html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                        <span class="keyword">try</span>: </span><br><span class="line">                            <span class="comment"># 查找s_id</span></span><br><span class="line">                            <span class="built_in">input</span> = body_bf.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;s&quot;</span>,  <span class="string">&#x27;type&#x27;</span>: <span class="string">&quot;hidden&quot;</span>&#125;)</span><br><span class="line">                            <span class="comment"># print(input)</span></span><br><span class="line">                            s_value = <span class="built_in">input</span>.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">                            <span class="keyword">if</span>(s_value == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">                                <span class="keyword">continue</span></span><br><span class="line">                            <span class="comment"># print(s_value)</span></span><br><span class="line">                            <span class="comment"># 查找搜索URL</span></span><br><span class="line">                            <span class="comment">#header &gt; div.search_nav &gt; form</span></span><br><span class="line">                            tmpurl = body_bf.select(<span class="string">&#x27;div.search_nav &gt; form&#x27;</span>)</span><br><span class="line">                            url_value = tmpurl[<span class="number">0</span>].get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">                            <span class="comment"># print(url_value)</span></span><br><span class="line">                            <span class="comment"># 将数据存入city.searchUrl</span></span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> excep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. Arguments:\n&#123;1!r&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(excep).__name__, excep.args)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        params = &#123;</span><br><span class="line">                            <span class="string">&quot;s&quot;</span> : s_value,</span><br><span class="line">                            <span class="string">&quot;q&quot;</span> : self.search_question</span><br><span class="line">                        &#125;</span><br><span class="line">                        str_params = urllib.parse.urlencode((params))</span><br><span class="line">                        final_url = url_value + <span class="string">&quot;?&quot;</span> + str_params</span><br><span class="line">                        c.searchUrl = final_url</span><br><span class="line">                        <span class="built_in">print</span>(c.searchUrl)</span><br><span class="line">                    time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.2</span>))    <span class="comment"># random防封</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明，获取详情页面的人才落户</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_url</span>(<span class="params">self</span>) :</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.provinces:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p, province):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> p.city_list :</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(c, city) <span class="keyword">and</span>  c.searchUrl != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        <span class="comment">#print(c.href)</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            tmp_html = requests.get(url = c.searchUrl, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)      <span class="comment"># 访问搜索到的结果</span></span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> connError:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(connError).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> reqExcep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. &quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(reqExcep).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        tmp_html.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">                        body_bf = BeautifulSoup(tmp_html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                        <span class="keyword">try</span>: </span><br><span class="line">                            <span class="comment"># 查找搜索URL</span></span><br><span class="line">                            <span class="comment">#results &gt; div:nth-child(3) &gt; h3 &gt; a</span></span><br><span class="line">                            tmpurl = body_bf.select(<span class="string">&#x27;div.result.f.s0 &gt; h3 &gt; a&#x27;</span>)</span><br><span class="line">                            <span class="keyword">for</span> u <span class="keyword">in</span> tmpurl:</span><br><span class="line">                                <span class="built_in">print</span>(u)</span><br><span class="line">                                <span class="comment"># 获取样例：&lt;a rpos=&quot;&quot; cpos=&quot;title&quot; href=&quot;http://bj.bendibao.com/news/2018322/249126.shtm&quot; target=&quot;_blank&quot;&gt;北京&lt;em&gt;人才&lt;/em&gt;引进&lt;em&gt;落户政策&lt;/em&gt; 哪些&lt;em&gt;人才&lt;/em&gt;符合落户条件?- 北京本地宝&lt;/a&gt;</span></span><br><span class="line">                                du = u.get(<span class="string">&#x27;href&#x27;</span>)      <span class="comment">#获取标签</span></span><br><span class="line">                                <span class="built_in">print</span>(<span class="built_in">str</span>(u.get_text()))            <span class="comment"># 注意若需要获得的标签内容中含有其他标签，例如&lt;em&gt;标签，需要使用get_text获取内容</span></span><br><span class="line">                                ds = <span class="built_in">str</span>(u.get_text()).replace(<span class="string">&#x27;&lt;em&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&lt;/em&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)          <span class="comment"># 获取名称，去除中间的&lt;em&gt;&lt;/em&gt;标签对</span></span><br><span class="line">                                ds = re.sub(<span class="string">&#x27;- [\u4e00-\u9fa5]*本地宝$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ds)                <span class="comment"># 清洗数据，将数据中的- xx本地宝去掉</span></span><br><span class="line">                                tmp_detailUrl = urlContext(ds, du)          <span class="comment"># 封装数据</span></span><br><span class="line">                                c.detailUrl.append(tmp_detailUrl)           <span class="comment"># 将数据聚集为list</span></span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> excep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. Arguments:\n&#123;1!r&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(excep).__name__, excep.args)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                    time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.2</span>))    <span class="comment"># random防封</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 函数说明，获取落户网址链接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        req = requests.get(url = self.target, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)</span><br><span class="line">        req.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">        html = req.text</span><br><span class="line">        <span class="comment">#print(html)</span></span><br><span class="line">        div_bf = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        div = div_bf.findAll(<span class="string">&#x27;div&#x27;</span>, class_ = <span class="string">&#x27;city-list&#x27;</span>)</span><br><span class="line">        dl_bf = BeautifulSoup(<span class="built_in">str</span>(div[<span class="number">0</span>]), <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        dl = dl_bf.find_all(<span class="string">&#x27;dl&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each_dl <span class="keyword">in</span> dl:</span><br><span class="line">            dt_bf = BeautifulSoup(<span class="built_in">str</span>(each_dl), <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">            dt = dt_bf.find(<span class="string">&#x27;dt&#x27;</span>)       <span class="comment"># 获取省份名称</span></span><br><span class="line">            aProvince = province(<span class="built_in">str</span>(dt.string))    <span class="comment"># 创建一个省份</span></span><br><span class="line">            a = dt_bf.findAll(<span class="string">&#x27;a&#x27;</span>)      <span class="comment"># 获取a标签</span></span><br><span class="line">            <span class="keyword">for</span> each_a <span class="keyword">in</span> a:</span><br><span class="line">                aCity = city(each_a.string, each_a.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">                <span class="comment"># print(aCity.city + aCity.href)</span></span><br><span class="line">                aProvince.city_list.append(aCity)       <span class="comment"># 添加城市到省份中，便于索引</span></span><br><span class="line">                <span class="comment"># print(len(aProvince.city_list))</span></span><br><span class="line">            self.provinces.append(aProvince)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 匹配城市，进行索引，若city_name为ALL则匹配所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_content</span>(<span class="params">self, city_name</span>) :</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(city_name, <span class="built_in">str</span>) <span class="keyword">and</span> city_name.upper == <span class="string">&#x27;ALL&#x27;</span>:</span><br><span class="line">            city_name = <span class="literal">True</span>        <span class="comment"># 保证遍历所有数据</span></span><br><span class="line">        <span class="keyword">for</span> tmp_province <span class="keyword">in</span> self.provinces:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(tmp_province, province):</span><br><span class="line">                <span class="keyword">for</span> tmp_city <span class="keyword">in</span> tmp_province.city_list :</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(tmp_city, city) <span class="keyword">and</span> (tmp_city.city == city_name <span class="keyword">or</span> city_name):</span><br><span class="line">                        <span class="keyword">for</span> tmp_detail <span class="keyword">in</span> tmp_city.detailUrl :</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">isinstance</span>(tmp_detail, urlContext) :</span><br><span class="line">                                <span class="keyword">try</span>:</span><br><span class="line">                                <span class="comment">#   print(tmp_detail.href)</span></span><br><span class="line">                                    tmp_html = requests.get(url = tmp_detail.href, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)      <span class="comment"># 访问搜索到的结果</span></span><br><span class="line">                                <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> connError:</span><br><span class="line">                                    message = <span class="string">&quot;An exception of type &#123;0&#125; occurred.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(connError).__name__)</span><br><span class="line">                                    <span class="built_in">print</span>(message)</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> reqExcep:</span><br><span class="line">                                    message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. &quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(reqExcep).__name__)</span><br><span class="line">                                    <span class="built_in">print</span>(message)</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                tmp_html.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">                                body_bf = BeautifulSoup(tmp_html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                                <span class="comment"># print(body_bf)</span></span><br><span class="line">                                <span class="keyword">try</span> :</span><br><span class="line">                                    <span class="comment"># div#bo.content</span></span><br><span class="line">                                    tmp_content = body_bf.select(<span class="string">&#x27;div#bo.content&#x27;</span>)</span><br><span class="line">                                    <span class="comment"># 清除脏数据</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_element <span class="keyword">in</span> tmp_content[<span class="number">0</span>](text=<span class="keyword">lambda</span> text: <span class="built_in">isinstance</span>(text, Comment)):</span><br><span class="line">                                        tmp_element.extract()       <span class="comment"># 清除注释</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_div <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&quot;div&quot;</span>): </span><br><span class="line">                                        tmp_div.decompose()         <span class="comment"># 清除广告推荐</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_script <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;script&#x27;</span>):</span><br><span class="line">                                        tmp_script.decompose()      <span class="comment"># 清除js</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_a <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">                                        tmp_a.decompose()           <span class="comment"># 清除链接</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_p_vci <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;view_city_index&#x27;</span>):</span><br><span class="line">                                        tmp_p_vci.decompose()       <span class="comment"># 清除网站推广</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_span <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;span&#x27;</span>):</span><br><span class="line">                                        tmp_span.decompose()        <span class="comment"># 清除微信推广</span></span><br><span class="line">                                    <span class="comment"># 清除脏数据</span></span><br><span class="line">                                    <span class="comment"># 存储数据</span></span><br><span class="line">                                    tmp_detail.text = <span class="built_in">str</span>(tmp_content[<span class="number">0</span>].get_text().strip())</span><br><span class="line">                                    </span><br><span class="line">                                    <span class="built_in">list</span> = <span class="built_in">str</span>(tmp_content[<span class="number">0</span>].contents)</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="built_in">list</span> ,<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">                                    tmp_detail.content = <span class="built_in">str</span>(tmp_content[<span class="number">0</span>].contents)</span><br><span class="line">                                <span class="keyword">except</span> Exception <span class="keyword">as</span> excep :</span><br><span class="line">                                    message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. Arguments:\n&#123;1!r&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(excep).__name__, excep.args)</span><br><span class="line">                                    <span class="built_in">print</span>(message)</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                            time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.2</span>))    <span class="comment"># random防封</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明，保存数据到json中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_to_json</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 注意此处需要进行封装，封装成字典类型，即键值对后再能写入json</span></span><br><span class="line">            json.dump(<span class="built_in">dict</span>(&#123;<span class="string">&#x27;provinces&#x27;</span>: self.provinces&#125;),          </span><br><span class="line">                        f, <span class="comment"># File对象</span></span><br><span class="line">                        indent=<span class="number">4</span>,  <span class="comment"># 空格缩进符，写入多行</span></span><br><span class="line">                        <span class="comment">#sort_keys=True,        # 键的排序</span></span><br><span class="line">                        default=<span class="keyword">lambda</span> obj: obj.__dict__, </span><br><span class="line">                        ensure_ascii=<span class="literal">False</span>      <span class="comment"># 显示中文</span></span><br><span class="line">                    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明，从json中读取数据，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_from_json</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">dict</span>) :</span><br><span class="line">                self.provinces = data[<span class="string">&#x27;provinces&#x27;</span>]      <span class="comment"># 没问题</span></span><br><span class="line">        <span class="keyword">for</span> i_province <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.provinces)):</span><br><span class="line">            self.provinces[i_province] = province.parseJSON(self.provinces[i_province])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.provinces[i_province], province):</span><br><span class="line">                <span class="keyword">for</span> i_city <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.provinces[i_province].city_list)):</span><br><span class="line">                    self.provinces[i_province].city_list[i_city] = city.parseJSON(self.provinces[i_province].city_list[i_city])</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.provinces[i_province].city_list[i_city], city):</span><br><span class="line">                        <span class="keyword">for</span> i_detail <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.provinces[i_province].city_list[i_city].detailUrl)):</span><br><span class="line">                            self.provinces[i_province].city_list[i_city].detailUrl[i_detail] = urlContext.parseJSON(self.provinces[i_province].city_list[i_city].detailUrl[i_detail])</span><br></pre></td></tr></table></figure><p>download类共有以下相关函数：</p><p><code>get_search_url</code>: <em>函数说明，获取所有城市相关落户信息的搜索URL</em></p><p><code>get_detail_url</code>: <em>函数说明，获取详情页面的人才落户</em></p><p><code>get_download_url</code>: <em>函数说明，获取落户相关信息的网址链接</em></p><p><code>get_detail_content</code>: <em>函数说明，匹配城市，进行索引，若city_name为ALL则匹配所有数据</em></p><p><code>write_to_json</code>: <em>函数说明，保存对象数据到json中，进行序列化操作</em></p><p><code>read_from_json</code>: <em>函数说明，从json中读取数据，进行反序列化操作</em></p><h3 id="程序执行流程介绍"><a href="#程序执行流程介绍" class="headerlink" title="程序执行流程介绍"></a>程序执行流程介绍</h3><p>爬取的网页：<a href="http://www.bendibao.com/index.htm">本地宝-爱上本地宝，生活会更好. (bendibao.com)</a></p><ol><li>通过<code>get_download_url</code>获取该页面的所有<code>a</code>标签，将这些信息作为province对象存入download对象中的provinces列表中</li></ol><p><img src="image-20211209213721433.png" alt="image-20211209213721433"></p><ol start="2"><li>进入该省份页面，通过<code>get_search_url</code>获取搜索框搜索的URL，此处以北京为例</li></ol><p><img src="image-20211209214711647.png" alt="image-20211209214711647"></p><ol start="3"><li>拼接搜索，通过<code>get_detail_url</code>获取搜索页面内容，本次设计要求使用 <strong>“人才落户”</strong> 关键词进行搜索</li></ol><p><img src="image-20211209215127027.png" alt="image-20211209215127027"></p><ol start="4"><li>通过<code>get_detail_content</code>获取所有URL地址的详细内容，进行存储</li></ol><p><img src="image-20211209215232714.png" alt="image-20211209215232714"></p><ol start="5"><li>最后使用<code>write_to_json</code>保存数据到<code>./data/provinces.json</code>中，需要时可以使用<code>read_from_json</code>从文件中读取</li></ol><h3 id="完整目录结构"><a href="#完整目录结构" class="headerlink" title="完整目录结构"></a>完整目录结构</h3><p>包括爬虫文件和data文件夹下的json数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:\PROGRAMDEMO\LEARN_PYTHON</span><br><span class="line">├─.vscode</span><br><span class="line">│      settings.json</span><br><span class="line">│</span><br><span class="line">└─bendibao</span><br><span class="line">   │  getLuoHu.py</span><br><span class="line">   │</span><br><span class="line">   └─data</span><br><span class="line">         provinces.json</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> Comment </span><br><span class="line"><span class="keyword">import</span> requests, json, random, time, urllib, re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">province</span>:</span>     <span class="comment"># 用provinces（list对象）存储province</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, province_name, city_list = <span class="literal">None</span></span>):</span></span><br><span class="line">        self.province_name = province_name      <span class="comment">#存储省份的名字</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> city_list :</span><br><span class="line">            self.city_list = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.city_list = city_list      <span class="comment"># 存储城市列表，其中放city对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            p = province(<span class="built_in">str</span>(dct[<span class="string">&quot;province_name&quot;</span>]), dct[<span class="string">&quot;city_list&quot;</span>])</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> dct</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">city</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, city, href, searchUrl = <span class="string">&#x27;&#x27;</span>, detailUrl = <span class="literal">None</span></span>):</span></span><br><span class="line">        self.city = city</span><br><span class="line">        self.href = href</span><br><span class="line">        self.searchUrl = searchUrl</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> detailUrl :</span><br><span class="line">            self.detailUrl = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.detailUrl = detailUrl      <span class="comment"># ArrayList存放不超过10个详情页信息即urlContext</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            p = city(<span class="built_in">str</span>(dct[<span class="string">&quot;city&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;href&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;searchUrl&quot;</span>]), dct[<span class="string">&quot;detailUrl&quot;</span>])</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> dct</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urlContext</span>:</span>       <span class="comment"># url文章详情</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, urlName, href, text = <span class="string">&#x27;&#x27;</span>, content = <span class="string">&#x27;&#x27;</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.urlName = urlName</span><br><span class="line">        self.href = href</span><br><span class="line">        self.text = text</span><br><span class="line">        self.content = content      <span class="comment"># 存储tag方便取用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseJSON</span>(<span class="params">dct</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dct, <span class="built_in">dict</span>):</span><br><span class="line">            p = urlContext(<span class="built_in">str</span>(dct[<span class="string">&quot;urlName&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;href&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;text&quot;</span>]), <span class="built_in">str</span>(dct[<span class="string">&quot;content&quot;</span>]))</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> dct</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">download</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.server = <span class="string">&#x27;http://www.bendibao.com/&#x27;</span></span><br><span class="line">        self.target = <span class="string">&#x27;http://www.bendibao.com/index.htm&#x27;</span> </span><br><span class="line">        self.search = <span class="string">&#x27;http://sou.%s.bendibao.com/cse/search&#x27;</span></span><br><span class="line">        self.search_question = <span class="string">&quot;人才落户&quot;</span></span><br><span class="line">        self.proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span> : <span class="string">&#x27;close&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.provinces = []     <span class="comment">#用于存储所有的省份</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明：搜索相关落户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_search_url</span>(<span class="params">self</span>) :</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.provinces :</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p, province) :</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> p.city_list :</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(c, city) :</span><br><span class="line">                        <span class="comment"># print(c.href)</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            tmp_html = requests.get(url = c.href, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)</span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> connError:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(connError).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> reqExcep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. &quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(reqExcep).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        tmp_html.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">                        body_bf = BeautifulSoup(tmp_html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                        <span class="keyword">try</span>: </span><br><span class="line">                            <span class="comment"># 查找s_id</span></span><br><span class="line">                            <span class="built_in">input</span> = body_bf.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;s&quot;</span>,  <span class="string">&#x27;type&#x27;</span>: <span class="string">&quot;hidden&quot;</span>&#125;)</span><br><span class="line">                            <span class="comment"># print(input)</span></span><br><span class="line">                            s_value = <span class="built_in">input</span>.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">                            <span class="keyword">if</span>(s_value == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">                                <span class="keyword">continue</span></span><br><span class="line">                            <span class="comment"># print(s_value)</span></span><br><span class="line">                            <span class="comment"># 查找搜索URL</span></span><br><span class="line">                            <span class="comment">#header &gt; div.search_nav &gt; form</span></span><br><span class="line">                            tmpurl = body_bf.select(<span class="string">&#x27;div.search_nav &gt; form&#x27;</span>)</span><br><span class="line">                            url_value = tmpurl[<span class="number">0</span>].get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">                            <span class="comment"># print(url_value)</span></span><br><span class="line">                            <span class="comment"># 将数据存入city.searchUrl</span></span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> excep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. Arguments:\n&#123;1!r&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(excep).__name__, excep.args)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        params = &#123;</span><br><span class="line">                            <span class="string">&quot;s&quot;</span> : s_value,</span><br><span class="line">                            <span class="string">&quot;q&quot;</span> : self.search_question</span><br><span class="line">                        &#125;</span><br><span class="line">                        str_params = urllib.parse.urlencode((params))</span><br><span class="line">                        final_url = url_value + <span class="string">&quot;?&quot;</span> + str_params</span><br><span class="line">                        c.searchUrl = final_url</span><br><span class="line">                        <span class="built_in">print</span>(c.searchUrl)</span><br><span class="line">                    time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.2</span>))    <span class="comment"># random防封</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明，获取详情页面的人才落户</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_url</span>(<span class="params">self</span>) :</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.provinces:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p, province):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> p.city_list :</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(c, city) <span class="keyword">and</span>  c.searchUrl != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        <span class="comment">#print(c.href)</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            tmp_html = requests.get(url = c.searchUrl, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)      <span class="comment"># 访问搜索到的结果</span></span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> connError:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(connError).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> reqExcep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. &quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(reqExcep).__name__)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        tmp_html.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">                        body_bf = BeautifulSoup(tmp_html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                        <span class="keyword">try</span>: </span><br><span class="line">                            <span class="comment"># 查找搜索URL</span></span><br><span class="line">                            <span class="comment">#results &gt; div:nth-child(3) &gt; h3 &gt; a</span></span><br><span class="line">                            tmpurl = body_bf.select(<span class="string">&#x27;div.result.f.s0 &gt; h3 &gt; a&#x27;</span>)</span><br><span class="line">                            <span class="keyword">for</span> u <span class="keyword">in</span> tmpurl:</span><br><span class="line">                                <span class="built_in">print</span>(u)</span><br><span class="line">                                <span class="comment"># 获取样例：&lt;a rpos=&quot;&quot; cpos=&quot;title&quot; href=&quot;http://bj.bendibao.com/news/2018322/249126.shtm&quot; target=&quot;_blank&quot;&gt;北京&lt;em&gt;人才&lt;/em&gt;引进&lt;em&gt;落户政策&lt;/em&gt; 哪些&lt;em&gt;人才&lt;/em&gt;符合落户条件?- 北京本地宝&lt;/a&gt;</span></span><br><span class="line">                                du = u.get(<span class="string">&#x27;href&#x27;</span>)      <span class="comment">#获取标签</span></span><br><span class="line">                                <span class="built_in">print</span>(<span class="built_in">str</span>(u.get_text()))            <span class="comment"># 注意若需要获得的标签内容中含有其他标签，例如&lt;em&gt;标签，需要使用get_text获取内容</span></span><br><span class="line">                                ds = <span class="built_in">str</span>(u.get_text()).replace(<span class="string">&#x27;&lt;em&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&lt;/em&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)          <span class="comment"># 获取名称，去除中间的&lt;em&gt;&lt;/em&gt;标签对</span></span><br><span class="line">                                ds = re.sub(<span class="string">&#x27;- [\u4e00-\u9fa5]*本地宝$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ds)                <span class="comment"># 清洗数据，将数据中的- xx本地宝去掉</span></span><br><span class="line">                                tmp_detailUrl = urlContext(ds, du)          <span class="comment"># 封装数据</span></span><br><span class="line">                                c.detailUrl.append(tmp_detailUrl)           <span class="comment"># 将数据聚集为list</span></span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> excep:</span><br><span class="line">                            message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. Arguments:\n&#123;1!r&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(excep).__name__, excep.args)</span><br><span class="line">                            <span class="built_in">print</span>(message)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                    time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.2</span>))    <span class="comment"># random防封</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 函数说明，获取落户网址链接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        req = requests.get(url = self.target, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)</span><br><span class="line">        req.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">        html = req.text</span><br><span class="line">        <span class="comment">#print(html)</span></span><br><span class="line">        div_bf = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        div = div_bf.findAll(<span class="string">&#x27;div&#x27;</span>, class_ = <span class="string">&#x27;city-list&#x27;</span>)</span><br><span class="line">        dl_bf = BeautifulSoup(<span class="built_in">str</span>(div[<span class="number">0</span>]), <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        dl = dl_bf.find_all(<span class="string">&#x27;dl&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each_dl <span class="keyword">in</span> dl:</span><br><span class="line">            dt_bf = BeautifulSoup(<span class="built_in">str</span>(each_dl), <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">            dt = dt_bf.find(<span class="string">&#x27;dt&#x27;</span>)       <span class="comment"># 获取省份名称</span></span><br><span class="line">            aProvince = province(<span class="built_in">str</span>(dt.string))    <span class="comment"># 创建一个省份</span></span><br><span class="line">            a = dt_bf.findAll(<span class="string">&#x27;a&#x27;</span>)      <span class="comment"># 获取a标签</span></span><br><span class="line">            <span class="keyword">for</span> each_a <span class="keyword">in</span> a:</span><br><span class="line">                aCity = city(each_a.string, each_a.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">                <span class="comment"># print(aCity.city + aCity.href)</span></span><br><span class="line">                aProvince.city_list.append(aCity)       <span class="comment"># 添加城市到省份中，便于索引</span></span><br><span class="line">                <span class="comment"># print(len(aProvince.city_list))</span></span><br><span class="line">            self.provinces.append(aProvince)</span><br><span class="line">            <span class="comment"># 测试代码</span></span><br><span class="line">        <span class="comment"># print(&#x27;start:&#x27;)</span></span><br><span class="line">        <span class="comment"># for p in self.provinces:</span></span><br><span class="line">        <span class="comment">#     if isinstance(p, province) :</span></span><br><span class="line">        <span class="comment">#         print(p.province_name , &#x27;:&#x27;)</span></span><br><span class="line">        <span class="comment">#     for c in p.city_list:</span></span><br><span class="line">        <span class="comment">#         if isinstance(c, city) :</span></span><br><span class="line">        <span class="comment">#             print(c.city, &#x27;:&#x27;, c.href)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 匹配城市，进行索引，若city_name为ALL则匹配所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_content</span>(<span class="params">self, city_name</span>) :</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(city_name, <span class="built_in">str</span>) <span class="keyword">and</span> city_name.upper == <span class="string">&#x27;ALL&#x27;</span>:</span><br><span class="line">            city_name = <span class="literal">True</span>        <span class="comment"># 保证遍历所有数据</span></span><br><span class="line">        <span class="keyword">for</span> tmp_province <span class="keyword">in</span> self.provinces:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(tmp_province, province):</span><br><span class="line">                <span class="keyword">for</span> tmp_city <span class="keyword">in</span> tmp_province.city_list :</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(tmp_city, city) <span class="keyword">and</span> (tmp_city.city == city_name <span class="keyword">or</span> city_name):</span><br><span class="line">                        <span class="keyword">for</span> tmp_detail <span class="keyword">in</span> tmp_city.detailUrl :</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">isinstance</span>(tmp_detail, urlContext) :</span><br><span class="line">                                <span class="keyword">try</span>:</span><br><span class="line">                                <span class="comment">#   print(tmp_detail.href)</span></span><br><span class="line">                                    tmp_html = requests.get(url = tmp_detail.href, headers = self.headers, proxies = self.proxies, timeout = <span class="number">5</span>)      <span class="comment"># 访问搜索到的结果</span></span><br><span class="line">                                <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> connError:</span><br><span class="line">                                    message = <span class="string">&quot;An exception of type &#123;0&#125; occurred.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(connError).__name__)</span><br><span class="line">                                    <span class="built_in">print</span>(message)</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> reqExcep:</span><br><span class="line">                                    message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. &quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(reqExcep).__name__)</span><br><span class="line">                                    <span class="built_in">print</span>(message)</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                tmp_html.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">                                body_bf = BeautifulSoup(tmp_html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                                <span class="comment"># print(body_bf)</span></span><br><span class="line">                                <span class="keyword">try</span> :</span><br><span class="line">                                    <span class="comment"># div#bo.content</span></span><br><span class="line">                                    tmp_content = body_bf.select(<span class="string">&#x27;div#bo.content&#x27;</span>)</span><br><span class="line">                                    <span class="comment"># 清除脏数据</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_element <span class="keyword">in</span> tmp_content[<span class="number">0</span>](text=<span class="keyword">lambda</span> text: <span class="built_in">isinstance</span>(text, Comment)):</span><br><span class="line">                                        tmp_element.extract()       <span class="comment"># 清除注释</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_div <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&quot;div&quot;</span>): </span><br><span class="line">                                        tmp_div.decompose()         <span class="comment"># 清除广告推荐</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_script <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;script&#x27;</span>):</span><br><span class="line">                                        tmp_script.decompose()      <span class="comment"># 清除js</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_a <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">                                        tmp_a.decompose()           <span class="comment"># 清除链接</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_p_vci <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;view_city_index&#x27;</span>):</span><br><span class="line">                                        tmp_p_vci.decompose()       <span class="comment"># 清除网站推广</span></span><br><span class="line">                                    <span class="keyword">for</span> tmp_span <span class="keyword">in</span> tmp_content[<span class="number">0</span>].find_all(<span class="string">&#x27;span&#x27;</span>):</span><br><span class="line">                                        tmp_span.decompose()        <span class="comment"># 清除微信推广</span></span><br><span class="line">                                    <span class="comment"># 清除脏数据</span></span><br><span class="line">                                    <span class="comment"># 存储数据</span></span><br><span class="line">                                    tmp_detail.text = <span class="built_in">str</span>(tmp_content[<span class="number">0</span>].get_text().strip())</span><br><span class="line">                                    </span><br><span class="line">                                    <span class="built_in">list</span> = <span class="built_in">str</span>(tmp_content[<span class="number">0</span>].contents)</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="built_in">list</span> ,<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">                                    tmp_detail.content = <span class="built_in">str</span>(tmp_content[<span class="number">0</span>].contents)</span><br><span class="line">                                <span class="keyword">except</span> Exception <span class="keyword">as</span> excep :</span><br><span class="line">                                    message = <span class="string">&quot;An exception of type &#123;0&#125; occurred. Arguments:\n&#123;1!r&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(excep).__name__, excep.args)</span><br><span class="line">                                    <span class="built_in">print</span>(message)</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                            time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.2</span>))    <span class="comment"># random防封</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明，保存数据到json中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_to_json</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="comment"># json_object = json.dumps(dict(&#123;&#x27;provinces&#x27;: self.provinces&#125;),</span></span><br><span class="line">        <span class="comment"># default=lambda obj: obj.__dict__</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">        <span class="comment"># print(json_object)</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 注意此处需要进行封装，封装成字典类型，即键值对后再能写入json</span></span><br><span class="line">            json.dump(<span class="built_in">dict</span>(&#123;<span class="string">&#x27;provinces&#x27;</span>: self.provinces&#125;),          </span><br><span class="line">                        f, <span class="comment"># File对象</span></span><br><span class="line">                        indent=<span class="number">4</span>,  <span class="comment"># 空格缩进符，写入多行</span></span><br><span class="line">                        <span class="comment">#sort_keys=True,        # 键的排序</span></span><br><span class="line">                        default=<span class="keyword">lambda</span> obj: obj.__dict__, </span><br><span class="line">                        ensure_ascii=<span class="literal">False</span>      <span class="comment"># 显示中文</span></span><br><span class="line">                    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 函数说明，从json中读取数据，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_from_json</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">dict</span>) :</span><br><span class="line">                self.provinces = data[<span class="string">&#x27;provinces&#x27;</span>]      <span class="comment"># 没问题</span></span><br><span class="line">        <span class="keyword">for</span> i_province <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.provinces)):</span><br><span class="line">            <span class="comment"># print(self.provinces[i_province])</span></span><br><span class="line">            <span class="comment"># print(province.parseJSON(self.provinces[i_province]))</span></span><br><span class="line">            self.provinces[i_province] = province.parseJSON(self.provinces[i_province])</span><br><span class="line">            <span class="comment"># print(self.provinces[i_province].province_name)</span></span><br><span class="line">            <span class="comment"># print(self.provinces[i_province].city_list)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.provinces[i_province], province):</span><br><span class="line">                <span class="keyword">for</span> i_city <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.provinces[i_province].city_list)):</span><br><span class="line">                    self.provinces[i_province].city_list[i_city] = city.parseJSON(self.provinces[i_province].city_list[i_city])</span><br><span class="line">                    <span class="comment"># print(self.provinces[i_province].city_list[i_city].city)</span></span><br><span class="line">                    <span class="comment"># print(self.provinces[i_province].city_list[i_city].href)</span></span><br><span class="line">                    <span class="comment"># print(self.provinces[i_province].city_list[i_city].searchUrl)</span></span><br><span class="line">                    <span class="comment"># print(self.provinces[i_province].city_list[i_city].detailUrl)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.provinces[i_province].city_list[i_city], city):</span><br><span class="line">                        <span class="keyword">for</span> i_detail <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.provinces[i_province].city_list[i_city].detailUrl)):</span><br><span class="line">                            self.provinces[i_province].city_list[i_city].detailUrl[i_detail] = urlContext.parseJSON(self.provinces[i_province].city_list[i_city].detailUrl[i_detail])</span><br><span class="line">                            <span class="comment"># print(self.provinces[i_province].city_list[i_city].detailUrl[i_detail].urlName)</span></span><br><span class="line">                            <span class="comment"># print(self.provinces[i_province].city_list[i_city].detailUrl[i_detail].href)</span></span><br><span class="line">                            <span class="comment"># print(self.provinces[i_province].city_list[i_city].detailUrl[i_detail].text)</span></span><br><span class="line">                            <span class="comment"># print(self.provinces[i_province].city_list[i_city].detailUrl[i_detail].content)</span></span><br><span class="line">                            <span class="comment"># print(type(self.provinces[i_province].city_list[i_city].detailUrl[i_detail]))</span></span><br><span class="line">                            <span class="comment"># print(self.provinces[i_province].city_list[i_city].detailUrl[i_detail].text)    </span></span><br><span class="line">        <span class="comment">#print(self.provinces)</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span> : </span><br><span class="line">    dl = download() </span><br><span class="line">    <span class="comment"># dl.read_from_json(&#x27;./bendibao/data/provinces.json&#x27;)</span></span><br><span class="line">    <span class="comment"># dl.write_to_json(&#x27;./bendibao/data/provinces.json&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;1.get from web\n2.get from local json\nyour choice:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">        dl.get_download_url()</span><br><span class="line">        dl.get_search_url()</span><br><span class="line">        dl.get_detail_url()</span><br><span class="line">        dl.get_detail_content(<span class="string">&quot;ALL&quot;</span>)</span><br><span class="line">        dl.write_to_json(<span class="string">&#x27;./bendibao/data/provinces.json&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span> :</span><br><span class="line">        dl.read_from_json(<span class="string">&#x27;./bendibao/data/provinces.json&#x27;</span>)</span><br><span class="line">        dl.get_detail_content(<span class="string">&quot;ALL&quot;</span>)</span><br><span class="line">        dl.write_to_json(<span class="string">&#x27;./bendibao/data/provinces.json&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="数据持久化样式"><a href="#数据持久化样式" class="headerlink" title="数据持久化样式"></a>数据持久化样式</h2><p>由于<code>provinces.json</code>中内容过多，只截图部分展示：</p><p>省份以及城市数据：</p><p><img src="image-20211209215936514.png" alt="image-20211209215936514"></p><p>城市详细数据：</p><p><img src="image-20211209215846460.png" alt="image-20211209215846460"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2">网络爬虫 - 维基百科，自由的百科全书 (wikipedia.org)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis基础学习</title>
      <link href="/articles/Mybatis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/Mybatis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO (Plain Old Java Objects，普通老式 Java 对象) 为数据库中的记录。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><h3 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h3><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO (Plain Old Java Objects，普通老式 Java 对象) 为数据库中的记录。</p></blockquote><h3 id="MyBatis功能概况"><a href="#MyBatis功能概况" class="headerlink" title="MyBatis功能概况"></a>MyBatis功能概况</h3><blockquote><p>与其他<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84">对象关系映射</a>框架不同，MyBatis没有将<a href="https://zh.wikipedia.org/wiki/Java">Java</a><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">对象</a>与<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a>表关联起来，而是将Java方法与<a href="https://zh.wikipedia.org/wiki/SQL">SQL</a>语句关联。MyBatis允许用户充分利用<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a>的各种功能，例如存储过程、<a href="https://zh.wikipedia.org/wiki/%E8%A7%86%E5%9B%BE">视图</a>、各种复杂的查询以及某数据库的专有特性。如果要对遗留数据库、不规范的数据库进行操作，或者要完全控制SQL的执行，MyBatis是一个不错的选择。</p><p>与<a href="https://zh.wikipedia.org/wiki/JDBC">JDBC</a>相比，MyBatis简化了相关代码：SQL语句在一行代码中就能执行。MyBatis提供了一个映射引擎，声明式的把SQL语句执行结果与对象树映射起来。通过使用一种内建的类XML表达式语言，或者使用<a href="https://zh.wikipedia.org/wiki/Apache_Velocity">Apache Velocity</a>集成的插件，SQL语句可以被动态的生成。</p><p>MyBatis与<a href="https://zh.wikipedia.org/wiki/Spring_Framework">Spring Framework</a>和<a href="https://zh.wikipedia.org/w/index.php?title=Google_Guice&action=edit&redlink=1">Google Guice</a>集成，这使开发者免于依赖性问题。</p><p>MyBatis支持声明式数据缓存（declarative data caching）。当一条SQL语句被标记为“可缓存”后，首次执行它时从数据库获取的所有数据会被存储在一段<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98">高速缓存</a>中，今后执行这条语句时就会从高速缓存中读取结果，而不是再次命中数据库。MyBatis提供了基于 Java HashMap 的默认缓存实现，以及用于与<a href="https://zh.wikipedia.org/w/index.php?title=OSCache&action=edit&redlink=1">OSCache</a>、<a href="https://zh.wikipedia.org/w/index.php?title=Ehcache&action=edit&redlink=1">Ehcache</a>、<a href="https://zh.wikipedia.org/w/index.php?title=Hazelcast&action=edit&redlink=1">Hazelcast</a>和<a href="https://zh.wikipedia.org/wiki/Memcached">Memcached</a>连接的默认连接器。MyBatis还提供<a href="https://zh.wikipedia.org/wiki/API">API</a>供其他缓存实现使用。</p></blockquote><h3 id="MyBatis优点"><a href="#MyBatis优点" class="headerlink" title="MyBatis优点"></a>MyBatis优点</h3><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><h2 id="第一个MyBatis程序"><a href="#第一个MyBatis程序" class="headerlink" title="第一个MyBatis程序"></a>第一个MyBatis程序</h2><p>流程：搭建环境（导入MyBatis） ——&gt; 编写代码 ——&gt; 单元测试</p><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>搭建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入样例数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`, `name`, `pwd`) </span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;dcm&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure><p>IDEA中新建Maven项目：</p><p>将新建项目后的src源文件夹删除，将该项目作为父工程进行使用</p><p>工程目录如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\PROGRAMDEMO\LEARNMYBATIS</span><br><span class="line">│  </span><br><span class="line">|pom.xml</span><br><span class="line">│</span><br><span class="line">└─.idea</span><br><span class="line">        .gitignore</span><br><span class="line">        compiler.xml</span><br><span class="line">        jarRepositories.xml</span><br><span class="line">        misc.xml</span><br><span class="line">        workspace.xml</span><br></pre></td></tr></table></figure><p>导入Maven依赖：</p><ul><li>JUnit</li><li>MyBatis</li><li>Mysql-connector</li></ul><p><strong>LearnMyBaits: pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heavytiger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnMyBatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h4><p>使用Maven创建一个子项目，继承了父项目，不需要再次导包</p><p><strong>MyBaits_01: pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--继承了父项目，不需要再次进行导包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnMyBatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heavytiger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBaits_01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写MyBatis核心配置文件"><a href="#编写MyBatis核心配置文件" class="headerlink" title="编写MyBatis核心配置文件"></a>编写MyBatis核心配置文件</h4><p>XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。</p><p>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p><p><strong>在resource下建立mybatis-config.xml配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理，默认使用JDBC的事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;37628981mm&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每一个Mapper.xml都需要在核心配置文件中进行配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/heavytiger/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写MyBatis核心工具类"><a href="#编写MyBatis核心工具类" class="headerlink" title="编写MyBatis核心工具类"></a>编写MyBatis核心工具类</h4><p>MyBatis应用通过SqlSessionFactory实例为核心，通过SqlSessionFactoryBuilder进行构建，SqlSessionFactoryBuilder需要读取2.2.2中的核心配置文件<code>mybatis-config.xml</code>，可以使用如下代码进行构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><p>之后，即可以使用SqlSessionFactory获取SqlSession实例，从而执行所需的SQL命令，然而这样做稍显复杂，需要再次进行封装，将其做成核心工具类。</p><p><strong>MyBatisUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SqlSessionFactory   ——&gt;   sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 获取SqlSessionFactory工具类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试获取SqlSessionFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><p><strong>User.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写Dao接口"><a href="#编写Dao接口" class="headerlink" title="编写Dao接口"></a>编写Dao接口</h4><p><strong>UserDao.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有的用户，封装成列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写Mapper-xml"><a href="#编写Mapper-xml" class="headerlink" title="编写Mapper.xml"></a>编写Mapper.xml</h4><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义了一个命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heavytiger.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询所有User，Select语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定了方法--&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果此处的xml中写了中文注释，则必须把<code>encoding=&quot;UTF-8&quot;</code>改成<code>encoding=&quot;UTF8&quot;</code>；否则会报错</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><strong>单元测试代码如下所示：</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiger.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heavytiger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.heavytiger.utils.MyBatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步，连接数据库，获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession =  MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">// 第二步，方式一：通过getMapper()获取userDao对象，通过该对象调用getUserList方法</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>大概率会遇到该报错，无法找到UserMapper.xml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.io.IOException: Could not find resource com/heavytiger/dao/UserMapper.xml</span><br></pre></td></tr></table></figure><p>原因是，使用Maven创建的工程，class文件会放置在Target目录下，而<code>.xml</code>文件不会自动被生成到Target目录中，因此在运行该工程的时候，无法找到UserMapper.xml</p><p><strong>解决方案如下所示：</strong></p><p>在Maven的pom.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resource<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>若遇到报错乱码情况：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 5; columnNumber: 5;</span></span></span><br></pre></td></tr></table></figure><p>原因是Mapper.xml中出现了中文，需要将编码<code>encoding=&quot;UTF-8&quot;</code>改成<code>encoding=&quot;UTF8&quot;</code>；</p><p>最终修改完成后可以得到正确的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=1, name=&#x27;dcm&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=2, name=&#x27;test&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=3, name=&#x27;admin&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="CRUD教程"><a href="#CRUD教程" class="headerlink" title="CRUD教程"></a>CRUD教程</h2><h3 id="CRUD的基本流程"><a href="#CRUD的基本流程" class="headerlink" title="CRUD的基本流程"></a>CRUD的基本流程</h3><blockquote><ol><li>编写接口</li><li>编写对应的mapper.xml中的sql语句</li><li>单元测试，确保能够正常使用Dao层，确保增删改提交了事务</li></ol></blockquote><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p><strong>namespace中的包名要和Dao/mapper接口的包名一致！</strong></p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>选择、查询语句；</p><ul><li>id：对应的namespace包中的方法名，例如：<code>List&lt;User&gt; getUserList();</code>方法，此处对因为getUserList</li><li>resultType：Sql语句执行的返回值</li><li>parameterType：提供的参数类型</li></ul><p><strong>示例：</strong></p><p>添加功能，根据id查询用户的信息</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询用户的信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id 需要查询的用户的id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 根据id查询到的用户id，若不存在返回null；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--带参数的查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM mybatis.user</span><br><span class="line">    WHERE id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>#&#123;id&#125;</code>表示使用方法形式参数<code>Integer id</code>中的<code>id</code>作为参数注入sql语句中</p><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一步，连接数据库，获取SqlSession对象</span></span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(userMapper.getUserById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(userMapper.getUserById(<span class="number">4</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>可以使用try-with-resourcse语句，保证资源在每次出错后也会自动关闭</strong>，放入到try(statement)中的语句需要实现AutoClosable接口，实际上类似于自动添上了finally{resource.close();}</p></blockquote><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=1, name=&#x27;dcm&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">null</span><br></pre></td></tr></table></figure><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>插入数据语句;</p><ul><li>需要提交事务，否则改动不会成功</li></ul><p><strong>示例：</strong></p><p>添加功能，新增用户记录</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 像数据库中插入用户的记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 要添加的User对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个int值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--带参数的插入记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO mybatis.user(id, name, pwd)</span><br><span class="line">    VALUES (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的增删改都需要添加事务，否则不会自动提交</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User tmp = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">        System.out.println(userMapper.addUser(tmp));</span><br><span class="line">        sqlSession.commit();        <span class="comment">// 一定要提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库中的记录</span></span><br><span class="line">1dcm123456</span><br><span class="line">2test123456</span><br><span class="line">3admin123456</span><br><span class="line">4add12345678</span><br></pre></td></tr></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>修改数据</p><p><strong>示例：</strong></p><p>添加功能，更新用户的信息</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新数据库中的用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 要修改的记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 改动的数据行数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Integer <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--带参数的修改记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    UPDATE mybatis.user</span><br><span class="line">    SET name=#&#123;name&#125;,</span><br><span class="line">        pwd=#&#123;pwd&#125;</span><br><span class="line">    WHERE id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的增删改都需要添加事务，否则不会自动提交</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User tmp = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;add&amp;update&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(userMapper.updateUser(tmp));</span><br><span class="line">        sqlSession.commit();        <span class="comment">// 一定要提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库中的记录</span></span><br><span class="line">1dcm123456</span><br><span class="line">2test123456</span><br><span class="line">3admin123456</span><br><span class="line">4add&amp;update123456</span><br></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>删除数据</p><p><strong>示例：</strong></p><p>添加功能，删除用户的记录</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除数据库中的用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 要删除的记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除的数据行数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Integer <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除用户的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    DELETE</span><br><span class="line">    FROM mybatis.user</span><br><span class="line">    WHERE id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的增删改都需要添加事务，否则不会自动提交</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(userMapper.deleteUser(<span class="number">1</span>));</span><br><span class="line">        System.out.println(userMapper.deleteUser(<span class="number">4</span>));</span><br><span class="line">        System.out.println(userMapper.deleteUser(<span class="number">5</span>));</span><br><span class="line">        sqlSession.commit();        <span class="comment">// 一定要提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库中的记录</span></span><br><span class="line">2test123456</span><br><span class="line">3admin123456</span><br></pre></td></tr></table></figure><h3 id="使用Map传输数据"><a href="#使用Map传输数据" class="headerlink" title="使用Map传输数据"></a>使用Map传输数据</h3><p><strong>示例：</strong></p><p>添加功能，通过map传输数据，使得其中的数据作为用户信息插入到数据库中</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除数据库中的用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 要删除的记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除的数据行数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Integer <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用map添加用户信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUserWithMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO mybatis.user(id, name, pwd)</span><br><span class="line">    VALUES (#&#123;mapId1&#125;, #&#123;mapName1&#125;, #&#123;mapPwd1&#125;),</span><br><span class="line">           (#&#123;mapId2&#125;, #&#123;mapName2&#125;, #&#123;mapPwd2&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的增删改都需要添加事务，否则不会自动提交</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUserWithMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;mapId1&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapName1&quot;</span>, <span class="string">&quot;m1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapPwd1&quot;</span>, <span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapId2&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapName2&quot;</span>, <span class="string">&quot;m2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapPwd2&quot;</span>, <span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">        System.out.println(userMapper.addUserWithMap(map));</span><br><span class="line">        sqlSession.commit();        <span class="comment">// 一定要提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库中的记录</span></span><br><span class="line">2test123456</span><br><span class="line">3admin123456</span><br><span class="line">4m112345678</span><br><span class="line">5m212345678</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明Mybatis通过了反射等机制，查询到相应的数据并执行了注入或者获取，因此名称一定要对应，否则将无法查询</p><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，应该考虑使用Map</p><p>Map传递参数<code>map.push(key, value)</code>，直接在sql中通过<code>#&#123;key&#125;</code>取出即可使用，很便捷！</p><p>只有一个基本类时，可以直接使用在sql中获取</p><p>多个参数考虑使用<strong>Map</strong>或者<strong>注解</strong></p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p><strong>示例：</strong></p><p>添加功能，可以使用模糊查询，查询到相关的用户姓名；</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊查询数据库中的用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 模糊查询的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查询到的结果数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Integer <span class="title">getUserLike</span><span class="params">(String value)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模糊查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM mybatis.user</span><br><span class="line">    WHERE name LIKE #&#123;value&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        String value = <span class="string">&quot;%m%&quot;</span>;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getUserLike(value);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=3, name=&#x27;admin&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=4, name=&#x27;m1&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;m2&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br></pre></td></tr></table></figure><p>模糊查询需要防止SQL注入攻击，可以有以下解决方案：</p><ol><li>Java代码执行中，直接传入通配符<code>%param%</code>，例如：<code>List&lt;User&gt; userList = userMapper.getUserLike(&quot;%&quot;+ value + &quot;%&quot;);</code></li><li>在sql拼接中使用通配符，例如：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mybatis.user</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> &quot;%&quot;#&#123;<span class="keyword">value</span>&#125;&quot;%&quot;;</span><br></pre></td></tr></table></figure><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><p>详情文档：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments">mybatis – MyBatis 3 | 配置</a></p><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><ul><li>MyBatis的配置文件一般叫做<code>mybatis-config.xml</code></li><li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li></ul><p>配置文档的顶层结构如下：</p><blockquote><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a></li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></li></ul></blockquote><h3 id="环境配置-environments"><a href="#环境配置-environments" class="headerlink" title="环境配置 (environments)"></a>环境配置 (environments)</h3><p><strong>MyBatis 可以配置成适应多种环境，不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p><p>想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推。</p><p><strong>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。</strong></p><p>例如mybatis-config.xml中写入了如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;37628981mm&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;37628981mm&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以接受环境配置的两个方法签名是，选中所需的<code>environment</code>即可，如：<code>&lt;environment id=&quot;development&quot;&gt;</code>或<code>&lt;environment id=&quot;test&quot;&gt;</code>中的id属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure><p>如果忽略了环境参数，那么将会加载默认环境，即：<code>&lt;environments default=&quot;development&quot;&gt;</code>直接选中默认环境，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, properties);</span><br></pre></td></tr></table></figure><h4 id="事务管理器配置"><a href="#事务管理器配置" class="headerlink" title="事务管理器配置"></a>事务管理器配置</h4><p>例如上述xml中的<code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code>，此处即表示使用JDBC对事务进行管理</p><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><ul><li>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li><li>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</li></ul><blockquote><p><strong>提示</strong> 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p></blockquote><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h4><p>例如上述xml中的<code>&lt;dataSource type=&quot;POOLED&quot;&gt;</code>，此处即表示数据源使用POOLED进行JDBC连接对象资源的配置</p><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><h5 id="UNPOOLED无数据库连接池"><a href="#UNPOOLED无数据库连接池" class="headerlink" title="UNPOOLED无数据库连接池"></a>UNPOOLED无数据库连接池</h5><p><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p><ul><li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li><li><code>url</code> – 这是数据库的 JDBC URL 地址。</li><li><code>username</code> – 登录数据库的用户名。</li><li><code>password</code> – 登录数据库的密码。</li><li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</li><li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 <code>java.sql.Connection#setNetworkTimeout()</code> 的 API 文档以获取更多信息。</li></ul><p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上 “driver.” 前缀即可，例如：</p><ul><li><code>driver.encoding=UTF8</code></li></ul><p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性给数据库驱动。</p><h5 id="POOLED使用数据库连接池"><a href="#POOLED使用数据库连接池" class="headerlink" title="POOLED使用数据库连接池"></a>POOLED使用数据库连接池</h5><p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p><p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li><li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 <code>poolMaximumIdleConnections</code> 与 <code>poolMaximumLocalBadConnectionTolerance</code> 之和。 默认值：3（新增于 3.4.5）</li><li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li><li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置 <code>poolPingQuery</code> 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li><li><code>poolPingConnectionsNotUsedFor</code> – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。</li></ul><h3 id="属性-Properties"><a href="#属性-Properties" class="headerlink" title="属性 (Properties)"></a>属性 (Properties)</h3><p>上述的各项属性，都可以在外部进行相关的配置，并且可以进行动态的替换：</p><p>例如在resources文件夹中添加<code>dbRoot.properties</code>配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">37628981mm</span></span><br></pre></td></tr></table></figure><p><strong>注意：此时不再使用<code>&amp;amp;</code>，而是直接使用<code>&amp;</code></strong></p><p>在<code>mybatis-config.xml</code>下配置properties：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;dbRoot.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/heavytiger/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>$&#123;key&#125;</code>获取properties中的配置值；</p><p>也可以在内部进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F2Fa3!33TYyg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类型别名-typeAliases"><a href="#类型别名-typeAliases" class="headerlink" title="类型别名 (typeAliases)"></a>类型别名 (typeAliases)</h3><p>为了方便在XML配置中缩写名字，可以为Java类型设置一个缩写的名字。</p><ul><li>类型别名是为Java类型设置一个短的名字。</li><li>存在的意义仅在于用来减少类完全限定名的冗余</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类取别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--UserMapper.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis会在包名下自动搜索需要的Java Bean，例如：</p><p>扫描实体类的包，他的默认别名就是这个类的类命，首字母需要改为小写！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类取别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.heavytiger.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--UserMapper.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处的resultType忽视大小写--&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>建议：</strong> </p><p>在实体类比较少的时候，建议使用第一种方式；</p><p>在实体类较多的时候，建议使用第二种方式。</p><p>第一种可以DIY别名，不和类名相同也没有问题，但是第二种则需要相同。</p></blockquote><p>但是MyBatis允许使用注解，使得第二种包名的方式也可以自定也别名</p><p>即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@Alias(&quot;hello&quot;)</code>，可以给该<code>User</code>类设置hello的别名，此时<code>User</code>将无法继续使用。</p><h3 id="设置-settings"><a href="#设置-settings" class="headerlink" title="设置 (settings)"></a>设置 (settings)</h3><p>较为重要的设置：</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true or false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true or false</td><td>false</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true or false</td><td>False</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true or false</td><td>False</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>None</td></tr></tbody></table><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="映射器-mappers"><a href="#映射器-mappers" class="headerlink" title="映射器 (mappers)"></a>映射器 (mappers)</h3><p>首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符，或类名和包名等。</p><p><strong>方式一：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是使用类名会存在问题：</p><p>注意事项：</p><ul><li>接口和Mapper配置文件必须同名，否则将查询不到；</li><li>接口和Mapper配置文件必须在同一个包下，否则也将查询不到。</li></ul><p><strong>方式三：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用扫描包进行注入绑定：也要求必须同名，必须在同一个包下。</p><h3 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h3><p>类的作用域和生命周期是非常重要的。如果使用不当可导致严重的并发性问题。</p><p><img src="image-20211205211054196.png" alt="image-20211205211054196"></p><p><strong>SqlSessionFactoryBuilder</strong></p><p>这个类可以在任何时候被实例化、使用和销毁。一旦创造了SqlSessionFactory 就不需要再保留它了。所以SqlSessionFactoryBuilder 实例的最好的作用域是方法体内(即一个本地方法变量)。能从SqlSessionFactoryBuilder 创建多个SqlSessionFactory 实例，但最好不要把时间、资源放在解析XML 文件上，而是要从中解放出来做最重要事情。</p><blockquote><ul><li>一旦创建了SqlSessionFactory就不在需要它了，因为它获取了配置文件，读取了连接方式等各种信息。</li><li>将其放在局部变量中创建，保证其被销毁。</li></ul></blockquote><p><strong>SqlSessionFactory</strong></p><p>一旦创建，SqlSessionFactory 将会存在于您的应用程序整个运行生命周期中。很少或根本没有理由去销毁它或重新创建它。SqlSessionFactory 最好的作用域范围是一个应用的生命周期范围。这可以由多种方式来实现，最简单的方式是使用Singleton 模式或静态Singleton 模式。但这不是被广泛接受的最佳做法，相反，您可能更愿意使用像Google Guice 或Spring 的依赖注入方式。这些框架允许您创造一个管理器，用于管理SqlSessionFactory 的生命周期。</p><blockquote><ul><li>可以将其想象为：数据库连接池，因为可以设置POOL，因此，其可以分配连接资源</li><li>SqlSessionFactory一旦创建，没有理由丢弃它重新创建一个实例，因为连接的创建开销大，没理由重新创建一堆连接池</li><li>SqlSessionFactory的最佳作用域是整个应用生命周期的作用域，可以丢在static块中进行创建。</li><li>最简单的使用方式，就是使用单例模式或者静态单例模式进行创建，保证在只有一个实例被创建。</li></ul></blockquote><p><strong>SqlSession</strong></p><p>每个线程都有一个SqlSession 实例，SqlSession 实例是不被共享的，并且不是线程安全的。因此最好的作用域是request 或者method。决不要用一个静态字段或者一个类的实例字段来保存SqlSession 实例引用。也不要用任何一个管理作用域，如Servlet 框架中的HttpSession，来保存SqlSession 的引用。如果您正在用一个WEB 框架，可以把SqlSession 的作用域看作类似于HTTP 的请求范围。也就是说，在收到一个HTTP 请求，您可以打开一个SqlSession，当您把response 返回时，就可以把SqlSession 关闭。关闭会话是非常重要的。</p><p>可以使用<code>try-with-resource</code>或者<code>finally</code>保证其资源被关闭:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do work</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="keyword">try</span>(SqlSession session = sqlSessionFactory.openSession())&#123;</span><br><span class="line">    <span class="comment">// do work</span></span><br><span class="line">&#125; <span class="comment">// 实现了AutoClosable接口，会保证连接在异常发生或者正常结束后一定会被关闭</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>即连接到连接池的一个请求：可以类比于<code>Connection</code>对象</li><li>SqlSession的实例不是线程安全的，因此是不能被直接共享的，所以他的最佳的作用域是请求或方法作用域即：doGet()、doPost()等方法中；假设其作用域在用户的整个Session中，会导致只有几个用户挂着index页面，整个数据库连接池资源都被占用殆尽，其他真正需要的用户没办法抢占到资源，会产生极大的浪费。因此，在需要的时候才申请使用SqlSession对象，资源利用率高。</li><li>用完之后，需要赶紧关闭资源，否则资源会被占用</li></ul></blockquote><h2 id="解决属性名和字段名不一致的问题"><a href="#解决属性名和字段名不一致的问题" class="headerlink" title="解决属性名和字段名不一致的问题"></a>解决属性名和字段名不一致的问题</h2><h3 id="简单结果映射"><a href="#简单结果映射" class="headerlink" title="简单结果映射"></a>简单结果映射</h3><p>若存在数据库中的字段名称和JavaBean的属性名不一致的情况。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 数据库中的字段名是pwd</span></span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时取出的结果是：<code>id=1, name=xxx, password=null</code></p><p>那么为什么查询不到password呢？</p><blockquote><p>原因是：MyBatis通过查询到的字段名，通过反射调用setter方法，此时数据库中的名称是pwd，将会调用JavaBean中的setPwd方法，但是此时JavaBean中只有setPassword方法，因此无法通过反射注入数据。</p><p>若此时存在两个方法名：setPassword() 和 setPwd()，则肯定能注入成功。</p></blockquote><p><strong>第一种方法（小孩子才做选择）：</strong></p><p>小孩子才做选择，直接把<code>UserMapper.xml</code>中的语句改为：</p><p>但是若有50列，难道一列一列设置别名？不可取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.heavytiger.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, name, pwd AS password <span class="comment">&lt;!--直接在这里取别名--&gt;</span></span><br><span class="line">    FROM mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二种方法：</strong></p><p>通过<code>resultMap</code>来进行解决</p><p>结果集进行映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column 对应数据库中的列名， property对应java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--查询所有User，Select语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * </span><br><span class="line">    FROM mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=2, name=&#x27;test&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=3, name=&#x27;admin&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=4, name=&#x27;m1&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;m2&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br></pre></td></tr></table></figure><p>可以看到能够正常得到结果。如果是一一对应关系的列可以不需要书写到resultMap中，类似于一个哈希表，会先查找是否存在key，需要进行映射，若不需要，则会直接使用反射去调用setter方法。若需要进行名称转换，则映射后注入到Bean中，因此此处可以写为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column 对应数据库中的列名， property对应java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h3><h4 id="搭建环境-1"><a href="#搭建环境-1" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>创建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `teacher`(</span><br><span class="line">`id` <span class="type">INT</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">`name` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` )</span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher ( `id`, `name` )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">`id` <span class="type">INT</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tid` <span class="type">INT</span> ( <span class="number">10</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ),</span><br><span class="line">KEY `fktid` ( `tid` ),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY ( `tid` ) <span class="keyword">REFERENCES</span> `teacher` ( `id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` ( `id`, `name`, `tid` )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ),</span><br><span class="line">( <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br></pre></td></tr></table></figure><p>新建实体类Teacher，Student</p><p>建立Mapper接口</p><p>建立Mapper.xml文件</p><p>在核心配置文件中绑定注册Mapper接口或者文件</p><p>测试查询是否成功</p><h4 id="多对一处理"><a href="#多对一处理" class="headerlink" title="多对一处理"></a>多对一处理</h4><p>例如：多个学生上一个老师的课，叫做多对一关系</p><p><strong>查询所有学生的信息，以及查询对应的老师的信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 每个学生都需要关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 老师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按照查询进行嵌套处理"><a href="#按照查询进行嵌套处理" class="headerlink" title="按照查询进行嵌套处理"></a>按照查询进行嵌套处理</h5><p><strong>该方法类似于子查询，构建了两个SELECT语句，使用association进行查询</strong></p><p>StudentMapper.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heavytiger.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用resultMap将其连接到一起--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，需要单独处理，使用association</span></span><br><span class="line"><span class="comment">            对象： association</span></span><br><span class="line"><span class="comment">            集合： collection</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property表示此处为student.teacher属性</span></span><br><span class="line"><span class="comment">column表示在数据库中的列名为tid</span></span><br><span class="line"><span class="comment">javaType表示该属性对应Teacher类</span></span><br><span class="line"><span class="comment">select表示使用getTeacher的select方法以及所对应的列名查询结果</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentAndTeacher&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要想办法让这两个查询能够拼接到一起--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.teacher WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; students = mapper.getStudents();</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Teacher&#123;id=1, name=&#x27;小明&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=2, name=&#x27;小红&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=3, name=&#x27;小张&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=4, name=&#x27;小李&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=5, name=&#x27;小王&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="按照结果进行嵌套处理"><a href="#按照结果进行嵌套处理" class="headerlink" title="按照结果进行嵌套处理"></a>按照结果进行嵌套处理</h5><p> <strong>该方法类似于子查询，构建了两个SELECT语句，使用association进行查询</strong></p><p>StudentMapper.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heavytiger.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方法二：按结果进行嵌套处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentAndTeacher&quot;</span>&gt;</span></span><br><span class="line">        SELECT s.id AS sid, s.tid AS tid ,s.name AS sname, t.name AS tname</span><br><span class="line">        FROM mybatis.student AS s,</span><br><span class="line">             mybatis.teacher AS t</span><br><span class="line">        WHERE s.tid = t.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; students = mapper.getStudents();</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Teacher&#123;id=1, name=&#x27;小明&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=2, name=&#x27;小红&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=3, name=&#x27;小张&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=4, name=&#x27;小李&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br><span class="line">Teacher&#123;id=5, name=&#x27;小王&#x27;, teacher=Teacher&#123;id=1, name=&#x27;秦老师&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h4><p>例如：一个老师的课存在多个学生的信息，叫做一对多关系</p><p><strong>查询老师的信息，以及老师对应的所有的学生的信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 每个学生都需要关联一个老师的id</span></span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按照查询进行嵌套处理（子查询）"><a href="#按照查询进行嵌套处理（子查询）" class="headerlink" title="按照查询进行嵌套处理（子查询）"></a>按照查询进行嵌套处理（子查询）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">SELECT * FROM mybatis.teacher WHERE id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Studetn&quot;</span>&gt;</span></span><br><span class="line">SELECT * FROM mybatis.student WHERE tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="按照结果进行嵌套处理（联结查询）"><a href="#按照结果进行嵌套处理（联结查询）" class="headerlink" title="按照结果进行嵌套处理（联结查询）"></a>按照结果进行嵌套处理（联结查询）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherAndStudents&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--集合需要使用collection，使用泛型的集合，需要使用ofType进行表示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherAndStudents&quot;</span>&gt;</span></span><br><span class="line">    SELECT t.id AS tid, t.name AS tname, s.id AS sid, s.name AS sname</span><br><span class="line">    FROM mybatis.teacher AS t,</span><br><span class="line">         mybatis.student AS s</span><br><span class="line">    WHERE t.id = s.tid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查询到的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Teacher&#123;id=1, </span><br><span class="line">name=&#x27;秦老师&#x27;, </span><br><span class="line">students=[</span><br><span class="line">Student&#123;id=1, name=&#x27;小明&#x27;, tid=1&#125;, </span><br><span class="line">Student&#123;id=2, name=&#x27;小红&#x27;, tid=1&#125;, </span><br><span class="line">Student&#123;id=3, name=&#x27;小张&#x27;, tid=1&#125;, </span><br><span class="line">Student&#123;id=4, name=&#x27;小李&#x27;, tid=1&#125;, </span><br><span class="line">Student&#123;id=5, name=&#x27;小王&#x27;, tid=1&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>详情参考：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps">mybatis – MyBatis 3 | XML 映射器</a></strong></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要进行排错，日志就是实现排错的助手！</p><p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>Log4j</li><li>JDK logging</li><li>STDOUT logging</li><li>No logging</li></ul><p>MyBatis内置的日志工厂会基于运行时检测信息，选择日志以委托实现，会按照上面罗列的顺序，一次查找实现，当没有查找到实现的时候，则会禁用日志功能(No logging)</p><p><strong>在mybatis-config.xml中进行相关的配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用STDOUT-LOGGING"><a href="#使用STDOUT-LOGGING" class="headerlink" title="使用STDOUT_LOGGING"></a>使用STDOUT_LOGGING</h3><p>shell中输出结果如下所示(使用<code>#</code>进行备注)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Opening JDBC Connection# 此处打开了JDBC的连接</span><br><span class="line">Created connection 297490204.# 此处创建了一个JDBC连接</span><br><span class="line">Setting autocommit to false on JDBC Connection # 设置禁止自动提交，使用事务管理</span><br><span class="line">[com.mysql.cj.jdbc.ConnectionImpl@11bb571c]# 该JDBC连接对象</span><br><span class="line">==&gt;  Preparing: SELECT * FROM mybatis.user;# 准备的SQL语句</span><br><span class="line">==&gt; Parameters: # 读到的参数</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 2, test, 123456</span><br><span class="line">&lt;==        Row: 3, admin, 123456</span><br><span class="line">&lt;==        Row: 4, m1, 12345678</span><br><span class="line">&lt;==        Row: 5, m2, 12345678</span><br><span class="line">&lt;==      Total: 4</span><br><span class="line">User&#123;id=2, name=&#x27;test&#x27;, pwd=&#x27;123456&#x27;&#125;# 输出的结果</span><br><span class="line">User&#123;id=3, name=&#x27;admin&#x27;, pwd=&#x27;123456&#x27;&#125;</span><br><span class="line">User&#123;id=4, name=&#x27;m1&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;m2&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection # 将事务提交，自动提交改为true</span><br><span class="line">[com.mysql.cj.jdbc.ConnectionImpl@11bb571c]# JDBC连接对象</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@11bb571c] # 关闭连接</span><br><span class="line">Returned connection 297490204 to pool.# 将JDBC对象返回到连接池中</span><br></pre></td></tr></table></figure><h3 id="使用LOG4J"><a href="#使用LOG4J" class="headerlink" title="使用LOG4J"></a>使用LOG4J</h3><p><strong>Log4j是什么？</strong></p><blockquote><p>Apache <strong>Log4j</strong>是一个基于<a href="https://zh.wikipedia.org/wiki/Java">Java</a>的日志记录工具。它是由Ceki Gülcü首创的，现在则是<a href="https://zh.wikipedia.org/wiki/Apache%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A">Apache软件基金会</a>的一个项目。 log4j是几种<a href="https://zh.wikipedia.org/w/index.php?title=Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6&action=edit&redlink=1">Java日志框架</a>之一。</p></blockquote><p><strong>Log4j的优点：</strong></p><blockquote><ol><li>可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等。</li><li>可以控制每一条日志的输出格式</li><li>可以更加细致地控制日志的级别</li><li>以上三点通过一个配置文件来地进行配置</li><li>Log4j其他语言接口，您可以在C、C++、.Net、PL/SQL程序中使用Log4j，其语法和用法与在Java程序中一样，使得多语言分布式系统得到一个统一且一致的日志组件模块。</li><li>通过使用各种第三方扩展，您可以很方便地将Log4j集成到J2EE、JINI甚至是SNMP应用中。</li></ol></blockquote><h4 id="先在pom-xml中导包"><a href="#先在pom-xml中导包" class="headerlink" title="先在pom.xml中导包"></a>先在pom.xml中导包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加Settings"><a href="#添加Settings" class="headerlink" title="添加Settings"></a>添加Settings</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置log4j-properties文件"><a href="#配置log4j-properties文件" class="headerlink" title="配置log4j.properties文件"></a>配置log4j.properties文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/heavytiger.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><h4 id="在要使用log4j的地方导包并使用"><a href="#在要使用log4j的地方导包并使用" class="headerlink" title="在要使用log4j的地方导包并使用"></a>在要使用log4j的地方导包并使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首先需要创建一个Logger实例</span></span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;这是info信息&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;这是debug信息&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;这是warn信息&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;这是error信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[com.heavytiger.dao.UserMapperTest]-这是info信息</span><br><span class="line">[com.heavytiger.dao.UserMapperTest]-这是debug信息</span><br><span class="line">[com.heavytiger.dao.UserMapperTest]-这是warn信息</span><br><span class="line">[com.heavytiger.dao.UserMapperTest]-这是error信息</span><br></pre></td></tr></table></figure><p>heavytiger.log文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[INFO][21-12-06][com.heavytiger.dao.UserMapperTest]这是info信息</span><br><span class="line">[DEBUG][21-12-06][com.heavytiger.dao.UserMapperTest]这是debug信息</span><br><span class="line">[WARN][21-12-06][com.heavytiger.dao.UserMapperTest]这是warn信息</span><br><span class="line">[ERROR][21-12-06][com.heavytiger.dao.UserMapperTest]这是error信息</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>实现分页查询的功能，需要提供参数<code>Limit S, E;</code></p><p><strong>示例：</strong></p><p>添加功能，可以使用模糊查询，查询到相关的用户姓名；</p><p><strong>UserMapper.java添加如下方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 存储了查询的页的开始和结束信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回查询到的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByPages</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml中添加如下标签：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByPages&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM mybatis.user</span><br><span class="line">    LIMIT #&#123;start&#125;, #&#123;size&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapperTest.java中测试方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(SqlSession sqlSession = MyBatisUtils.getSqlSession()) &#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;start&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getUserByPages(map);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得到的结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=4, name=&#x27;m1&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;m2&#x27;, pwd=&#x27;12345678&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>接口这个概念我们一定不陌生，实际生活中<strong>最常见的例子就是</strong>：插座！</p><p>我们只需要事先定义好插座的<strong>接口标准</strong>，各大插座厂商只要按这个接口标准生产，管你什么牌子、内部什么电路结构，这些均和用户无关，用户拿来就可以用；而且即使插座坏了，只要换一个符合接口标准的新插座，一切照样工作！</p><p>同理，实际代码设计也是这样！</p><p>我们在设计一个软件的代码架构时，我们都希望<strong>事先约定</strong>好各个功能的<strong>接口</strong>（即：约定好接口签名和方法），实际开发时我们只需要实现这个接口就能完成具体的功能！后续即使项目变化、功能升级，程序员只需要按照接口约定重新实现一下，就可以达到系统升级和扩展的目的！</p><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>注解实现查询全部用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserMapper.java 接口</span></span><br><span class="line"><span class="meta">@Select(SELECT * FROM user)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span> = <span class="string">&quot;com.heavytiger.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本质：反射机制实现了相关的配置功能</p><p>底层：使用了动态代理</p><h3 id="使用注解实现CRUD"><a href="#使用注解实现CRUD" class="headerlink" title="使用注解实现CRUD"></a>使用注解实现CRUD</h3><p>可以在工具类创建的时候实现自动提交事务！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);<span class="comment">//表示开启自动提交</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写接口，增加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若方法存在多个参数，所有的参数前面都必须加上 @Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO user(id, name, pwd) VALUES (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete(&quot;DELETE FROM user WHERE id = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：必须将接口注册绑定到核心配置文件中</strong></p><p>关于<code>@Param</code>注解</p><ul><li>基本类型参数或者String必须加上</li><li>引用类型不用加</li><li>若只有一个基本类型，可以忽略，但建议都加上</li><li>在SQL中的引用，就是此处<code>@Param(&quot;id&quot;)</code>设置的属性名！</li></ul><h2 id="MyBatis的详细执行流程"><a href="#MyBatis的详细执行流程" class="headerlink" title="MyBatis的详细执行流程"></a>MyBatis的详细执行流程</h2><p><img src="image-20211206120130445.png" alt="image-20211206120130445"></p><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>什么是动态SQL:动态SQL就是指根据不同的条件生成不同的SQL语句</p><blockquote><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></blockquote><h3 id="搭建环境-2"><a href="#搭建环境-2" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">`id` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span> ( <span class="number">100</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`views` <span class="type">INT</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span> </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure><p><strong>创建一个基础工程：</strong></p><p>导包-&gt;编写配置文件-&gt;编写实体类-&gt;编写实体类对应的Mapper接口和Mapper.xml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">E:\PROGRAMDEMO\LEARNMYBATIS\MYBATIS_06</span><br><span class="line">│  pom.xml</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    ├─main</span><br><span class="line">    │  ├─java</span><br><span class="line">    │  │  └─com</span><br><span class="line">    │  │      └─heavytiger</span><br><span class="line">    │  │          ├─dao</span><br><span class="line">    │  │          │      BlogMapper.java</span><br><span class="line">    │  │          │</span><br><span class="line">    │  │          ├─pojo</span><br><span class="line">    │  │          │      Blog.java</span><br><span class="line">    │  │          │</span><br><span class="line">    │  │          └─utils</span><br><span class="line">    │  │                  MybatisUtils.java</span><br><span class="line">    │  │</span><br><span class="line">    │  └─resources</span><br><span class="line">    │      │  dbRoot.properties</span><br><span class="line">    │      │  mybatis-config.xml</span><br><span class="line">    │      │</span><br><span class="line">    │      └─com</span><br><span class="line">    │          └─heavytiger</span><br><span class="line">    │              └─dao</span><br><span class="line">    │                      BlogMapper.xml</span><br><span class="line">    │</span><br><span class="line">    └─test</span><br><span class="line">        └─java</span><br></pre></td></tr></table></figure><h3 id="使用INSERT语句进行测试"><a href="#使用INSERT语句进行测试" class="headerlink" title="使用INSERT语句进行测试"></a>使用INSERT语句进行测试</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heavytiger.dao.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO mybatis.blog(id, title, author, create_time, views)</span><br><span class="line">        VALUES (#&#123;id&#125;, #&#123;title&#125;, #&#123;author&#125;, #&#123;createTime&#125;, #&#123;views&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d6186d99dd5240a48654e993e7cada87hello worlddcm2021-12-07 19:19:44999</span><br><span class="line">9c90be6df82b4e058afe75b52d8d3a4ehello world0dcm2021-12-07 19:24:48999</span><br><span class="line">3e7dd3e837844c5da725e1027063d76ehello world1dcm2021-12-07 19:24:48999</span><br><span class="line">12b8bd6d40934596a195e562c0f89535hello world2dcm2021-12-07 19:24:48999</span><br><span class="line">5737bcd8cff44b71a56a18150a70740dhello world3dcm2021-12-07 19:24:48999</span><br><span class="line">824ba38381ad41cd8647ebaf535e437bhello world4dcm2021-12-07 19:24:48999</span><br><span class="line">a0c70ade2e204c7681793f4c1a55b00chello world5dcm2021-12-07 19:24:48999</span><br><span class="line">4692927e095f405b8e308e7590b0c04ahello world6dcm2021-12-07 19:24:48999</span><br><span class="line">7aeadff4b03648658502169217f8df04hello world7dcm2021-12-07 19:24:48999</span><br><span class="line">8ec81e3ea3cd409f965ae4aad11d9feahello world8dcm2021-12-07 19:24:48999</span><br><span class="line">dc9d04015e2f4ea0a84e53940b535cfchello world9dcm2021-12-07 19:24:48999</span><br><span class="line">cae2d395166648fab9c9464159cecbedhello world10csh2021-12-07 19:28:35520</span><br><span class="line">65d71423cbf44469bca76a674468ff73hello world11csh2021-12-07 19:28:35520</span><br><span class="line">c448359fa65b4b298ba5b6fc03829a7chello world12csh2021-12-07 19:28:35520</span><br></pre></td></tr></table></figure><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p><strong>实现功能：传入作者名称时，查询该作者写过的所有blog信息，传入文章信息，即查询文章的信息，不传入则查询所有的信息.</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.blog</span><br><span class="line">    WHERE 1=1<span class="comment">&lt;!--此处用1=1可以保证每次都能查询到所有的值，通过if可以保证不用写几十条查询语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        AND author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;if test=&quot;statement&quot;&gt;</code>将会判断statement的真假，若为真，则会在语句中加上该标签中的内容</p><p>测试查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span>(SqlSession sqlSession = MybatisUtils.getSqlSession())&#123;</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        <span class="comment">//第一次查询</span></span><br><span class="line">        map.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二次查询</span></span><br><span class="line">        map.clear();</span><br><span class="line">        map.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;csh&quot;</span>);</span><br><span class="line">        blogs = mapper.queryBlogIf(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第三次查询</span></span><br><span class="line">        blogs = mapper.queryBlogIf(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一次查询，通过LOG可以看到此时的查询语句是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Preparing: SELECT * FROM mybatis.blog WHERE 1=1 AND title = ?</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Parameters: hello world(String)</span></span><br><span class="line">Blog&#123;id=&#x27;d6186d99dd5240a48654e993e7cada87&#x27;, title=&#x27;hello world&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二次查询，通过LOG可以看到此时的查询语句是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Preparing: SELECT * FROM mybatis.blog WHERE 1=1 AND author = ?</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Parameters: csh(String)</span></span><br><span class="line">Blog&#123;id=&#x27;cae2d395166648fab9c9464159cecbed&#x27;, title=&#x27;hello world10&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;65d71423cbf44469bca76a674468ff73&#x27;, title=&#x27;hello world11&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;c448359fa65b4b298ba5b6fc03829a7c&#x27;, title=&#x27;hello world12&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三次查询，通过LOG可以看到此时的查询语句是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Preparing: SELECT * FROM mybatis.blog WHERE 1=1</span></span><br><span class="line">Blog&#123;id=&#x27;d6186d99dd5240a48654e993e7cada87&#x27;, title=&#x27;hello world&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;9c90be6df82b4e058afe75b52d8d3a4e&#x27;, title=&#x27;hello world0&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;3e7dd3e837844c5da725e1027063d76e&#x27;, title=&#x27;hello world1&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;12b8bd6d40934596a195e562c0f89535&#x27;, title=&#x27;hello world2&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;5737bcd8cff44b71a56a18150a70740d&#x27;, title=&#x27;hello world3&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;824ba38381ad41cd8647ebaf535e437b&#x27;, title=&#x27;hello world4&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;a0c70ade2e204c7681793f4c1a55b00c&#x27;, title=&#x27;hello world5&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;4692927e095f405b8e308e7590b0c04a&#x27;, title=&#x27;hello world6&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;7aeadff4b03648658502169217f8df04&#x27;, title=&#x27;hello world7&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;8ec81e3ea3cd409f965ae4aad11d9fea&#x27;, title=&#x27;hello world8&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;dc9d04015e2f4ea0a84e53940b535cfc&#x27;, title=&#x27;hello world9&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;cae2d395166648fab9c9464159cecbed&#x27;, title=&#x27;hello world10&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;65d71423cbf44469bca76a674468ff73&#x27;, title=&#x27;hello world11&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;c448359fa65b4b298ba5b6fc03829a7c&#x27;, title=&#x27;hello world12&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br></pre></td></tr></table></figure><h3 id="choose、when、otherwise标签"><a href="#choose、when、otherwise标签" class="headerlink" title="choose、when、otherwise标签"></a>choose、when、otherwise标签</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><p><strong>实现功能：传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author” 查找的情形。若两者都没有传入，就返回名称为’精选文章’的 BLOG</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.blog</span><br><span class="line">    WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            AND title LIKE &quot;%&quot;#&#123;title&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            AND author LIKE &quot;%&quot;#&#123;author&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            AND title = &#x27;精选文章&#x27;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogChoose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span>(SqlSession sqlSession = MybatisUtils.getSqlSession())&#123;</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        <span class="comment">//第一次查询</span></span><br><span class="line">        map.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;world1&quot;</span>);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二次查询</span></span><br><span class="line">        map.clear();</span><br><span class="line">        map.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;sh&quot;</span>);</span><br><span class="line">        blogs = mapper.queryBlogChoose(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第三次查询</span></span><br><span class="line">        blogs = mapper.queryBlogChoose(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一次查询，通过LOG可以看到此时的查询语句是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Preparing: SELECT * FROM mybatis.blog WHERE 1=1 AND title LIKE <span class="string">&quot;%&quot;</span>?<span class="string">&quot;%&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Parameters: world1(String)</span></span><br><span class="line">Blog&#123;id=&#x27;3e7dd3e837844c5da725e1027063d76e&#x27;, title=&#x27;hello world1&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;cae2d395166648fab9c9464159cecbed&#x27;, title=&#x27;hello world10&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;65d71423cbf44469bca76a674468ff73&#x27;, title=&#x27;hello world11&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;c448359fa65b4b298ba5b6fc03829a7c&#x27;, title=&#x27;hello world12&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二次查询，通过LOG可以看到此时的查询语句是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Preparing: SELECT * FROM mybatis.blog WHERE 1=1 AND author LIKE <span class="string">&quot;%&quot;</span>?<span class="string">&quot;%&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Parameters: sh(String)</span></span><br><span class="line">Blog&#123;id=&#x27;cae2d395166648fab9c9464159cecbed&#x27;, title=&#x27;hello world10&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;65d71423cbf44469bca76a674468ff73&#x27;, title=&#x27;hello world11&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line">Blog&#123;id=&#x27;c448359fa65b4b298ba5b6fc03829a7c&#x27;, title=&#x27;hello world12&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三次查询，通过LOG可以看到此时的查询语句是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Preparing: SELECT * FROM mybatis.blog WHERE 1=1 AND title = <span class="string">&#x27;精选文章&#x27;</span></span></span><br><span class="line">Blog&#123;id=&#x27;12345423cbf44469bca76a674468ff73&#x27;, title=&#x27;精选文章&#x27;, author=&#x27;tzy&#x27;, createTime=null, views=666&#125;</span><br></pre></td></tr></table></figure><h3 id="trim、where、set标签"><a href="#trim、where、set标签" class="headerlink" title="trim、where、set标签"></a>trim、where、set标签</h3><h4 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h4><p>假设我们的语句类似于：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.blog</span><br><span class="line">    WHERE</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        AND author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果title和author传递了值当然再合适不过，但是如果没有传递值，这样会导致SQL语句变成：</p><p><code>SELECT * FROM mybatis.blog WHERE</code></p><p><code>SELECT * FROM mybatis.blog WHERE AND title = ?</code></p><p>很显然，这样做语句会报错，那么有没有办法让这里在有语句时补上WHERE，没有语句时不加WHERE呢？</p><p><strong>可以使用<code>WHERE</code>标签解决这个问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        AND author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。<strong>而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们直接去除。</strong></p><h4 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h4><p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em><strong>prefixOverrides</strong></em>属性会忽略通过管道符分隔的文本序列，所以此处的<code>&quot;AND |OR &quot;</code>请务必注意空格，即<code>&quot;AND &quot;</code>, <code>&quot;OR &quot;</code></p><p>不能随便将此处的空格删除。上述例子会移除所有<em><strong>prefixOverrides</strong></em>属性中指定的内容，并且插入<em><strong>prefix</strong></em>属性中指定的内容。</p><p>除此之外还有<code>suffix</code>和<code>prefix</code>可选，前者在后方插入对应的值，后者在前方，<code>prefixOverrides</code>覆盖前面的值，<code>suffixOverrides</code>覆盖后面的值</p><h4 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h4><p>用于动态更新语句的类似解决方案叫做 <em><strong>set</strong></em>。<em><strong>set</strong></em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就不至于每个不同的更新都写一个接口了。这个例子中，<em><strong>set</strong></em> 元素会动态地在行首插入 <strong>SET</strong> 关键字，<strong>并会删掉额外的逗号</strong>（这些逗号是在使用条件语句给列赋值时引入的）。</p><p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql的复用"><a href="#sql的复用" class="headerlink" title="sql的复用"></a>sql的复用</h3><p>如果存在很多相同的SQL块，可以在mapper中使用sql标签进行复用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heavytiger.dao.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-author-title&quot;</span>&gt;</span><span class="comment">&lt;!--需要复用的SQL代码块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            AND title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            AND author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.blog</span><br><span class="line">        WHERE 1=1</span><br><span class="line">        <span class="comment">&lt;!--使用include标签进行代码的复用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-author-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>foreach标签可以用来拼接重复性很高的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIn&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.blog WHERE id</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;IN (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;, &quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如该示例中：使用了foreach拼接了一个<code>WHERE IN</code>语句，实现了将语句转为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IN</span> (ids.indexof(<span class="number">0</span>), ids.indexof(<span class="number">1</span>), ids.indexof(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>其中，collection表示传递的map中的参数一般是一个实现了迭代器接口的数组结构，item表示遍历到的每一项，index表示索引号，open表示开头如何拼接，separator表示如何分隔每项，end表示结尾如何拼接。foreach标签值表示每一项如何拼接。</p><p>测试如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(SqlSession sqlSession = MybatisUtils.getSqlSession()) &#123;</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.add(<span class="string">&quot;d6186d99dd5240a48654e993e7cada87&quot;</span>);</span><br><span class="line">        ids.add(<span class="string">&quot;cae2d395166648fab9c9464159cecbed&quot;</span>);</span><br><span class="line">        ids.add(<span class="string">&quot;8ec81e3ea3cd409f965ae4aad11d9fea&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ids&quot;</span>, ids);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogIn(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Preparing: SELECT * FROM mybatis.blog WHERE id IN ( ? , ? , ? )</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ==&gt; Parameters: d6186d99dd5240a48654e993e7cada87(String), cae2d395166648fab9c9464159cecbed(String), 8ec81e3ea3cd409f965ae4aad11d9fea(String)</span></span><br><span class="line"></span><br><span class="line">Blog&#123;id=&#x27;d6186d99dd5240a48654e993e7cada87&#x27;, title=&#x27;hello world&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;8ec81e3ea3cd409f965ae4aad11d9fea&#x27;, title=&#x27;hello world8&#x27;, author=&#x27;dcm&#x27;, createTime=null, views=999&#125;</span><br><span class="line">Blog&#123;id=&#x27;cae2d395166648fab9c9464159cecbed&#x27;, title=&#x27;hello world10&#x27;, author=&#x27;csh&#x27;, createTime=null, views=520&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>什么是缓存？</li></ol><ul><li>缓存是存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户去查询数据就不用从磁盘上查询，可以直接从缓存中查询，提高了查询的效率，解决了高并发的系统性能问题</li></ul><ol start="2"><li>为什么使用缓存？</li></ol><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率</li></ul><ol start="3"><li>什么样的数据可以使用缓存？</li></ol><ul><li>经常查询，并且不经常改变的数据</li></ul><h3 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h3><ul><li><p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。 缓存可以极大地提升查询效率。</p></li><li><p>MyBaits 系统默认定义了两级缓存：一级缓存和二级缓存</p><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存开启，也被称为本地缓存）</li><li>二级缓存需要手动开启和配置，是基于namespace级别的缓存</li><li>为了提高可扩展性，MyBatis定义了缓存接口Cache，可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><h4 id="一级缓存介绍"><a href="#一级缓存介绍" class="headerlink" title="一级缓存介绍"></a>一级缓存介绍</h4><p>在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。具体执行过程如下图所示。</p><p><img src="6e38df6a.jpg" alt="img"></p><p>每个SqlSession中持有了Executor，每个Executor中有一个LocalCache。当用户发起查询时，MyBatis根据当前执行的语句生成<code>MappedStatement</code>，在Local Cache进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入<code>Local Cache</code>，最后返回结果给用户。具体实现类的类关系图如下图所示。</p><p><img src="d76ec5fe.jpg" alt="img"></p><h4 id="一级缓存配置"><a href="#一级缓存配置" class="headerlink" title="一级缓存配置"></a>一级缓存配置</h4><p>只需在MyBatis的配置文件中，添加如下语句，就可以使用一级缓存。共有两个选项，<code>SESSION</code>或者<code>STATEMENT</code>，默认是<code>SESSION</code>级别，即在一个MyBatis会话中执行的所有语句，都会共享这一个缓存。一种是<code>STATEMENT</code>级别，可以理解为缓存只对当前执行的这一个<code>Statement</code>有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="一级缓存测试分析"><a href="#一级缓存测试分析" class="headerlink" title="一级缓存测试分析"></a>一级缓存测试分析</h4><p>开启<code>SESSION</code>级别的一级缓存：</p><ol><li><p>调用多次获取同一数据，例如：<code>mapper.getUserById(1);</code>只有第一次是查询了数据库，而之后的同一查询全部都是查询缓存</p></li><li><p>在对数据库进行更改后，例如：<code>mapper.addUser(tmpUser);</code>此时，再次查询数据库：<code>mapper.getUserById(1);</code>将会从数据库中查询，一级缓存失效</p></li><li><p>开启两个SqlSession即两个数据库连接，在sqlSession1中获取一次后（假设<code>user.name</code>为<code>name1</code>，此操作保证该数据被一级缓存），再在sqlSession2中更新该条数据，例如改变<code>user.name</code>为<code>name2</code>，此时再通过sqlSession1获取数据，得到的仍是<code>user.name = name1</code>，可以看到，此时数据不一致出现了脏数据。</p></li></ol><h4 id="一级缓存工作流程"><a href="#一级缓存工作流程" class="headerlink" title="一级缓存工作流程"></a>一级缓存工作流程</h4><p><img src="bb851700.jpg"></p><h4 id="一级缓存总结"><a href="#一级缓存总结" class="headerlink" title="一级缓存总结"></a>一级缓存总结</h4><ol><li>MyBatis一级缓存的生命周期和SqlSession一致。</li><li>MyBatis一级缓存内部设计简单，只是一个没有容量限定的HashMap，在缓存的功能性上有所欠缺。</li><li>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement。</li></ol><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><h4 id="二级缓存介绍"><a href="#二级缓存介绍" class="headerlink" title="二级缓存介绍"></a>二级缓存介绍</h4><p>一级缓存中，最大的共享范围就是在一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询，具体的工作流程如下所示。</p><p><img src="28399eba.jpg" alt="img"></p><p>二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。</p><p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><h4 id="二级缓存配置"><a href="#二级缓存配置" class="headerlink" title="二级缓存配置"></a>二级缓存配置</h4><p>要正确的使用二级缓存，需完成如下配置的。</p><ol><li>在MyBatis的配置文件<code>mybatis-config.xml</code>中开启二级缓存。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在MyBatis的<code>XXXMapper.XML</code>中配置cache或者cache-ref。</li></ol><p>cache标签用于声明这个namespace使用二级缓存，并且可以自定义配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--可以加入以下属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>type</code>：cache使用的类型，默认是<code>PerpetualCache</code>，这在一级缓存中提到过。</li><li><code>eviction</code>： 定义回收的策略，常见的有FIFO，LRU。</li></ul><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><ul><li><code>flushInterval</code>： 配置一定时间自动刷新缓存，单位是毫秒。</li><li><code>size</code>： 最多缓存对象的个数。</li><li><code>readOnly</code>： 是否只读，若配置可读写，则需要对应的实体类能够序列化。</li><li><code>blocking</code>： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。</li></ul></blockquote><p><code>cache-ref</code> 代表引用别的命名空间的Cache配置，即两个命名空间的操作使用的是同一个Cache。</p><p>对某一命名空间的语句，只会使用该命名空间的缓存进行缓存或刷新。 但你可能会想要在多个命名空间中共享相同的缓存配置和实例。要实现这种需求，可以使用 cache-ref 元素来引用另一个缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二级缓存测试分析"><a href="#二级缓存测试分析" class="headerlink" title="二级缓存测试分析"></a>二级缓存测试分析</h4><p>开启<code>namespace</code>级别的二级缓存：</p><ol><li>同一个<code>Mapper.xml</code>下，即同一<code>namespace</code>，创建两个<code>SqlSession</code>，1和2；使用<code>sqlSession1</code>读取一条记录（使用了事务），在事务未提交之前，使用<code>sqlSession2</code>读取记录仍然从数据库读取，即二级缓存未生效。</li><li>同一个<code>Mapper.xml</code>下，即同一<code>namespace</code>，创建两个<code>SqlSession</code>，1和2；使用<code>sqlSession1</code>读取一条记录（使用了事务），<code>sqlSession1</code>提交了事务，使用<code>sqlSession2</code>读取记录命中缓存，即二级缓存生效，命中率50%。</li><li>同一个<code>Mapper.xml</code>下，即同一<code>namespace</code>，创建两个<code>SqlSession</code>，1和2；使用<code>sqlSession1</code>读取一条记录（使用了事务），<code>sqlSession1</code>提交了事务，使用<code>sqlSession2</code>读取记录命中缓存，即二级缓存生效，命中率50%。此时用<code>sqlSession1</code>更新该数据，并提交事务，再次用<code>sqlSession2</code>查询该数据，从数据库获取，即缓存失效。</li><li>通常我们会为每个单表创建单独的映射文件，由于MyBatis的二级缓存是基于<code>namespace</code>的，多表查询语句所在的<code>namspace</code>无法感应到其他<code>namespace</code>中的语句对多表查询中涉及的表进行的修改，引发脏数据问题。</li><li>为了解决4的问题，可以使用``Cache ref<code>，让</code>ClassMapper<code>引用</code>StudenMapper<code>命名空间，这样两个映射文件对应的SQL操作都使用的是同一块缓存了。不过这样做的后果是，缓存的粒度变粗了，多个</code>Mapper namespace`下的所有操作都会对缓存使用造成影响。</li></ol><h4 id="二级缓存总结"><a href="#二级缓存总结" class="headerlink" title="二级缓存总结"></a>二级缓存总结</h4><ol><li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://zh.wikipedia.org/wiki/MyBatis">MyBatis - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p>[2] <a href="https://mybatis.org/mybatis-3/zh/index.html">mybatis – MyBatis 3 | 简介</a></p><p>[3] <a href="https://www.bilibili.com/video/BV1NE411Q7Nx?p=2&spm_id_from=pageDriver">【狂神说Java】Mybatis最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibili</a></p><p>[4] <a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html">聊聊MyBatis缓存机制 - 美团技术团队 (meituan.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> MySQL </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础学习</title>
      <link href="/articles/JDBC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/JDBC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>JDBC代表Java数据库连接(Java Database Connectivity)，它是用于Java编程语言和数据库之间的数据库无关连接的标准Java API，换句话说：JDBC是用于在Java语言编程中与数据库连接的API。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么"></a>JDBC是什么</h2><p>JDBC库包括通常与数据库使用相关，如下面提到的每个任务的API：</p><ul><li>连接到数据库</li><li>创建SQL或MySQL语句</li><li>在数据库中执行SQL或MySQL查询</li><li>查看和修改结果记录</li></ul><p>从根本上说，JDBC是一个规范，它提供了一整套接口，允许以一种可移植的访问底层数据库API。 Java可以用它来编写不同类型的可执行文件，如 -</p><ul><li>Java应用程序</li><li>Java Applet</li><li>Java Servlets</li><li>Java ServerPages(JSP)</li><li>企业级JavaBeans(EJB)</li></ul><h3 id="JDBC架构"><a href="#JDBC架构" class="headerlink" title="JDBC架构"></a>JDBC架构</h3><p>JDBC API支持用于数据库访问的两层和三层处理模型，但通常，JDBC体系结构由两层组成：</p><ul><li>JDBC API：提供应用程序到JDBC管理器连接。</li><li>JDBC驱动程序API：支持JDBC管理器到驱动程序连接。</li></ul><p>JDBC API使用驱动程序管理器并指定数据库的驱动程序来提供与异构数据库的透明连接。</p><p>JDBC驱动程序管理器确保使用正确的驱动程序来访问每个数据源。</p><p><strong>驱动程序管理器能够支持连接到多个异构数据库的多个并发驱动程序。</strong></p><p>架构图如图所示：</p><p><img src="image-20211004081852070.png" alt="image-20211004081852070"></p><h3 id="常见的JDBC组件"><a href="#常见的JDBC组件" class="headerlink" title="常见的JDBC组件"></a>常见的JDBC组件</h3><ul><li><code>DriverManager</code>：此类管理数据库驱动程序列表。 使用通信子协议将来自java应用程序的连接请求与适当的数据库驱动程序进行匹配。在JDBC下识别某个子协议的第一个驱动程序将用于建立数据库连接。</li><li><code>Driver</code>：此接口处理与数据库服务器的通信。我们很少会直接与<code>Driver</code>对象进行交互。 但会使用<code>DriverManager</code>对象来管理这种类型的对象。 它还提取与使用<code>Driver</code>对象相关的信息。</li><li><code>Connection</code>：此接口具有用于联系数据库的所有方法。 连接(<code>Connection</code>)对象表示通信上下文，<strong>即，与数据库的所有通信仅通过连接对象。</strong></li><li><code>Statement</code>：使用从此接口创建的对象将SQL语句提交到数据库。 除了执行存储过程之外，一些派生接口还接受参数。</li><li><code>ResultSet</code>：在使用<code>Statement</code>对象执行SQL查询后，这些对象保存从数据库检索的数据。 它作为一个迭代器并可移动<code>ResultSet</code>对象查询的数据。</li><li><code>SQLException</code>：此类处理数据库应用程序中发生的任何错误。</li></ul><h3 id="驱动版本对应"><a href="#驱动版本对应" class="headerlink" title="驱动版本对应"></a>驱动版本对应</h3><p><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 2 Compatibility with MySQL and Java Versions</a></p><blockquote><ul><li><strong>JDBC versions</strong>: Connector/J 8.0 implements JDBC 4.2. While Connector/J 8.0 works with libraries of higher JDBC versions, it returns a <code>SQLFeatureNotSupportedException</code> for any calls of methods supported only by JDBC 4.3 and higher.</li><li><strong>MySQL Server versions</strong>: Connector/J 8.0 supports MySQL 5.6, 5.7, and 8.0.</li><li><strong>JRE versions</strong>: Connector/J 8.0 supports JRE 8 or higher.</li><li><strong>JDK Required for Compilation</strong>: JDK 8.0 or higher is required for compiling Connector/J 8.0. Also, a customized JSSE provider might be required to use some later TLS versions and cipher suites when connecting to MySQL servers. For example, because Oracle’s Java 8 releases before 8u261 were shipped with JSSE implementations that support TLS up to version 1.2 only, you need a customized JSSE implementation to use TLSv1.3 on those Java 8 platforms. Oracle Java 8u261 and above do support TLSv1.3, so no customized JSSE implementation is needed.</li></ul></blockquote><h2 id="使用MAVEN导入驱动依赖"><a href="#使用MAVEN导入驱动依赖" class="headerlink" title="使用MAVEN导入驱动依赖"></a>使用MAVEN导入驱动依赖</h2><p>使用Maven构建项目：</p><p><strong>pom.xml</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heavytiger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Learn_MySQL<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过Maven导入相应驱动版本的依赖</p><h2 id="JDBC数据库连接"><a href="#JDBC数据库连接" class="headerlink" title="JDBC数据库连接"></a>JDBC数据库连接</h2><p>导入相应的驱动程序后，现在可以学习使用JDBC建立数据库连接了。</p><p>建立JDBC连接所涉及的编程相当简单。 以下是基本的四个步骤 -</p><ul><li><strong>导入JDBC包</strong>：使用Java语言的<code>import</code>语句在Java代码开头位置导入所需的类。</li><li><strong>注册JDBC驱动程序</strong>：使JVM将所需的驱动程序实现加载到内存中，从而可以满足JDBC请求。</li><li><strong>数据库URL配置</strong>：创建一个正确格式化的地址，指向要连接到的数据库(如：MySQL,Oracle和MSSQL等等)。</li><li><strong>创建连接对象</strong>：最后，调用<code>DriverManager</code>对象的<code>getConnection()</code>方法来建立实际的数据库连接。</li></ul><h3 id="导入JDBC包"><a href="#导入JDBC包" class="headerlink" title="导入JDBC包"></a>导入JDBC包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.* ;  <span class="comment">// for standard JDBC programs</span></span><br><span class="line"><span class="keyword">import</span> java.math.* ; <span class="comment">// for BigDecimal and BigInteger support</span></span><br></pre></td></tr></table></figure><h3 id="注册JDBC驱动"><a href="#注册JDBC驱动" class="headerlink" title="注册JDBC驱动"></a>注册JDBC驱动</h3><p>在使用程序之前，必须先注册该驱动程序。 注册驱动程序是将Oracle驱动程序的类文件加载到内存中的过程，因此可以将其用作JDBC接口的实现。</p><h4 id="方法1-使用反射注册驱动"><a href="#方法1-使用反射注册驱动" class="headerlink" title="方法1 - 使用反射注册驱动"></a>方法1 - 使用反射注册驱动</h4><p>最常见的方法是使用Java的<code>Class.forName()</code>方法，将驱动程序的类文件动态加载到内存中，并将其自动注册。这个方法是推荐使用的方法，因为它使驱动程序注册可配置和便携。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://hostname:port/db_name&quot;</span>,<span class="string">&quot;db_username&quot;</span>, <span class="string">&quot;db_password&quot;</span>);</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h4 id="方法2-静态方法DriverManager-registerDriver-注册驱动"><a href="#方法2-静态方法DriverManager-registerDriver-注册驱动" class="headerlink" title="方法2 - 静态方法DriverManager.registerDriver()注册驱动"></a>方法2 - 静态方法DriverManager.registerDriver()注册驱动</h4><p>第二种方法是使用静态<code>DriverManager.registerDriver()</code>方法来注册驱动程序。</p><p>如果使用的是非JDK兼容的JVM(如Microsoft提供的)，则应使用<code>registerDriver()</code>方法。</p><p>以下示例使用<code>registerDriver()</code>注册Oracle驱动程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Driver myDriver = <span class="keyword">new</span> oracle.jdbc.driver.OracleDriver();</span><br><span class="line">   DriverManager.registerDriver( myDriver );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Error: unable to load driver class!&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库连接URL配置"><a href="#数据库连接URL配置" class="headerlink" title="数据库连接URL配置"></a>数据库连接URL配置</h3><p>加载驱动程序后，可以使用<code>DriverManager.getConnection()</code>方法建立连接。 为了方便参考，这里列出三个重载的<code>DriverManager.getConnection()</code>方法</p><ul><li><code>getConnection(String url)</code></li><li><code>getConnection(String url, Properties prop)</code></li><li><code>getConnection(String url, String user, String password)</code></li></ul><p>这里每个格式都需要一个数据库URL。 数据库URL是指向数据库的地址。</p><p>制定数据库URL是建立连接相关联的大多数错误问题发生的地方。</p><p>下表列出了常用的JDBC驱动程序名称和数据库URL：</p><table><thead><tr><th>RDBMS</th><th align="left">JDBC驱动程序名称</th><th align="left">URL格式</th></tr></thead><tbody><tr><td>MySQL</td><td align="left">com.mysql.jdbc.Driver</td><td align="left">jdbc:mysql://hostname/databaseName</td></tr><tr><td>ORACLE</td><td align="left">oracle.jdbc.driver.OracleDriver</td><td align="left">jdbc:oracle:thin:@hostname:portNumber:databaseName</td></tr><tr><td>PostgreSQL</td><td align="left">org.postgresql.Driver</td><td align="left">jdbc:postgresql://hostname:port/dbname</td></tr><tr><td>DB2</td><td align="left">com.ibm.db2.jdbc.net.DB2Driver</td><td align="left">jdbc:db2:hostname:port Number/databaseName</td></tr><tr><td>Sybase</td><td align="left">com.sybase.jdbc.SybDriver</td><td align="left">jdbc:sybase:Tds:hostname: portNumber/databaseName</td></tr></tbody></table><p>URL格式的所有部分都是静态的，只需要根据数据库设置更改对应的部分。</p><h3 id="使用具有用户名和密码的数据库URL"><a href="#使用具有用户名和密码的数据库URL" class="headerlink" title="使用具有用户名和密码的数据库URL"></a>使用具有用户名和密码的数据库URL</h3><p>现在必须使用适当的用户名和密码调用<code>getConnection()</code>方法获取一个<code>Connection</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String URL = <span class="string">&quot;jdbc:mysql://hostname/databaseName&quot;</span>;</span><br><span class="line"><span class="comment">// String URL = &quot;jdbc:mysql://localhost:3306/crashcourse&quot;;</span></span><br><span class="line">String USER = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">String PASS = <span class="string">&quot;password&quot;</span></span><br><span class="line">Connection conn = DriverManager.getConnection(URL, USER, PASS);</span><br></pre></td></tr></table></figure><h4 id="使用properties进行配置"><a href="#使用properties进行配置" class="headerlink" title="使用properties进行配置"></a>使用properties进行配置</h4><p><strong>dbconf.properties:</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#com.mysql.jdbc.Driver 是 mysql-connector-java 5中的，</span></span><br><span class="line"><span class="comment">#DRIVER_CLASS=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6以上的</span></span><br><span class="line"><span class="attr">DRIVER_CLASS</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">DB_URL</span>=<span class="string">jdbc:mysql://localhost:3306/crashcourse?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">DB_USER</span>=<span class="string">dcm</span></span><br><span class="line"><span class="attr">DB_PASSWORD</span>=<span class="string">37628981mm</span></span><br></pre></td></tr></table></figure><p><strong>testConn:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heavytiget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.sql.* ;  <span class="comment">// for standard JDBC programs</span></span><br><span class="line"><span class="keyword">import</span> java.math.* ; <span class="comment">// for BigDecimal and BigInteger support</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">textJDBC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DRIVER_CLASS; <span class="comment">// 数据库驱动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DB_URL; <span class="comment">// 数据库连接地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DB_USER; <span class="comment">// 数据库用户名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DB_PASSWORD; <span class="comment">// 数据库用户密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建Properties类对象</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从输入流中加载属性列表</span></span><br><span class="line">            properties.load(textJDBC.class.getResourceAsStream(<span class="string">&quot;/db.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取数据库连接属性值</span></span><br><span class="line">            DRIVER_CLASS = properties.getProperty(<span class="string">&quot;DRIVER_CLASS&quot;</span>);</span><br><span class="line">            DB_URL = properties.getProperty(<span class="string">&quot;DB_URL&quot;</span>);</span><br><span class="line">            DB_USER = properties.getProperty(<span class="string">&quot;DB_USER&quot;</span>);</span><br><span class="line">            DB_PASSWORD = properties.getProperty(<span class="string">&quot;DB_PASSWORD&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加载数据库驱动类</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Class.forName(DRIVER_CLASS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接不成功！未找到驱动程序！\n&quot;</span>);</span><br><span class="line">                cnfe.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库驱动加载成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取数据库连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库连接成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception sqlException) &#123;</span><br><span class="line">            sqlException.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">                System.out.println(<span class="string">&quot;数据库成功关闭！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwable) &#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\SourceFiles\Java\jdk-11.0.5\bin\java.exe <span class="string">&quot;-javaagent:D:\SourceFiles\JetBrains\IntelliJ IDEA 2021.1.1\lib\idea_rt.jar=50331:D:\SourceFiles\JetBrains\IntelliJ IDEA 2021.1.1\bin&quot;</span> -Dfile.encoding=UTF-8 -classpath E:\ProgramDemo\Learn_MySQL\target\classes;C:\Users\DCM\.m2\repository\mysql\mysql-connector-java\8.0.25\mysql-connector-java-8.0.25.jar;C:\Users\DCM\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar com.heavytiget.textJDBC</span><br><span class="line"></span><br><span class="line">数据库驱动加载成功！</span><br><span class="line">数据库连接成功！</span><br><span class="line">数据库成功关闭！</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><p><strong>连接URL附加属性：</strong></p><p>此外，在进行连接时，可以附加Attribute，使用URL附加Attribute：</p><p>例如：<code>url=jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</code></p><table><thead><tr><th align="left">属性</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">IP</td><td align="left">例如：localhost，表示本机的地址，也可以使用其他的IP地址</td></tr><tr><td align="left">Port</td><td align="left">一般是3306，MySQL默认占用3306端口</td></tr><tr><td align="left">Database Name</td><td align="left">数据库名称，例如test，crashcourse等</td></tr><tr><td align="left">useUnicode=true</td><td align="left">true表示使用unicode编码</td></tr><tr><td align="left">characterEncoding=UTF-8</td><td align="left">表示使用UTF-8字符集</td></tr><tr><td align="left">serverTimezone=UTC</td><td align="left">在MySQL 6以上需要指定时区，UTC为标准时区，Asia/Shanghai为中国时区</td></tr></tbody></table><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>在测试代码中，使用了Maven构建项目，项目构建的结构如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\DCM&gt; tree E:\ProgramDemo\Learn_MySQL /f</span><br><span class="line"><span class="comment">#忽略.idea文件夹#</span></span><br><span class="line">E:\PROGRAMDEMO\LEARN_MYSQL</span><br><span class="line">│  pom.xml</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─heavytiget</span><br><span class="line">│  │  │              textJDBC.java</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │          db.properties</span><br><span class="line">│  └─<span class="built_in">test</span></span><br><span class="line">│      └─java</span><br><span class="line">└─target</span><br><span class="line">    ├─classes</span><br><span class="line">    │  │  db.properties</span><br><span class="line">    │  └─com</span><br><span class="line">    │      └─heavytiget</span><br><span class="line">    │              textJDBC.class</span><br><span class="line">    └─generated-sources</span><br><span class="line">        └─annotations</span><br></pre></td></tr></table></figure><p>可以看到，系统自动生成了源码文件夹<code>src.main</code>在该文件夹中，存放了需要用到的源码文件夹<code>java</code>和资源文件夹<code>resources</code>;</p><p>我们需要读取配置文件，因此第一想法就是将数据库配置文件<code>db.properties</code>放到项目的<code>resources</code>目录下；</p><p>但是在读取文件的时候会出现错误，直接用诸如<code>FileInputStream</code>类似的输入流会导致出现路径问题，需要使用提供好的<code>getResource</code>获取文件路径；</p><p><strong>可以使用<code>class</code>类提供的方法，获取资源地址：</strong></p><h4 id="public-URL-getResource-String-name"><a href="#public-URL-getResource-String-name" class="headerlink" title="public URL getResource(String name)"></a>public URL getResource(String name)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> URL <span class="title">getResource</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure><p>查找具有给定名称的资源。</p><p>如果此类位于命名的模块中，则此方法将尝试在模块中查找资源。这是通过委托模块的类加载器<code>findResource(String,String)</code>方法完成的，使用模块名称和资源的绝对名称调用它。命名模块中的资源受模块getResourceAsStream<code>方法中指定的封装规则的</code>模块<code>，因此当资源是未对调用方模块打开的包中的非</code>.class<code>资源时，此方法返回</code>null` 。 </p><p>否则，如果此类不在命名模块中，则用于搜索与给定类关联的资源的规则由类的定义class loader实现。 此方法委托给该对象的类加载器。 </p><p>如果此对象由引导类加载器加载，则该方法委托给:</p><p><code>ClassLoader.getSystemResource(java.lang.String)</code></p><p>在委派之前，使用此算法从给定资源名称构造绝对资源名称： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(textJDBC.class.getResource(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">//file:/E:/ProgramDemo/Learn_MySQL/target/classes/com/heavytiget/</span></span><br><span class="line">System.out.println(textJDBC.class.getResource(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"><span class="comment">//file:/E:/ProgramDemo/Learn_MySQL/target/classes/</span></span><br></pre></td></tr></table></figure><p>可以看到<code>getResource(&quot;&quot;)</code> 获取的是当前类生成字节码所在包的路径，而 <code>getResource(&quot;/&quot;)</code> 获取的是生成目录字节码文件夹的根路径；</p><h4 id="public-InputStream-getResourceAsStream-String-name"><a href="#public-InputStream-getResourceAsStream-String-name" class="headerlink" title="public InputStream getResourceAsStream(String name)"></a>public InputStream getResourceAsStream(String name)</h4><p>查找具有给定名称的资源。</p><p>如果此类位于命名的模块中，则此方法将尝试在模块中查找资源。 这是通过委托模块的类加载器<code>findResource(String,String)</code>方法完成的，使用模块名称和资源的绝对名称调用它。 命名模块中的资源受模块 <code>getResourceAsStream</code>方法中指定的封装规则的<code>模块</code> ，因此当资源是未对调用方模块打开的包中的非“ <code>.class</code> ”资源时，此方法返回<code>null</code> 。</p><p>否则，如果此类不在命名模块中，则用于搜索与给定类关联的资源的规则由类的定义class loader实现。 此方法委托给该对象的类加载器。 如果此对象由引导类加载器加载，则该方法委托给<code>ClassLoader.getSystemResourceAsStream(java.lang.String)</code> </p><p>在委派之前，使用此算法从给定资源名称构造绝对资源名称：</p><ul><li><p>如果<code>name</code>以<code>&#39;/&#39;</code> （ <code>&#39;\u002f&#39;</code> ）开头，那么资源的绝对名称是<code>name</code>之后的<code>&#39;/&#39;</code> 。</p></li><li><p>否则，绝对名称具有以下形式：</p><blockquote><p><code>modified_package_name/name</code></p></blockquote><p>其中<code>modified_package_name</code>是此对象的包名称， <code>&#39;/&#39;</code>替换为<code>&#39;.&#39;</code> （ <code>&#39;\u002e&#39;</code> ）。</p></li></ul><p><strong>getResourceAsStream这个函数寻找文件的起点是JAVA项目编译之后的根目录</strong></p><h3 id="关闭JDBC连接"><a href="#关闭JDBC连接" class="headerlink" title="关闭JDBC连接"></a>关闭JDBC连接</h3><p>在JDBC程序结束之后，显式地需要关闭与数据库的所有连接以结束每个数据库会话。 但是，如果在编写程序中忘记了关闭也没有关系，Java的垃圾收集器将在清除过时的对象时也会关闭这些连接。</p><p>依靠垃圾收集，特别是数据库编程，是一个非常差的编程实践。所以应该要使用与连接对象关联的<code>close()</code>方法关闭连接。</p><p>要确保连接已关闭，可以将关闭连接的代码中编写在<code>finally</code>块中。 一个<code>finally</code>块总是会被执行，不管是否发生异常。</p><p>要关闭上面打开的连接，应该调用<code>close()</code>方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.close();</span><br></pre></td></tr></table></figure><blockquote><p><strong>记录相关问题：</strong></p><p><strong>1. 任何数据库在得到ResultSet对象后都能显示地更新数据吗？</strong></p><p>可更新的ResultSet对象可以完成对数据库中表的修改，但是ResultSet只是相当于数据库中表的视图，所以并不时所有的ResultSet只要设置了可更新就能够完成更新的，能够完成更新的ResultSet的SQL语句必须要具备如下的属性：<br>  a、只引用了单个表。<br>  b、不含有join或者group by子句。<br>  c、那些列中要包含主关键字。 </p><p><strong>2.多次使用Statement去进行查询获取ResultSet会产生问题吗？</strong></p><p>正常情况下如果使用Statement执行完一个查询，又去执行另一个查询时这时候第一个查询的结果集就会被关闭.</p><p>所有的Statement的查询对应的结果集是一个，如果调用Connection的commit()方法也会关闭结果集。</p><p>可保持性就是指当ResultSet的结果被提交时，是被关闭还是不被关闭。JDBC2.0和1.0提供的都是提交后ResultSet就会被关闭。不过在JDBC3.0中，我们可以设置ResultSet是否关闭。要完成这样的ResultSet的对象的创建，要使用的Statement的创建要具有三个参数，这个Statement的创建方式也就是，Statement的第三种创建方式。 </p><p><strong>3.使用ResultSet查询出来的数据集记录很多时，那rs所指的对象是否会占用很多内存，如果记录过多，那程序会不会把系统的内存用光呢?</strong></p><p>不会的，ResultSet表面看起来是一个记录集，其实这个对象中只是记录了结果集的相关信息，具体的记录并没有存放在对象中，具体的记录内容知道你通过next方法提取的时候，再通过相关的getXXXXX方法提取字段内容的时候才能从数据库中得到，这些并不会占用内存，具体消耗内存是由于你将记录集中的数据提取出来加入到你自己的集合中的时候才会发生，如果你没有使用集合记录所有的记录就不会发生消耗内存厉害的情况。</p><p><strong>4.同一个Connection，创建了多个Statement，可以同时执行吗？</strong></p><blockquote><p>MySQL下，一个connection生成了50000个Statement都不报错，而Oracle会报<code>maximum open cursors exceeded</code>之类的错误。 </p><p>如果可以的话，那么一个网站只用开一个Connection，然后每个请求分别建立不同的Statement就可以了吗？</p><p>根据stackoverflow的解答，<code>Each SELECT statement has a cursor</code>，这个错误的原因还是<code>open statement</code>过多。为什么MySQL没有这样的问题？Oracle的cursor在MySQL中对应什么呢？</p></blockquote><p>答: 执行语句是查询时，查询是读锁，设置很多个查询也能读到相同的数据，互相并没有影响。但是对于更新就不是这样了，尤其是涉及到事务的时候。事务是以连接Connection为单位的，在JDBC中，默认autocommit是true，所以每一个SQL语句都是一个事务。当你在同一个连接上，创建不同的Statement的时候，是没法保证事务的ACID特性的，数据不一致就会发生，程序就是错误的。并且创建Connection是十分耗时的操作，一般情况下，都是使用连接池，比如c3p0，需要Connection的时候就去连接池取。Spring的事务管理是把Connection与当前线程关联起来实现事务。</p></blockquote><h2 id="JDBC-Statement语句"><a href="#JDBC-Statement语句" class="headerlink" title="JDBC Statement语句"></a>JDBC Statement语句</h2><p>当获得了与数据库的连接后，就可以与数据库进行交互了。 JDBC <code>Statement</code>，<code>CallableStatement</code>和<code>PreparedStatement</code>接口定义了可用于发送SQL或<em>PL/SQL</em>命令，并从数据库接收数据的方法和属性。</p><p>它们还定义了有助于在Java和SQL数据类型的数据类型差异转换的方法。<br>下表提供了每个接口定义，以及使用这些接口的目的的总结。</p><table><thead><tr><th align="left">接口</th><th align="left">推荐使用</th></tr></thead><tbody><tr><td align="left"><code>Statement</code></td><td align="left">用于对数据库进行通用访问，在运行时使用静态SQL语句时很有用。 <code>Statement</code>接口不能接受参数。</td></tr><tr><td align="left"><code>PreparedStatement</code></td><td align="left">当计划要多次使用SQL语句时使用。<code>PreparedStatement</code>接口在运行时接受输入参数。</td></tr><tr><td align="left"><code>CallableStatement</code></td><td align="left">当想要访问数据库存储过程时使用。<code>CallableStatement</code>接口也可以接受运行时输入参数。</td></tr></tbody></table><h3 id="Statement对象"><a href="#Statement对象" class="headerlink" title="Statement对象"></a>Statement对象</h3><h4 id="创建Statement对象"><a href="#创建Statement对象" class="headerlink" title="创建Statement对象"></a>创建Statement对象</h4><p>在使用<code>Statement</code>对象执行SQL语句之前，需要使用<code>Connection</code>对象的<code>createStatement()</code>方法创建一个<code>Statement</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    stmt = conn.createStatement();</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建<code>Statement</code>对象后，可以使用它来执行一个SQL语句，它有三个执行方法可以执行。它们分别是 -</p><ul><li><code>boolean execute (String SQL)</code>： 如果可以检索到<code>ResultSet</code>对象，则返回一个布尔值<code>true</code>; 否则返回<code>false</code>。使用此方法执行SQL DDL语句或需要使用真正的动态SQL，可使用于执行创建数据库，创建表的SQL语句等等。</li><li><code>int executeUpdate (String SQL)</code>: 返回受SQL语句执行影响的行数。使用此方法执行预期会影响多行的SQL语句，例如:<code>INSERT</code>，<code>UPDATE</code>或<code>DELETE</code>语句。</li><li><code>ResultSet executeQuery(String SQL)</code>：返回一个<code>ResultSet</code>对象。 当希望获得结果集时，请使用此方法，就像使用<code>SELECT</code>语句一样。</li></ul><h4 id="关闭Statement对象"><a href="#关闭Statement对象" class="headerlink" title="关闭Statement对象"></a>关闭Statement对象</h4><p>就像关闭一个<code>Connection</code>对象一样，也应该关闭<code>Statement</code>对象；</p><blockquote><p>一个简单的调用<code>close()</code>方法将执行该作业(工作)。 如果先关闭<code>Connection</code>对象，它也会关闭<code>Statement</code>对象。 但是，应该始终显式关闭<code>Statement</code>对象，以确保正确的清理顺序。</p></blockquote><h4 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h4><p>在连接数据库后，调用<code>testStatement(conn);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">testStatement</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test sql1;</span></span><br><span class="line">    String sql1 = <span class="string">&quot;INSERT INTO orders(order_date, cust_id) VALUES(Now(), 10006);&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sql1: The return value is: &quot;</span> + stmt.execute(sql1));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test sql2;</span></span><br><span class="line">    String sql2 = <span class="string">&quot;UPDATE orders SET cust_id = 10002 WHERE cust_id = 10001;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sql2: Total: &quot;</span> + stmt.executeUpdate(sql2));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test sql3, 4;</span></span><br><span class="line">    String sql3 = <span class="string">&quot;SELECT @order_num;&quot;</span>;</span><br><span class="line">    String sql4 = <span class="string">&quot;SELECT * FROM orders;&quot;</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rs = stmt.executeQuery(sql3);</span><br><span class="line">        rs.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;sql3: The PRIMARY KEY is: &quot;</span> + rs.getInt(<span class="string">&quot;@order_num&quot;</span>));</span><br><span class="line">        rs = stmt.executeQuery(sql4);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> order_num = rs.getInt(<span class="string">&quot;order_num&quot;</span>);</span><br><span class="line">            Timestamp order_date = rs.getTimestamp(<span class="string">&quot;order_date&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> cust_id = rs.getInt(<span class="string">&quot;cust_id&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;sql4: order_num: &quot;</span> + order_num + <span class="string">&quot;, order_date: &quot;</span> + order_date</span><br><span class="line">                    + <span class="string">&quot;, cust_id: &quot;</span> + cust_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;结果集关闭！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">数据库驱动加载成功！</span><br><span class="line">数据库连接成功！</span><br><span class="line">sql1: The <span class="built_in">return</span> value is: <span class="literal">false</span></span><br><span class="line">sql2: Total: 2</span><br><span class="line">sql3: The PRIMARY KEY is: 20024</span><br><span class="line">sql4: order_num: 20005, order_date: 2005-09-01 00:00:00.0, cust_id: 10002</span><br><span class="line">sql4: order_num: 20006, order_date: 2005-09-12 00:00:00.0, cust_id: 10003</span><br><span class="line">sql4: order_num: 20007, order_date: 2005-09-30 00:00:00.0, cust_id: 10004</span><br><span class="line">sql4: order_num: 20008, order_date: 2005-10-03 00:00:00.0, cust_id: 10005</span><br><span class="line">sql4: order_num: 20009, order_date: 2005-10-08 00:00:00.0, cust_id: 10002</span><br><span class="line">sql4: order_num: 20024, order_date: 2021-10-05 10:11:50.0, cust_id: 10006</span><br><span class="line">结果集关闭！</span><br><span class="line">数据库成功关闭！</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement对象"><a href="#PreparedStatement对象" class="headerlink" title="PreparedStatement对象"></a>PreparedStatement对象</h3><p><code>PreparedStatement</code>接口扩展了<code>Statement</code>接口，它添加了比<code>Statement</code>对象更好一些优点的功能。</p><p>此语句可以动态地提供/接受参数。</p><h4 id="创建PreparedStatement对象"><a href="#创建PreparedStatement对象" class="headerlink" title="创建PreparedStatement对象"></a>创建PreparedStatement对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">&quot;Update Employees SET age = ? WHERE id = ?&quot;</span>;</span><br><span class="line">   pstmt = conn.prepareStatement(SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDBC中的所有参数都由 <code>?</code> 符号作为占位符，这被称为参数标记。 在执行SQL语句之前，必须为每个参数(占位符)提供值。</p><p><code>setXXX()</code>方法将值绑定到参数，其中<code>XXX</code>表示要绑定到输入参数的值的Java数据类型。 如果忘记提供绑定值，则将会抛出一个<code>SQLException</code>。</p><p>每个参数标记是它其顺序位置引用。第一个标记表示位置<code>1</code>，下一个位置<code>2</code>等等。 该方法与Java数组索引不同(它不从<code>0</code>开始)。</p><p>所有<code>Statement</code>对象与数据库交互的方法</p><p>(a)<code>execute()</code><br>(b)<code>executeQuery()</code><br>(c)<code>executeUpdate()</code></p><p>也可以用于<code>PreparedStatement</code>对象。 但是，这些方法被修改为可以使用输入参数的SQL语句。</p><h4 id="关闭PreparedStatement对象"><a href="#关闭PreparedStatement对象" class="headerlink" title="关闭PreparedStatement对象"></a>关闭PreparedStatement对象</h4><p>就像关闭<code>Statement</code>对象一样，由于同样的原因(节省数据库系统资源)，也应该关闭<code>PreparedStatement</code>对象。</p><p>简单的调用<code>close()</code>方法将执行关闭。 如果先关闭<code>Connection</code>对象，它也会关闭<code>PreparedStatement</code>对象。 但是，应该始终显式关闭<code>PreparedStatement</code>对象，以确保以正确顺序清理资源。</p><h4 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h4><p>在连接数据库后，调用<code>testPreparedStatement(conn);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">testPreparedStatement</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// test sql1;</span></span><br><span class="line">            String sql1 = <span class="string">&quot;INSERT INTO orders(order_date, cust_id) VALUES(?, ?);&quot;</span>;</span><br><span class="line">            preparedStatement = conn.prepareStatement(sql1);</span><br><span class="line">            Date date = <span class="keyword">new</span> java.util.Date();</span><br><span class="line">            Timestamp timestamp = <span class="keyword">new</span> Timestamp(date.getTime());</span><br><span class="line">            preparedStatement.setTimestamp(<span class="number">1</span>, timestamp);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">10008</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">            <span class="comment">// test sql2;</span></span><br><span class="line">            String sql2 = <span class="string">&quot;SELECT * FROM orders;&quot;</span>;</span><br><span class="line">            rs = preparedStatement.executeQuery(sql2);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> order_num = rs.getInt(<span class="string">&quot;order_num&quot;</span>);</span><br><span class="line">                Timestamp order_date = rs.getTimestamp(<span class="string">&quot;order_date&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> cust_id = rs.getInt(<span class="string">&quot;cust_id&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;sql4: order_num: &quot;</span> + order_num + <span class="string">&quot;, order_date: &quot;</span> + order_date</span><br><span class="line">                        + <span class="string">&quot;, cust_id: &quot;</span> + cust_id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数据库驱动加载成功！</span><br><span class="line">数据库连接成功！</span><br><span class="line">sql4: order_num: 20005, order_date: 2005-09-01 00:00:00.0, cust_id: 10002</span><br><span class="line">sql4: order_num: 20006, order_date: 2005-09-12 00:00:00.0, cust_id: 10003</span><br><span class="line">sql4: order_num: 20007, order_date: 2005-09-30 00:00:00.0, cust_id: 10004</span><br><span class="line">sql4: order_num: 20008, order_date: 2005-10-03 00:00:00.0, cust_id: 10005</span><br><span class="line">sql4: order_num: 20009, order_date: 2005-10-08 00:00:00.0, cust_id: 10002</span><br><span class="line">sql4: order_num: 20024, order_date: 2021-10-05 10:11:50.0, cust_id: 10006</span><br><span class="line">sql4: order_num: 20025, order_date: 2021-10-05 11:10:43.0, cust_id: 10008</span><br><span class="line">数据库成功关闭！</span><br></pre></td></tr></table></figure><h3 id="CallableStatement对象"><a href="#CallableStatement对象" class="headerlink" title="CallableStatement对象"></a>CallableStatement对象</h3><p>类似<code>Connection</code>对象创建<code>Statement</code>和<code>PreparedStatement</code>对象一样，它还可以使用同样的方式创建<code>CallableStatement</code>对象，该对象将用于执行对数据库存储过程的调用。</p><h4 id="创建CallableStatement对象"><a href="#创建CallableStatement对象" class="headerlink" title="创建CallableStatement对象"></a>创建CallableStatement对象</h4><p>存储过程存在三种类型的参数：<code>IN</code>，<code>OUT</code>和<code>INOUT</code>。 <code>PreparedStatement</code>对象只使用<code>IN</code>参数。<code>CallableStatement</code>对象可以使用上面三个参数类型。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">IN</td><td align="left">创建SQL语句时其参数值是未知的。 使用<code>setXXX()</code>方法将值绑定到<code>IN</code>参数。</td></tr><tr><td align="left">OUT</td><td align="left">由SQL语句返回的参数值。可以使用<code>getXXX()</code>方法从OUT参数中检索值。</td></tr><tr><td align="left">INOUT</td><td align="left">提供输入和输出值的参数。使用<code>setXXX()</code>方法绑定变量并使用<code>getXXX()</code>方法检索值。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement cstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String strSQL = <span class="string">&quot;&#123;call getEmpName (?, ?)&#125;&quot;</span>;</span><br><span class="line">   cstmt = conn.prepareCall (SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String变量<code>strSQL</code>表示存储过程，带有两个参数占位符。</p><p>使用<code>CallableStatement</code>对象就像使用<code>PreparedStatement</code>对象一样。 在执行语句之前，必须将值绑定到所有参数，否则将抛出一个<code>SQLException</code>异常。</p><p>如果有<code>IN</code>参数，只需遵循适用于<code>PreparedStatement</code>对象的相同规则和技术; 使用与绑定的Java数据类型相对应的<code>setXXX()</code>方法。</p><p>使用<code>OUT</code>和<code>INOUT</code>参数时，必须使用一个额外的<code>CallableStatement</code>对象方法<code>registerOutParameter()</code>, <code>registerOutParameter()</code>方法将JDBC数据类型绑定到存储过程并返回预期数据类型。</p><p>当调用存储过程，可以使用适当的<code>getXXX()</code>方法从<code>OUT</code>参数中检索该值。 此方法将检索到的SQL类型的值转换为对应的Java数据类型。</p><h4 id="关闭CallabeleStatement对象"><a href="#关闭CallabeleStatement对象" class="headerlink" title="关闭CallabeleStatement对象"></a>关闭CallabeleStatement对象</h4><p>就像关闭其他<code>Statement</code>对象一样，由于同样的原因(节省数据库系统资源)，还应该关闭<code>CallableStatement</code>对象。</p><p>简单的调用<code>close()</code>方法将执行关闭<code>CallableStatement</code>对象。 如果先关闭<code>Connection</code>对象，它也会关闭<code>CallableStatement</code>对象。 但是，应该始终显式关闭<code>CallableStatement</code>对象，以确保按正确顺序的清理资源。</p><h4 id="实例演示-2"><a href="#实例演示-2" class="headerlink" title="实例演示"></a>实例演示</h4><p><strong>存储过程如下所示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> ordercount(</span><br><span class="line"><span class="keyword">IN</span> onum <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> onum</span><br><span class="line"><span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><strong>需要提供一个INT型的IN参数，得到一个DECIMAL类型的OUT参数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">testCallableStatement</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">        CallableStatement cs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// test sql1;</span></span><br><span class="line">            String sql1 = <span class="string">&quot;&#123;call ordercount (?, ?)&#125;;&quot;</span>;</span><br><span class="line">            cs = conn.prepareCall(sql1);</span><br><span class="line">            <span class="keyword">int</span> order_num = <span class="number">20005</span>;</span><br><span class="line">            cs.setInt(<span class="number">1</span>, order_num);</span><br><span class="line">            cs.registerOutParameter(<span class="number">2</span>, Types.DECIMAL);</span><br><span class="line">            cs.execute();</span><br><span class="line">            System.out.println(<span class="string">&quot;order_num = &quot;</span> + order_num + <span class="string">&quot;, totalCount = &quot;</span> + cs.getString(<span class="number">2</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据库驱动加载成功！</span><br><span class="line">数据库连接成功！</span><br><span class="line">order_num = 20005, totalCount = 149.87</span><br><span class="line">数据库成功关闭！</span><br></pre></td></tr></table></figure><p><strong>使用powershell获得结果：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> ordercount(<span class="number">20005</span>, <span class="variable">@total</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@total</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">149.87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="JDBC结果集"><a href="#JDBC结果集" class="headerlink" title="JDBC结果集"></a>JDBC结果集</h2><p>SQL语句执行后从数据库查询读取数据，返回的数据放在结果集中。 <code>SELECT</code>语句用于从数据库中选择行并在结果集中查看它们的标准方法。 <code>java.sql.ResultSet</code>接口表示数据库查询的结果集。</p><p><code>ResultSet</code>对象维护指向结果集中当前行的游标。 术语“结果集”是指包含在<code>ResultSet</code>对象中的行和列数据。</p><p><code>ResultSet</code>接口的方法可以分为三类：</p><ul><li><strong>浏览方法</strong>：用于移动光标。</li><li><strong>获取方法</strong>：用于查看光标指向的当前行的列中的数据。</li><li><strong>更新方法</strong>：用于更新当前行的列中的数据。 然后在基础数据库中更新数据。</li></ul><p>光标可以基于<code>ResultSet</code>的属性移动。当创建生成<code>ResultSet</code>的相应<code>Statement</code>时，将指定这些属性。</p><p>JDBC提供以下连接方法来创建具有所需<code>ResultSet</code>的语句 -</p><ul><li><code>createStatement(int RSType, int RSConcurrency);</code></li><li><code>prepareStatement(String SQL, int RSType, int RSConcurrency);</code></li><li><code>prepareCall(String sql, int RSType, int RSConcurrency);</code></li></ul><p>第一个参数表示<code>ResultSet</code>对象的类型，第二个参数是两个<code>ResultSet</code>常量之一，用于指定结果集是只读还是可更新。</p><h3 id="ResultSet类型"><a href="#ResultSet类型" class="headerlink" title="ResultSet类型"></a>ResultSet类型</h3><p>可能的<code>RSType</code>值如下。如果不指定任何<code>ResultSet</code>类型，将自动分配一个<code>TYPE_FORWARD_ONLY</code>值。</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>ResultSet.TYPE_FORWARD_ONLY</code></td><td>光标只能在结果集中向前移动。</td></tr><tr><td><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code></td><td>光标可以向前和向后滚动，结果集对创建结果集后发生的数据库所做的更改不敏感。</td></tr><tr><td><code>ResultSet.TYPE_SCROLL_SENSITIVE</code></td><td>光标可以向前和向后滚动，结果集对创建结果集之后发生的其他数据库的更改敏感。</td></tr></tbody></table><h3 id="ResultSet的并发性"><a href="#ResultSet的并发性" class="headerlink" title="ResultSet的并发性"></a>ResultSet的并发性</h3><p>可能的<code>RSConcurrency</code>如下。 如果不指定任何并发类型，将自动获得一个<code>CONCUR_READ_ONLY</code>值。</p><table><thead><tr><th>并发</th><th>描述</th></tr></thead><tbody><tr><td><code>ResultSet.CONCUR_READ_ONLY</code></td><td>创建只读结果集，这是默认值。</td></tr><tr><td><code>ResultSet.CONCUR_UPDATABLE</code></td><td>创建可更新的结果集</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以使用诸如以下语句初始化一个Statement对象，并通过对象创建一个ResultSet对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Statement stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, </span><br><span class="line">                                      ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql, </span><br><span class="line">                                             ResultSet.TYPE_FORWARD_ONLY,</span><br><span class="line">                                             ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">CallableStatement cs = conn.prepareCall(sql,</span><br><span class="line">                                        ResultSet.TYPE_SCROLL_SENSITIV,</span><br><span class="line">                                        ResultSet.CONCUR_UPDATABLE);</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览结果集"><a href="#浏览结果集" class="headerlink" title="浏览结果集"></a>浏览结果集</h3><p><code>ResultSet</code>接口中有几种涉及移动光标的方法，包括：</p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void beforeFirst() throws SQLException</code></td><td>将光标移动到第一行之前</td></tr><tr><td>2</td><td><code>public void afterLast() throws SQLException</code></td><td>将光标移动到最后一行之后。</td></tr><tr><td>3</td><td><code>public boolean first() throws SQLException</code></td><td>将光标移动到第一行。</td></tr><tr><td>4</td><td><code>public void last() throws SQLException</code></td><td>将光标移动到最后一行。</td></tr><tr><td>5</td><td><code>public boolean absolute(int row) throws SQLException</code></td><td>将光标移动到指定的行。</td></tr><tr><td>6</td><td><code>public boolean relative(int row) throws SQLException</code></td><td>从当前指向的位置，将光标向前或向后移动给定行数。</td></tr><tr><td>7</td><td><code>public boolean previous() throws SQLException</code></td><td>将光标移动到上一行。 如果上一行关闭结果集，此方法返回<code>false</code>。</td></tr><tr><td>8</td><td><code>public boolean next() throws SQLException</code></td><td>将光标移动到下一行。 如果结果集中没有更多行，则此方法返回<code>false</code>。</td></tr><tr><td>9</td><td><code>public int getRow() throws SQLException</code></td><td>返回光标指向的行号。</td></tr><tr><td>10</td><td><code>public void moveToInsertRow() throws SQLException</code></td><td>将光标移动到结果集中的特殊行，该行可用于将新行插入数据库。当前光标位置被记住。</td></tr><tr><td>11</td><td><code>public void moveToCurrentRow() throws SQLException</code></td><td>如果光标当前位于插入行，则将光标移回当前行; 否则，此方法什么也不做</td></tr></tbody></table><h3 id="查看结果集"><a href="#查看结果集" class="headerlink" title="查看结果集"></a>查看结果集</h3><p><code>ResultSet</code>接口包含数十种获取当前行数据的方法。</p><p>每个可能的数据类型都有一个<code>get</code>方法，每个<code>get</code>方法有两个版本 -</p><ul><li>一个是采用列名称，如’order_num’, ‘cust_id’等</li><li>另一个采用列索引，如1表示第一列，2表示第二列等</li></ul><p>如果对查看感兴趣的列包含一个<code>int</code>，则需要使用<code>ResultSet</code>的其中一个<code>getInt()</code>方法：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public int getInt(String columnName) throws SQLException</code></td><td>返回名为<code>columnName</code>的列中当前行中的<code>int</code>值。</td></tr><tr><td>2</td><td><code>public int getInt(int columnIndex) throws SQLException</code></td><td>返回指定列索引当前行中的<code>int</code>值。列索引从<code>1</code>开始，意味着行的第一列为<code>1</code>，行的第二列为<code>2</code>，依此类推。</td></tr></tbody></table><p>类似地，在八个Java基元类型中的每一个的<code>ResultSet</code>接口中都有<code>get</code>方法，以及常见的类型，如<code>java.lang.String</code>，<code>java.lang.Object</code>和<code>java.net.URL</code>等。</p><p>还有一些方法可以获取SQL数据类型<code>java.sql.Date</code>，<code>java.sql.Time</code>，<code>java.sql.TimeStamp</code>，<code>java.sql.Clob</code>和<code>java.sql.Blob</code>。</p><h3 id="更新结果集"><a href="#更新结果集" class="headerlink" title="更新结果集"></a>更新结果集</h3><p><code>ResultSet</code>接口包含用于更新结果集的数据的更新方法的集合。</p><p>与get方法一样，每种数据类型都有两种更新方法 -</p><ul><li>一个是采用列名称。</li><li>另一个采用列索引。</li></ul><p>例如，要更新<strong>结果集当前行</strong>的<code>String</code>列，可以使用以下<code>updateString()</code>方法之一：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void updateString(int columnIndex, String s) throws SQLException</code></td><td>将指定列中的<code>String</code>值更改为指定的<code>s</code>值。</td></tr><tr><td>2</td><td><code>public void updateString(String columnName, String s) throws SQLException</code></td><td>与前前的方法类似，除了使用列的名称而不是列的索引指定。</td></tr></tbody></table><p>有八种基本数据类型的更新方法，以及<code>java.sql</code>包中的<code>String</code>，<code>Object</code>，<code>URL</code>和SQL数据类型。</p><p><strong>更新结果集中的一行会更改<code>ResultSet</code>对象中当前行的列，但不会更改底层数据库中的列的值。</strong></p><p>若想要数据库中的行也对应更改，则应该调用以下的方法之一：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void updateRow()</code></td><td>更新数据库中当前行</td></tr><tr><td>2</td><td><code>public void deleteRow()</code></td><td>从数据库中删除当前行</td></tr><tr><td>3</td><td><code>public void refreshRow()</code></td><td>刷新结果集中的数据以反映数据库中最近的任何更改。</td></tr><tr><td>4</td><td><code>public void cancelRowUpdates()</code></td><td>取消对当前行所做的任何更新。</td></tr><tr><td>5</td><td><code>public void insertRow()</code></td><td>在数据库中插入一行。 只有当光标指向插入行时，才能调用此方法。</td></tr></tbody></table><p><strong>若使用了多个表，会导致无法更新数据，出现报错</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.cj.jdbc.exceptions.NotUpdatable: Result Set not updatable (references more than one table).This result <span class="built_in">set</span> must come from a statement that was created with a result <span class="built_in">set</span> <span class="built_in">type</span> of ResultSet.CONCUR_UPDATABLE, the query must select only one table, can not use <span class="built_in">functions</span> and must select all primary keys from that table. See the JDBC 2.1 API Specification, section 5.6 <span class="keyword">for</span> more details.</span><br><span class="line">at com.mysql.cj.jdbc.result.UpdatableResultSet.generateStatements(UpdatableResultSet.java:570)</span><br><span class="line">at com.mysql.cj.jdbc.result.UpdatableResultSet.syncUpdate(UpdatableResultSet.java:1140)</span><br><span class="line">at com.mysql.cj.jdbc.result.UpdatableResultSet.updateInt(UpdatableResultSet.java:1475)</span><br><span class="line">at com.heavytiget.textJDBC.testUpdateRow(textJDBC.java:188)</span><br><span class="line">at com.heavytiget.textJDBC.main(textJDBC.java:47)</span><br></pre></td></tr></table></figure><p>因此使用联结会导致出错，故将sql做出修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">testUpdateRow</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             stmt = conn.createStatement(</span><br><span class="line">                    ResultSet.TYPE_SCROLL_INSENSITIVE,</span><br><span class="line">                    ResultSet.CONCUR_UPDATABLE);</span><br><span class="line">            String sql = <span class="string">&quot;SELECT order_num, order_item, quantity, item_price FROM orderitems;&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">// 索引全部</span></span><br><span class="line">            System.out.println(<span class="string">&quot;开始读取的数据：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前的rs指向：&quot;</span> + rs.getRow() + <span class="string">&quot;: order_num: &quot;</span> + rs.getInt(<span class="number">1</span>) + <span class="string">&quot;, order_item: &quot;</span> + rs.getInt(<span class="number">2</span>)</span><br><span class="line">                        + <span class="string">&quot;, quantity: &quot;</span> + rs.getInt(<span class="number">3</span>) + <span class="string">&quot;, price: &quot;</span> + rs.getFloat(<span class="number">4</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            rs.beforeFirst();</span><br><span class="line">            <span class="comment">// 将所有的数量加1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;修改后数据：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;当前的rs指向beforeFirst：&quot;</span> + rs.getRow());</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                rs.updateInt(<span class="number">3</span>, rs.getInt(<span class="number">3</span>) + <span class="number">1</span>);</span><br><span class="line">                rs.updateRow();</span><br><span class="line">                System.out.println(<span class="string">&quot;当前的rs指向：&quot;</span> + rs.getRow() + <span class="string">&quot;: order_num: &quot;</span> + rs.getInt(<span class="number">1</span>) + <span class="string">&quot;, order_item: &quot;</span> + rs.getInt(<span class="number">2</span>)</span><br><span class="line">                        + <span class="string">&quot;, quantity: &quot;</span> + rs.getInt(<span class="number">3</span>) + <span class="string">&quot;, price: &quot;</span> + rs.getFloat(<span class="number">4</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前的rs指向afterLast：&quot;</span> + rs.getRow());</span><br><span class="line">            <span class="comment">// 将第1行数据删除</span></span><br><span class="line">            rs.absolute(<span class="number">1</span>);</span><br><span class="line">            rs.deleteRow();</span><br><span class="line">            System.out.println(<span class="string">&quot;第1行已删除&quot;</span>);</span><br><span class="line">            <span class="comment">// 插入一行</span></span><br><span class="line">            <span class="comment">// 此处出现报错，原因是属性prod_id值设置为NOT NULL，因此未设置该值就无法插入；</span></span><br><span class="line">            rs.moveToInsertRow();</span><br><span class="line">            rs.updateInt(<span class="number">1</span>,<span class="number">20099</span>);</span><br><span class="line">            rs.updateInt(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">            rs.updateInt(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">            rs.updateFloat(<span class="number">4</span>, (<span class="keyword">float</span>) <span class="number">10.99</span>);</span><br><span class="line">            <span class="comment">//Commit row</span></span><br><span class="line">            rs.insertRow();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">数据库驱动加载成功！</span><br><span class="line">数据库连接成功！</span><br><span class="line">开始读取的数据：</span><br><span class="line">当前的rs指向：1: order_num: 20005, order_item: 4, quantity: 4, price: 10.0</span><br><span class="line">当前的rs指向：2: order_num: 20006, order_item: 1, quantity: 4, price: 55.0</span><br><span class="line">当前的rs指向：3: order_num: 20007, order_item: 1, quantity: 103, price: 10.0</span><br><span class="line">当前的rs指向：4: order_num: 20008, order_item: 1, quantity: 53, price: 2.5</span><br><span class="line">当前的rs指向：5: order_num: 20009, order_item: 1, quantity: 4, price: 10.0</span><br><span class="line">当前的rs指向：6: order_num: 20009, order_item: 2, quantity: 4, price: 8.99</span><br><span class="line">当前的rs指向：7: order_num: 20009, order_item: 3, quantity: 4, price: 4.49</span><br><span class="line">当前的rs指向：8: order_num: 20009, order_item: 4, quantity: 4, price: 14.99</span><br><span class="line">修改后数据：</span><br><span class="line">当前的rs指向beforeFirst：0</span><br><span class="line">当前的rs指向：1: order_num: 20005, order_item: 4, quantity: 5, price: 10.0</span><br><span class="line">当前的rs指向：2: order_num: 20006, order_item: 1, quantity: 5, price: 55.0</span><br><span class="line">当前的rs指向：3: order_num: 20007, order_item: 1, quantity: 104, price: 10.0</span><br><span class="line">当前的rs指向：4: order_num: 20008, order_item: 1, quantity: 54, price: 2.5</span><br><span class="line">当前的rs指向：5: order_num: 20009, order_item: 1, quantity: 5, price: 10.0</span><br><span class="line">当前的rs指向：6: order_num: 20009, order_item: 2, quantity: 5, price: 8.99</span><br><span class="line">当前的rs指向：7: order_num: 20009, order_item: 3, quantity: 5, price: 4.49</span><br><span class="line">当前的rs指向：8: order_num: 20009, order_item: 4, quantity: 5, price: 14.99</span><br><span class="line">当前的rs指向afterLast：0</span><br><span class="line">第1行已删除</span><br><span class="line">数据库成功关闭！</span><br><span class="line">java.sql.SQLException: Field <span class="string">&#x27;prod_id&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1092)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1040)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1348)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1025)</span></span><br><span class="line"><span class="string">at com.mysql.cj.jdbc.result.UpdatableResultSet.insertRow(UpdatableResultSet.java:736)</span></span><br><span class="line"><span class="string">at com.heavytiget.textJDBC.testUpdateRow(textJDBC.java:207)</span></span><br><span class="line"><span class="string">at com.heavytiget.textJDBC.main(textJDBC.java:47)</span></span><br></pre></td></tr></table></figure><p>可以看到在插入行时出现了错误，原因是属性prod_id值定义为NOT NULL，而rs无法获取该列，因此未设置该值就无法插入；</p><p>该表定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `orderitems` (</span><br><span class="line">  `order_num` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_item` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `prod_id` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `quantity` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `item_price` <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_num`,`order_item`),</span><br><span class="line">  KEY `fk_orderitems_products` (`prod_id`));</span><br></pre></td></tr></table></figure><h2 id="JDBC数据类型"><a href="#JDBC数据类型" class="headerlink" title="JDBC数据类型"></a>JDBC数据类型</h2><p>JDBC驱动程序将Java数据类型转换为适当的JDBC类型，然后将其发送到数据库。 它为大多数数据类型提供并使用默认映射。 例如，Java <code>int</code>类型会被转换为SQL <code>INTEGER</code>。 创建默认映射以提供到驱动程序时保持一致性。</p><p>下表总结了当调用<code>PreparedStatement</code>或<code>CallableStatement</code>对象或<code>ResultSet.updateXXX()</code>方法的<code>setXXX()</code>方法时，将Java数据类型转换为的默认JDBC数据类型。</p><table><thead><tr><th align="center">SQL类型</th><th align="center">JDBC/Java类型</th><th align="center">setXXX</th><th align="center">updateXXX</th></tr></thead><tbody><tr><td align="center">VARCHAR</td><td align="center">java.lang.String</td><td align="center">setString</td><td align="center">updateString</td></tr><tr><td align="center">CHAR</td><td align="center">java.lang.String</td><td align="center">setString</td><td align="center">updateString</td></tr><tr><td align="center">LONGVARCHAR</td><td align="center">java.lang.String</td><td align="center">setString</td><td align="center">updateString</td></tr><tr><td align="center">BIT</td><td align="center">boolean</td><td align="center">setBoolean</td><td align="center">updateBoolean</td></tr><tr><td align="center">NUMERIC</td><td align="center">java.math.BigDecimal</td><td align="center">setBigDecimal</td><td align="center">updateBigDecimal</td></tr><tr><td align="center">TINYINT</td><td align="center">byte</td><td align="center">setByte</td><td align="center">updateByte</td></tr><tr><td align="center">SMALLINT</td><td align="center">short</td><td align="center">setShort</td><td align="center">updateShort</td></tr><tr><td align="center">INTEGER</td><td align="center">int</td><td align="center">setInt</td><td align="center">updateInt</td></tr><tr><td align="center">BIGINT</td><td align="center">long</td><td align="center">setLong</td><td align="center">updateLong</td></tr><tr><td align="center">REAL</td><td align="center">float</td><td align="center">setFloat</td><td align="center">updateFloat</td></tr><tr><td align="center">FLOAT</td><td align="center">float</td><td align="center">setFloat</td><td align="center">updateFloat</td></tr><tr><td align="center">DOUBLE</td><td align="center">double</td><td align="center">setDouble</td><td align="center">updateDouble</td></tr><tr><td align="center">VARBINARY</td><td align="center">byte[ ]</td><td align="center">setBytes</td><td align="center">updateBytes</td></tr><tr><td align="center">BINARY</td><td align="center">byte[ ]</td><td align="center">setBytes</td><td align="center">updateBytes</td></tr><tr><td align="center">DATE</td><td align="center">java.sql.Date</td><td align="center">setDate</td><td align="center">updateDate</td></tr><tr><td align="center">TIME</td><td align="center">java.sql.Time</td><td align="center">setTime</td><td align="center">updateTime</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">java.sql.Timestamp</td><td align="center">setTimestamp</td><td align="center">updateTimestamp</td></tr><tr><td align="center">DATETIME</td><td align="center">java.sql.Timestamp</td><td align="center">setTimestamp</td><td align="center">updateTimestamp</td></tr><tr><td align="center">CLOB</td><td align="center">java.sql.Clob</td><td align="center">setClob</td><td align="center">updateClob</td></tr><tr><td align="center">BLOB</td><td align="center">java.sql.Blob</td><td align="center">setBlob</td><td align="center">updateBlob</td></tr><tr><td align="center">ARRAY</td><td align="center">java.sql.Array</td><td align="center">setARRAY</td><td align="center">updateARRAY</td></tr><tr><td align="center">REF</td><td align="center">java.sql.Ref</td><td align="center">SetRef</td><td align="center">updateRef</td></tr><tr><td align="center">STRUCT</td><td align="center">java.sql.Struct</td><td align="center">SetStruct</td><td align="center">updateStruct</td></tr></tbody></table><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p><code>java.sql.Date</code>类映射到SQL <code>DATE</code>类型，<code>java.sql.Time</code>和<code>java.sql.Timestamp</code>类分别映射到SQL <code>TIME</code>和SQL <code>TIMESTAMP</code>数据类型。</p><p>以下示例显示了<code>Date</code>和<code>Time</code>类如何格式化为标准Java日期和时间值以匹配SQL数据类型要求:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqlDateTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        java.util.Date javaDate = <span class="keyword">new</span> java.util.Date();</span><br><span class="line">        <span class="keyword">long</span> javaTime = javaDate.getTime();     <span class="comment">//返回自此 Date对象表示的1970年1月1日00:00:00 GMT以来的毫秒数。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;The Java Date is:&quot;</span> +</span><br><span class="line">                javaDate.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Get and display SQL DATE</span></span><br><span class="line">        java.sql.Date sqlDate = <span class="keyword">new</span> java.sql.Date(javaTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;The SQL DATE is: &quot;</span> +</span><br><span class="line">                sqlDate.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Get and display SQL TIME</span></span><br><span class="line">        java.sql.Time sqlTime = <span class="keyword">new</span> java.sql.Time(javaTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;The SQL TIME is: &quot;</span> +</span><br><span class="line">                sqlTime.toString());</span><br><span class="line">        <span class="comment">//Get and display SQL TIMESTAMP</span></span><br><span class="line">        java.sql.Timestamp sqlTimestamp =</span><br><span class="line">                <span class="keyword">new</span> java.sql.Timestamp(javaTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;The SQL TIMESTAMP is: &quot;</span> +</span><br><span class="line">                sqlTimestamp.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The Java Date is:Tue Oct 05 21:31:47 CST 2021</span><br><span class="line">The SQL DATE is: 2021-10-05</span><br><span class="line">The SQL TIME is: 21:31:47</span><br><span class="line">The SQL TIMESTAMP is: 2021-10-05 21:31:47.314</span><br></pre></td></tr></table></figure><h3 id="处理NULL值"><a href="#处理NULL值" class="headerlink" title="处理NULL值"></a>处理NULL值</h3><p>SQL使用<code>NULL</code>值和Java使用<code>null</code>是不同的概念。在java中获取数据库中的NULL值会返回0；</p><p>所以，要在Java中处理SQL <code>NULL</code>值，可以使用三种策略：</p><ul><li>避免使用返回原始数据类型的<code>getXXX()</code>方法。</li><li>对原始数据类型使用包装类，并使用<code>ResultSet</code>对象的<code>wasNull()</code>方法来测试接收<code>getXXX()</code>方法的返回值的包装器类变量是否应设置为<code>null</code>。</li><li>使用原始数据类型和<code>ResultSet</code>对象的<code>wasNull()</code>方法来测试接收到由<code>getXXX()</code>方法返回的值的原始变量是否应设置为表示<code>NULL</code>的可接受值。</li></ul><p><strong>举例说明：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNull</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// test sql return NULL;</span></span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM ordertotals;&quot;</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;不处理NULL：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前的rs指向：&quot;</span> + rs.getRow() + <span class="string">&quot;: order_num: &quot;</span> + rs.getInt(<span class="number">1</span>) +</span><br><span class="line">                        <span class="string">&quot;, total_tax: &quot;</span> + rs.getFloat(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            rs.beforeFirst();</span><br><span class="line">            System.out.println(<span class="string">&quot;处理NULL：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;当前的rs指向：&quot;</span> + rs.getRow() + <span class="string">&quot;: order_num: &quot;</span> + rs.getInt(<span class="number">1</span>) +</span><br><span class="line">                        <span class="string">&quot;, total_tax: &quot;</span>);</span><br><span class="line">                <span class="keyword">float</span> price = rs.getFloat(<span class="number">2</span>);</span><br><span class="line">                System.out.println(rs.wasNull() ? <span class="keyword">null</span> : price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                System.out.println(<span class="string">&quot;结果集关闭！&quot;</span>);</span><br><span class="line">                stmt.close();</span><br><span class="line">                System.out.println(<span class="string">&quot;Statement关闭！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>java.sql.ResultSet public abstract boolean wasNull()</code><br>throws java.sql.SQLException</p><p>Reports whether the last column read had a value of SQL NULL. Note that you must first call one of the getter methods on a column to try to read its value and then call the method wasNull to see if the value read was SQL NULL.</p><p><code>return:</code><br>true if the last column value read was SQL NULL and false otherwise<br><code>throw:</code><br>java.sql.SQLException – if a database access error occurs or this method is called on a closed result set</p></blockquote><p>由javadoc可知，需要首先使用一个getters方法去获取某行某列的一个值，在获取之后，使用<code>wasNull</code>方法，可以判断该值是否是<code>SQL NULL</code>，如果是，则可以再进行判断。</p><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">数据库驱动加载成功！</span><br><span class="line">数据库连接成功！</span><br><span class="line">不处理NULL：</span><br><span class="line">当前的rs指向：1: order_num: 20005, total_tax: 158.86</span><br><span class="line">当前的rs指向：2: order_num: 20009, total_tax: 40.78</span><br><span class="line">当前的rs指向：3: order_num: 20006, total_tax: 58.3</span><br><span class="line">当前的rs指向：4: order_num: 20007, total_tax: 1060.0</span><br><span class="line">当前的rs指向：5: order_num: 20008, total_tax: 132.5</span><br><span class="line">当前的rs指向：6: order_num: 20024, total_tax: 0.0<span class="comment"># 不处理NULL的情况下，直接显示为0</span></span><br><span class="line">当前的rs指向：7: order_num: 20025, total_tax: 0.0</span><br><span class="line">处理NULL：</span><br><span class="line">当前的rs指向：1: order_num: 20005, total_tax: 158.86</span><br><span class="line">当前的rs指向：2: order_num: 20009, total_tax: 40.78</span><br><span class="line">当前的rs指向：3: order_num: 20006, total_tax: 58.3</span><br><span class="line">当前的rs指向：4: order_num: 20007, total_tax: 1060.0</span><br><span class="line">当前的rs指向：5: order_num: 20008, total_tax: 132.5</span><br><span class="line">当前的rs指向：6: order_num: 20024, total_tax: null<span class="comment"># 可以看到在处理NULL的情况下，显示真实值</span></span><br><span class="line">当前的rs指向：7: order_num: 20025, total_tax: null</span><br><span class="line">结果集关闭！</span><br><span class="line">Statement关闭！</span><br><span class="line">数据库成功关闭！</span><br></pre></td></tr></table></figure><h2 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h2><p>若JDBC连接处于自动提交模式，默认情况下，则每个SQL语句在完成后都会自动提交到数据库，对于简单的程序并没有问题，但是对于较为困难的程序可能会导致性能较差，有三个原因需要考虑是否关闭自动提交：</p><ul><li>提高性能</li><li>保持业务流程的完整性</li><li>使用分布式事务</li></ul><p>事务能够控制何时更改提交并应用于数据库。 它将单个SQL语句或一组SQL语句视为一个逻辑单元，如果任何语句失败，整个事务将失败。</p><p>要启用手动事务支持，而不是使用JDBC驱动程序默认使用的自动提交模式，请调用<code>Connection</code>对象的<code>setAutoCommit()</code>方法。 如果将布尔的<code>false</code>传递给<code>setAutoCommit()</code>，则关闭自动提交。 也可以传递一个布尔值<code>true</code>来重新打开它。</p><p>例如，如果有一个名为<code>conn</code>的<code>Connection</code>对象，请将以下代码关闭自动提交：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h3 id="提交和回滚"><a href="#提交和回滚" class="headerlink" title="提交和回滚"></a>提交和回滚</h3><p>在完成更改后，若要提交更改，可以在连接对象Connection上调用<code>commit()</code>方法;</p><p>否则，要使用连接名为<code>conn</code>的数据库回滚更新:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.commit();<span class="comment">// 提交更改</span></span><br><span class="line">conn.rollback();<span class="comment">// 回滚更改即撤销</span></span><br></pre></td></tr></table></figure><p>以下示例说明了如何使用提交和回滚对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">//Assume a valid connection object conn</span></span><br><span class="line">   conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">   Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">   String SQL = <span class="string">&quot;INSERT INTO Employees  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (106, 20, &#x27;Rita&#x27;, &#x27;Tez&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);  </span><br><span class="line">   <span class="comment">//Submit a malformed SQL statement that breaks</span></span><br><span class="line">   String SQL = <span class="string">&quot;INSERTED IN Employees  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (107, 22, &#x27;Sita&#x27;, &#x27;Singh&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);</span><br><span class="line">   <span class="comment">// If there is no error.</span></span><br><span class="line">   conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">   <span class="comment">// If there is any error.</span></span><br><span class="line">   conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在出现错误的时候，会进行回滚，上述的INSERT语句不会被自动执行。</p><h3 id="使用保存点"><a href="#使用保存点" class="headerlink" title="使用保存点"></a>使用保存点</h3><p>JDBC 3.0之后增加了<code>Savepoint</code>接口提供了额外的事务控制的能力。大多数的DBMS都支持了保存点。</p><p>设置保存点(<code>Savepoint</code>)时，可以在事务中定义逻辑回滚点。 如果通过保存点(<code>Savepoint</code>)发生错误时，则可以使用回滚方法来撤消所有更改或仅保存保存点之后所做的更改。</p><p><code>Connection</code>对象有两种新的方法可用来管理保存点 -</p><ul><li><strong>setSavepoint(String savepointName):</strong> - 定义新的保存点，它还返回一个<code>Savepoint</code>对象。</li><li><strong>releaseSavepoint(Savepoint savepointName):</strong> - 删除保存点。要注意，它需要一个<code>Savepoint</code>对象作为参数。 该对象通常是由<code>setSavepoint()</code>方法生成的保存点。</li></ul><p>有一个*rollback (String savepointName)*方法，它将使用事务回滚到指定的保存点。</p><p>以下示例说明了使用<code>Savepoint</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">//Assume a valid connection object conn</span></span><br><span class="line">   conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">   Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//set a Savepoint</span></span><br><span class="line">   Savepoint savepoint1 = conn.setSavepoint(<span class="string">&quot;Savepoint1&quot;</span>);</span><br><span class="line">   String SQL = <span class="string">&quot;INSERT INTO Employees &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (106, 24, &#x27;Curry&#x27;, &#x27;Stephen&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);  </span><br><span class="line">   <span class="comment">//Submit a malformed SQL statement that breaks</span></span><br><span class="line">   String SQL = <span class="string">&quot;INSERTED IN Employees &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (107, 32, &#x27;Kobe&#x27;, &#x27;Bryant&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);</span><br><span class="line">   <span class="comment">// If there is no error, commit the changes.</span></span><br><span class="line">   conn.commit();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">   <span class="comment">// If there is any error.</span></span><br><span class="line">   conn.rollback(savepoint1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，若出现问题，上述的<code>INSERT</code>语句都不会成功，因为所有的操作都会被回滚。</p><h2 id="JDBC异常"><a href="#JDBC异常" class="headerlink" title="JDBC异常"></a>JDBC异常</h2><p>异常处理允许我们以受控的方式处理异常情况，而不是直接退出程序，例如程序定义的错误。</p><p>发生异常时可以抛出异常。术语“<strong>异常</strong>”表示当前的程序执行停止，并且被重定向到最近的适用的<code>catch</code>子句。如果没有适用的<code>catch</code>子句存在，则程序的执行结束。</p><p>JDBC异常处理与Java异常处理非常相似，但对于JDBC，要处理的最常见异常是<code>java.sql.SQLException</code>。</p><h3 id="SQLException方法"><a href="#SQLException方法" class="headerlink" title="SQLException方法"></a>SQLException方法</h3><p>驱动程序和数据库中都会发生<code>SQLException</code>。 发生这种异常时，<code>SQLException</code>类型的对象将被传递给<code>catch</code>子句。</p><p>传递的<code>SQLException</code>对象具有以下可用于检索有关异常信息的方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>getErrorCode()</code></td><td align="left">获取与异常关联的错误代码。</td></tr><tr><td align="left"><code>getMessage()</code></td><td align="left">获取驱动程序处理的错误的JDBC驱动程序的错误消息，或获取数据库错误的Oracle错误代码和消息。</td></tr><tr><td align="left"><code>getSQLState()</code></td><td align="left">获取XOPEN SQLstate字符串。 对于JDBC驱动程序错误，不会从此方法返回有用的信息。 对于数据库错误，返回五位数的XOPEN SQLstate代码。 此方法可以返回<code>null</code>。</td></tr><tr><td align="left"><code>getNextException()</code></td><td align="left">获取异常链中的下一个<code>Exception</code>对象。</td></tr><tr><td align="left"><code>printStackTrace()</code></td><td align="left">打印当前异常或可抛出的异常，并将其追溯到标准错误流。</td></tr><tr><td align="left"><code>printStackTrace(PrintStream s)</code></td><td align="left">将此<code>throwable</code>及其回溯打印到指定的打印流。</td></tr><tr><td align="left"><code>printStackTrace(PrintWriter w)</code></td><td align="left">打印这个<code>throwable</code>，它是回溯到指定的打印器(<code>PrintWriter</code>)。</td></tr></tbody></table><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/EMP&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 3: Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 4: Execute a query</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">      Statement stmt = conn.createStatement();</span><br><span class="line">      String sql;</span><br><span class="line">      sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 5: Extract data from result set</span></span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">         <span class="comment">//Retrieve by column name</span></span><br><span class="line">         <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">         String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">         String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//Display values</span></span><br><span class="line">         System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">         System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">         System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">         System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//STEP 6: Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line">&#125;<span class="comment">//end JDBCExample</span></span><br></pre></td></tr></table></figure><h2 id="JDBC批量处理"><a href="#JDBC批量处理" class="headerlink" title="JDBC批量处理"></a>JDBC批量处理</h2><p>批量处理允许将相关的SQL语句分组到批处理中，并通过对数据库的一次调用来提交它们，一次执行完成与数据库之间的交互。</p><p><strong>一次向数据库发送多个SQL语句时，可以减少通信开销，从而提高性能。</strong></p><ul><li>不需要JDBC驱动程序来支持此功能。应该使用<code>DatabaseMetaData.supportsBatchUpdates()</code>方法来确定目标数据库是否支持批量更新处理。如果JDBC驱动程序支持此功能，该方法将返回<code>true</code>。</li><li><code>Statement</code>，<code>PreparedStatement</code>和<code>CallableStatement</code>的<code>addBatch()</code>方法用于将单个语句添加到批处理。 <code>executeBatch()</code>用于执行组成批量的所有语句。</li><li><code>executeBatch()</code>返回一个整数数组，数组的每个元素表示相应更新语句的更新计数。</li><li>就像将批处理语句添加到处理中一样，可以使用<code>clearBatch()</code>方法删除它们。此方法将删除所有使用<code>addBatch()</code>方法添加的语句。 但是，无法指定选择某个要删除的语句。</li></ul><h3 id="使用Statement对象进行批处理"><a href="#使用Statement对象进行批处理" class="headerlink" title="使用Statement对象进行批处理"></a>使用Statement对象进行批处理</h3><p>以下是使用<code>Statement</code>对象的批处理的典型步骤序列：</p><ul><li>使用<code>createStatement()</code>方法创建<code>Statement</code>对象。</li><li>使用<code>setAutoCommit()</code>将自动提交设置为<code>false</code>。</li><li>使用<code>addBatch()</code>方法在创建的<code>Statement</code>对象上添加SQL语句到批处理中。</li><li>在创建的<code>Statement</code>对象上使用<code>executeBatch()</code>方法执行所有SQL语句。</li><li>最后，使用<code>commit()</code>方法提交所有更改。</li></ul><h4 id="使用Statement进行批处理的实例"><a href="#使用Statement进行批处理的实例" class="headerlink" title="使用Statement进行批处理的实例"></a>使用Statement进行批处理的实例</h4><p>使用Statement进行批处理时，不能添加<code>SELECT</code>语句，会产生错误。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can not issue SELECT via executeUpdate() or executeLargeUpdate().</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBatchStatement</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>);      <span class="comment">//禁止自动提交</span></span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        String sql1 = <span class="string">&quot;SELECT * FROM orders;&quot;</span>;</span><br><span class="line">        String sql2 = <span class="string">&quot;INSERT INTO orders(order_date, cust_id) VALUES(Now(), 10009)&quot;</span>;</span><br><span class="line">        String sql3 = <span class="string">&quot;UPDATE orders SET cust_id = 10009 WHERE cust_id = 10008;&quot;</span>;</span><br><span class="line">        String sql4 = <span class="string">&quot;DELETE FROM orders WHERE cust_id = 10006;&quot;</span>;</span><br><span class="line">        stmt.addBatch(sql1);</span><br><span class="line">        stmt.clearBatch();      <span class="comment">//使用clearBatch()清除命令列表</span></span><br><span class="line">        stmt.addBatch(sql2);<span class="comment">//若不使用，会报错Can not issue SELECT via executeUpdate() or executeLargeUpdate().</span></span><br><span class="line">        stmt.addBatch(sql3);</span><br><span class="line">        stmt.addBatch(sql4);</span><br><span class="line">        <span class="keyword">int</span>[] count = stmt.executeBatch();</span><br><span class="line">        conn.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">order_numorder_datecust_id</span><br><span class="line">200052005-09-01 00:00:0010002</span><br><span class="line">200062005-09-12 00:00:0010003</span><br><span class="line">200072005-09-30 00:00:0010004</span><br><span class="line">200082005-10-03 00:00:0010005</span><br><span class="line">200092005-10-08 00:00:0010002</span><br><span class="line">200242021-10-05 10:11:5010006</span><br><span class="line">200252021-10-05 11:10:4310008</span><br><span class="line">200262021-10-05 16:06:2410008</span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">200052005-09-01 00:00:0010002</span><br><span class="line">200062005-09-12 00:00:0010003</span><br><span class="line">200072005-09-30 00:00:0010004</span><br><span class="line">200082005-10-03 00:00:0010005</span><br><span class="line">200092005-10-08 00:00:0010002</span><br><span class="line">200252021-10-05 11:10:4310009</span><br><span class="line">200262021-10-05 16:06:2410009</span><br><span class="line">200302021-10-06 17:35:5810009</span><br></pre></td></tr></table></figure><p><strong>使用addBatch()可以节约很多时间，测试删除50000条数据，若使用for循环，一条一条删除，需要耗时30min，但使用addBatch()只需要3min，很高效。</strong></p><h3 id="使用PrepareStatement对象进行批处理"><a href="#使用PrepareStatement对象进行批处理" class="headerlink" title="使用PrepareStatement对象进行批处理"></a>使用PrepareStatement对象进行批处理</h3><p>以下是使用<code>PrepareStatement</code>对象进行批处理的典型步骤顺序 -</p><ul><li>使用占位符创建SQL语句。</li><li>使用<code>prepareStatement()</code>方法创建<code>PrepareStatement</code>对象。</li><li>使用<code>setAutoCommit()</code>将自动提交设置为<code>false</code>。</li><li>使用<code>addBatch()</code>方法在创建的<code>Statement</code>对象上添加SQL语句到批处理中。</li><li>在创建的<code>Statement</code>对象上使用<code>executeBatch()</code>方法执行所有SQL语句。</li><li>最后，使用<code>commit()</code>方法提交所有更改。</li></ul><h4 id="使用PrepareStatement进行批处理的实例"><a href="#使用PrepareStatement进行批处理的实例" class="headerlink" title="使用PrepareStatement进行批处理的实例"></a>使用PrepareStatement进行批处理的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">String SQL = <span class="string">&quot;INSERT INTO Employees (id, first, last, age) &quot;</span> +</span><br><span class="line">             <span class="string">&quot;VALUES(?, ?, ?, ?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create PrepareStatement object</span></span><br><span class="line">PreparedStatemen pstmt = conn.prepareStatement(SQL);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set auto-commit to false</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the variables</span></span><br><span class="line">pstmt.setInt( <span class="number">1</span>, <span class="number">400</span> );</span><br><span class="line">pstmt.setString( <span class="number">2</span>, <span class="string">&quot;JDBC&quot;</span> );</span><br><span class="line">pstmt.setString( <span class="number">3</span>, <span class="string">&quot;Li&quot;</span> );</span><br><span class="line">pstmt.setInt( <span class="number">4</span>, <span class="number">33</span> );</span><br><span class="line"><span class="comment">// Add it to the batch</span></span><br><span class="line">pstmt.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the variables</span></span><br><span class="line">pstmt.setInt( <span class="number">1</span>, <span class="number">401</span> );</span><br><span class="line">pstmt.setString( <span class="number">2</span>, <span class="string">&quot;CSharp&quot;</span> );</span><br><span class="line">pstmt.setString( <span class="number">3</span>, <span class="string">&quot;Liang&quot;</span> );</span><br><span class="line">pstmt.setInt( <span class="number">4</span>, <span class="number">31</span> );</span><br><span class="line"><span class="comment">// Add it to the batch</span></span><br><span class="line">pstmt.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add more batches</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="JDBC-SQL转义语法"><a href="#JDBC-SQL转义语法" class="headerlink" title="JDBC SQL转义语法"></a>JDBC SQL转义语法</h2><p>通过使用标准JDBC方法和属性，转义语法使您能够灵活地使用不可用的数据库特定功能。</p><p>一般SQL转义语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;keyword <span class="string">&#x27;parameters&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>d, t, ts关键字：</strong></p><p>它们用于帮助确定日期，时间和时间戳文字。没有哪两个DBMS表示时间和日期的方式相同。 </p><p>该转义语法告诉驱动程序以目标数据库的格式呈现日期或时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;d <span class="string">&#x27;yyyy-mm-dd&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><code>yyyy</code>=年份，<code>mm</code>=月份; <code>dd</code>=日期。 使用这种语法<code>&#123;d&#39;2019-09-03&#39;&#125;</code>表示的是2019年3月9日。</p><p>这是一个简单的示例，显示如何将日期插入表中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a Statement object</span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//Insert data ==&gt; ID, First Name, Last Name, DOB</span></span><br><span class="line">String sql=<span class="string">&quot;INSERT INTO STUDENTS VALUES&quot;</span> +</span><br><span class="line">             <span class="string">&quot;(100,&#x27;Kobe&#x27;,&#x27;Bryant&#x27;, &#123;d &#x27;2002-12-16&#x27;&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>同样，还可以使用以下两种语法：<code>t</code>或<code>ts</code> -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;t <span class="string">&#x27;hh:mm:ss&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>hh</code> = 小时，<code>mm</code> = 分钟， <code>ss</code> = 秒。 </p><p>使用这种语法<code>&#123;t &#39;13:30:29&#39;&#125;</code>是<code>1:30:29 PM</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ts <span class="string">&#x27;yyyy-mm-dd hh:mm:ss&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>这里“<code>d</code>”和“<code>t</code>”是上述两种语法的组合语法来表示时间戳。</p><p><strong>escape关键字：</strong></p><p><code>escape</code>关键字标识<code>LIKE</code>子句中使用转义字符。 </p><p>使用SQL通配符<code>%</code>(与<code>0</code>个或多个字符匹配)时很有用。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT symbol FROM MathSymbols</span></span><br><span class="line"><span class="string">              WHERE symbol LIKE &#x27;\%&#x27; &#123;escape &#x27;\&#x27;&#125;&quot;</span>;</span><br><span class="line">stmt.execute(sql);</span><br></pre></td></tr></table></figure><p>如果使用反斜杠字符(<code>\</code>)作为转义字符，则还必须在Java字符串文字中使用两个反斜杠字符，因为反斜杠也是Java转义字符。</p><p><strong>fn关键字：</strong></p><p>这个关键字表示DBMS中使用的标量函数。 </p><p>例如，可以使用SQL函数长度来获取字符串的长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="function">fn <span class="title">length</span><span class="params">(<span class="string">&#x27;Hello World&#x27;</span>)</span>&#125;</span></span><br></pre></td></tr></table></figure><p>上面语句返回结果值为：<code>11</code>，也就是字符串’<code>Hello World</code>‘的长度。</p><p><strong>call关键字：</strong></p><p>此关键字用于调用存储过程。 </p><p>例如，对于需要<code>IN</code>参数的存储过程，请使用以下语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="function">call <span class="title">my_procedure</span><span class="params">(?)</span>&#125;</span>;</span><br></pre></td></tr></table></figure><p>对于需要<code>IN</code>参数并返回<code>OUT</code>参数的存储过程，请使用以下语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;? = <span class="function">call <span class="title">my_procedure</span><span class="params">(?)</span>&#125;</span>;</span><br></pre></td></tr></table></figure><p><strong>oj关键字：</strong></p><p>此关键字用于表示外部连接。 语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;oj outer-join&#125;</span><br></pre></td></tr></table></figure><p>这里，<em>outer-join = table {LEFT|RIGHT|FULL} OUTERJOIN {table | outer-join}</em> 搜索条件。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT Employees </span></span><br><span class="line"><span class="string">              FROM &#123;oj ThisTable RIGHT</span></span><br><span class="line"><span class="string">              OUTER JOIN ThatTable on id = &#x27;100&#x27;&#125;&quot;</span>;</span><br><span class="line">stmt.execute(sql);</span><br></pre></td></tr></table></figure><h2 id="JDBC流ASCII和二进制数据"><a href="#JDBC流ASCII和二进制数据" class="headerlink" title="JDBC流ASCII和二进制数据"></a>JDBC流ASCII和二进制数据</h2><p><code>PreparedStatement</code>对象可以使用输入和输出流来提供参数数据。能够将整个文件放入可以容纳大值的数据库列，例如<code>CLOB</code>和<code>BLOB</code>数据类型。</p><p>有以下方法可用于流式传输数据：</p><ul><li><code>setAsciiStream()</code>：此方法用于提供大的ASCII值。</li><li><code>setCharacterStream()</code>：此方法用于提供较大的UNICODE值。</li><li><code>setBinaryStream()</code>：此方法用于提供较大的二进制值。</li></ul><p><code>setXXXStream()</code>方法除了参数占位符之外还需要额外的参数和文件大小。此参数通知驱动程序使用流向数据库发送多少数据。</p><h3 id="BLOB的使用"><a href="#BLOB的使用" class="headerlink" title="BLOB的使用"></a>BLOB的使用</h3><blockquote><p>A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold.</p><p><code>BLOB</code> values are treated as binary strings (byte strings). They have the <code>binary</code> character set and collation, and comparison and sorting are based on the numeric values of the bytes in column values. </p></blockquote><table><thead><tr><th align="left">类型</th><th align="left">最大大小</th></tr></thead><tbody><tr><td align="left">TinyBlob</td><td align="left">255字节</td></tr><tr><td align="left">Blob</td><td align="left">65535字节（约65K）</td></tr><tr><td align="left">MediumBlob</td><td align="left">16 777 215字节（约16M）</td></tr><tr><td align="left">LongBlob</td><td align="left">4 294 967 295 (约4G)</td></tr></tbody></table><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBlob</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//test write BLOB</span></span><br><span class="line">    String sql1 = <span class="string">&quot;INSERT INTO image(filename, data) VALUES(?, ?)&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql1);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(textJDBC.class.getResource(<span class="string">&quot;/dataIn/test.png&quot;</span>).toURI());</span><br><span class="line">            ps.setString(<span class="number">1</span>, file.getName());</span><br><span class="line">            ps.setBlob(<span class="number">2</span>, <span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException | FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//test read BLOB</span></span><br><span class="line">    String sql2 = <span class="string">&quot;SELECT * FROM image&quot;</span>;</span><br><span class="line">    InputStream fin = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream fout = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql2);</span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            String filename = rs.getString(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">            Blob data = rs.getBlob(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            fin = data.getBinaryStream();</span><br><span class="line">            String sUrl = textJDBC.class.getResource(<span class="string">&quot;/&quot;</span>).toString() + <span class="string">&quot;dataOut/&quot;</span> + filename;</span><br><span class="line">            System.out.println(sUrl);</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(sUrl);</span><br><span class="line">            File file = <span class="keyword">new</span> File(url.toURI());</span><br><span class="line">            <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                <span class="keyword">if</span>(file.createNewFile())&#123;</span><br><span class="line">                    fout = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                    fin.transferTo(fout);</span><br><span class="line">                    fout.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException | IOException | URISyntaxException throwables ) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fin.close();</span><br><span class="line">            fout.close();</span><br><span class="line">            rs.close();</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20211007105533122.png" alt="image-20211007105533122"></p><p><img src="image-20211007105603446.png" alt="image-20211007105603446"></p><h3 id="CLOB的使用"><a href="#CLOB的使用" class="headerlink" title="CLOB的使用"></a>CLOB的使用</h3><blockquote><p>The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. </p><p><code>TEXT</code> values are treated as nonbinary strings (character strings). They have a character set other than <code>binary</code>, and values are sorted and compared based on the collation of the character set.</p></blockquote><table><thead><tr><th align="left">类型</th><th align="left">最大大小</th></tr></thead><tbody><tr><td align="left">TinyText</td><td align="left">255字节</td></tr><tr><td align="left">Text</td><td align="left">65535字节（约65K）</td></tr><tr><td align="left">MediumText</td><td align="left">16 777 215字节（约16M）</td></tr><tr><td align="left">LongText</td><td align="left">4 294 967 295 (约4G)</td></tr></tbody></table><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testClob</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//test write CLOB</span></span><br><span class="line">    String sql1 = <span class="string">&quot;INSERT INTO file(filename, data) VALUES(?, ?)&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql1);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(textJDBC.class.getResource(<span class="string">&quot;/dataIn/test.xml&quot;</span>).toURI());</span><br><span class="line">            ps.setString(<span class="number">1</span>, file.getName());</span><br><span class="line">            ps.setClob(<span class="number">2</span>, <span class="keyword">new</span> FileReader(file));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException | FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//test read CLOB</span></span><br><span class="line">    String sql2 = <span class="string">&quot;SELECT * FROM file&quot;</span>;</span><br><span class="line">    Reader reader = <span class="keyword">null</span>;</span><br><span class="line">    Writer writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql2);</span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            String filename = rs.getString(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">            Clob data = rs.getClob(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            reader = data.getCharacterStream();</span><br><span class="line">            String sUrl = textJDBC.class.getResource(<span class="string">&quot;/&quot;</span>).toString() + <span class="string">&quot;dataOut/&quot;</span> + filename;</span><br><span class="line">            System.out.println(sUrl);</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(sUrl);</span><br><span class="line">            File file = <span class="keyword">new</span> File(url.toURI());</span><br><span class="line">            <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                <span class="keyword">if</span>(file.createNewFile())&#123;</span><br><span class="line">                    writer = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">                    reader.transferTo(writer);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException | IOException | URISyntaxException throwables ) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">            writer.close();</span><br><span class="line">            rs.close();</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20211007105646837.png" alt="image-20211007105646837"></p><p><img src="image-20211007105603446.png" alt="image-20211007105603446"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="https://www.yiibai.com/jdbc">JDBC教程™ (yiibai.com)</a></p><p>[2] <a href="https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/index.html">MySQL 8.0 Reference Manual (oracle.com)</a></p><p>[3] 福塔(Forta, B.). MySQL必知必会[M]. 刘晓霞，钟鸣，译. —北京：人民邮电出版社，2009.1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> JDBC驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE_Servlet初探</title>
      <link href="/articles/JavaEE-Servlet%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/JavaEE-Servlet%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>Servlet（Server Applet）是 Java Servlet 的简称，是使用 Java 语言编写的运行在服务器端的程序。具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。通常来说，Servlet 是指所有实现了 Servlet 接口的类，主要用于处理客户端传来的 HTTP 请求，并返回一个响应，它能够处理的请求有 doGet() 和 doPost() 等。Servlet 由 Servlet 容器提供，Servlet 容器是指提供了 Servlet 功能的服务器（如 Tomcat），Servlet 容器会将 Servlet 动态加载到服务器上，然后通过 HTTP 请求和 HTTP 应与客户端进行交互。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="Java-Servlet基本认识"><a href="#Java-Servlet基本认识" class="headerlink" title="Java Servlet基本认识"></a>Java Servlet基本认识</h2><p><strong>Servlet的应用体系为：</strong>首先 Servlet 的请求首先会被 HTTP 服务器（如 Apache Tomcat）接收，HTTP 服务器只负责静态 HTML 页面的解析，而对于 Servlet 的请求会转交给 Servlet 容器，Servlet 容器会根据 web.xml 文件中的映射关系，调用相应的 Servlet程序，Servlet 再将处理的结果返回给 Servlet 容器，并通过 HTTP 服务器将响应传输给客户端。</p><p><strong>Servlet具有如下的特点：</strong></p><p><strong>1）方便</strong></p><p>Servlet 提供了大量的实用工具例程，如处理很难完成的 HTML 表单数据、读取和设置 HTTP 头，以及处理 Cookie 和跟踪会话等。</p><p><strong>2）跨平台</strong></p><p>Servlet 使用 Java 类编写，可以在不同的操作系统平台和不同的应用服务器平台运行。</p><p><strong>3）灵活性和可扩展性强</strong></p><p>采用 Servlet 开发的 Web 应用程序，由于 Java 类的继承性及构造函数等特点，使得应用灵活，可随意扩展。</p><h2 id="与Servlet相关的接口和类"><a href="#与Servlet相关的接口和类" class="headerlink" title="与Servlet相关的接口和类"></a>与Servlet相关的接口和类</h2><p>Sun 公司提供了一系列的接口和类用于 Servlet 技术的开发，其中最重要的接口是 <code>javax.servlet.Servlet</code>。在 Servlet 接口中定义了 5 个抽象方法</p><table><thead><tr><th>方法声明</th><th>功能描述</th></tr></thead><tbody><tr><td>void init(ServletConfig config)</td><td>容器在创建好 Servlet 对象后，就会自动调用此方法。该方法接收一个 ServletConfig 类型的参数，Servlet 容器通过该参数向 Servlet 传递初始化配置信息</td></tr><tr><td>ServletConfig getSendetConfig()</td><td>用于获取 Servlet 对象的配置信息，返回 Servlet 的 ServletConfig 对象</td></tr><tr><td>String getServletInfo()</td><td>返回一个字符串，其中包含关于 Servlet 的信息，如作者、版本和版权等信息</td></tr><tr><td>void service(ServletRequest request,ServletResponse response)</td><td>负责响应用户的请求，当容器接收到客户端访问 Servlet 对象的请求时，就会调用此方法。<br/>容器会构造一个表示客户端请求信息的 ServletRequest 对象和一个用于响应客户端的 ServletResponse 对象作为参数传递给 service() 方法。<br/>在 service() 方法中，可以通过 ServletRequest 对象得到客户端的相关信息和请求信息，在对请求进行处理后，调用 ServletResponse 对象的方法设置响应信息</td></tr><tr><td>void destroy()</td><td>负责释放 Servlet 对象占用的资源。当服务器关闭或者 Servlet 对象被移除时，Servlet 对象会被销毁，容器会调用此方法</td></tr></tbody></table><p>在以上的五个方法中，init(), service(), destroy()方法可以表现Servlet的生命周期，会在某个特定的时期被调用</p><p>针对 Servlet 的接口，Sun 公司提供了两个默认的接口实现类：GenericServlet 和 HttpServlet。其中，GenericServlet 是一个抽象类，该类为 Servlet 接口提供了部分实现，它并没有实现 HTTP 请求处理。</p><p>Servlet的继承结构如下图所示：</p><p><img src="1007017-20180617005127662-1291521530.png" alt="img"></p><p>HttpServlet 是 GenericServlet 的子类，它继承了 GenericServlet 的所有方法，并且为 HTTP 请求中的 GET 和 POST 等类型提供了具体的操作方法。通常情况下，编写的 Servlet 类都继承自 HttpServlet，在开发中使用的也是 HttpServlet 对象。</p><p>HttpServlet 类中包含两个常用方法：</p><table><thead><tr><th><strong>方法声明</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>protected void doGet (HttpServletRequest req, HttpServletResponse resp)</td><td>用于处理 GET 类型的 HTTP 请求的方法</td></tr><tr><td>protected void doPost(HttpServletRequest req, HttpServletResponse resp)</td><td>用于处理 POST 类型的 HTTP 请求的方法</td></tr></tbody></table><p>HttpServlet 主要有两大功能，具体如下。</p><ol><li>根据用户请求方式的不同，定义相应的 doXxx() 方法处理用户请求。例如，与 GET 请求方式对应的 doGet() 方法，与 POST 方式对应的 doPost() 方法。</li><li>通过 service() 方法将 HTTP 请求和响应分别强转为 HttpServletRequest 和 HttpServletResponse 类型的对象。</li></ol><blockquote><p>由于 HttpServlet 类在重写的 service() 方法中，为每一种 HTTP 请求方式都定义了对应的 doXxx() 方法，因此，当定义的类继承 HttpServlet 后，只需要根据请求方式重写对应的 doXxx() 方法即可，而不需要重写 service() 方法。</p></blockquote><h2 id="Servlet程序的简单示例"><a href="#Servlet程序的简单示例" class="headerlink" title="Servlet程序的简单示例"></a>Servlet程序的简单示例</h2><p>构造一个testServlet类，让其实现Servlet接口，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init方法被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service方法被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy方法被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置<code>web.xml</code>文件，使得 Servlet 的请求转交给 Servlet 容器，Servlet 容器会根据 web.xml 文件中的映射关系，调用相应的 Servlet程序，Servlet 再将处理的结果返回给 Servlet 容器，并通过 HTTP 服务器将响应传输给客户端。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置servlet映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.demoTest.testServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，开启服务器，访问localhost:8080端口</p><p><img src="image-20210924180728525.png" alt="image-20210924180728525"></p><p>点击Hello Servlet链接，可以看到服务器端的init， service方法等被执行，在关闭服务后，还会调用destroy方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">init方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">service方法被调用！</span><br><span class="line">D:\SourceFiles\apache-tomcat-9.0.52\bin\catalina.bat stop</span><br><span class="line">Using CATALINA_BASE:   &quot;C:\Users\DCM\AppData\Local\JetBrains\IntelliJIdea2021.1\tomcat\f3e13ab7-4fb7-4ebc-8f15-28b7c708560d&quot;</span><br><span class="line">Using CATALINA_HOME:   &quot;D:\SourceFiles\apache-tomcat-9.0.52&quot;</span><br><span class="line">Using CATALINA_TMPDIR: &quot;D:\SourceFiles\apache-tomcat-9.0.52\temp&quot;</span><br><span class="line">Using JRE_HOME:        &quot;D:\SourceFiles\Java\jdk-11.0.5&quot;</span><br><span class="line">Using CLASSPATH:       &quot;D:\SourceFiles\apache-tomcat-9.0.52\bin\bootstrap.jar;D:\SourceFiles\apache-tomcat-9.0.52\bin\tomcat-juli.jar&quot;</span><br><span class="line">Using CATALINA_OPTS:   &quot;&quot;</span><br><span class="line">24-Sep-2021 18:50:16.711 信息 [main] org.apache.catalina.core.StandardServer.await 通过关闭端口接收到有效的关闭命令。正在停止服务器实例。</span><br><span class="line">24-Sep-2021 18:50:16.712 信息 [main] org.apache.coyote.AbstractProtocol.pause 暂停ProtocolHandler[&quot;http-nio-8080&quot;]</span><br><span class="line">NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</span><br><span class="line">24-Sep-2021 18:50:16.831 信息 [main] org.apache.catalina.core.StandardService.stopInternal 正在停止服务[Catalina]</span><br><span class="line">24-Sep-2021 18:50:16.842 信息 [main] org.apache.coyote.AbstractProtocol.stop 正在停止ProtocolHandler [&quot;http-nio-8080&quot;]</span><br><span class="line">destroy方法被调用！</span><br><span class="line">24-Sep-2021 18:50:16.876 信息 [main] org.apache.coyote.AbstractProtocol.destroy 正在摧毁协议处理器 [&quot;http-nio-8080&quot;]</span><br><span class="line">NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</span><br><span class="line">已与服务器断开连接</span><br></pre></td></tr></table></figure><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p><img src="5-1Z610101ZS51.png" alt="Servlet生命周期"></p><p>按照功能的不同，大致可以将 Servlet 的生命周期分为三个阶段，分别是初始化阶段、运行阶段和销毁阶段。</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>当客户端向 Servlet 容器发出 HTTP 请求要求访问 Servlet 时，Servlet 容器首先会解析请求，检查内存中是否已经有了该 Servlet 对象，如果有，则直接使用该 Servlet 对象，如果没有，则创建 Servlet 实例对象，然后通过调用 init() 方法实现 Servlet 的初始化工作。<strong>需要注意的是，在 Servlet 的整个生命周期内，它的 init() 方法只能被调用一次。</strong></p><h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><p>这是 Servlet 生命周期中最重要的阶段，在这个阶段中，Servlet 容器会为这个请求创建代表 HTTP 请求的 ServletRequest 对象和代表 HTTP 响应的 ServletResponse 对象，然后将它们作为参数传递给 Servlet 的 service() 方法。</p><p>service() 方法从 ServletRequest 对象中获得客户请求信息并处理该请求，通过 ServletResponse 对象生成响应结果。</p><p><strong>在 Servlet 的整个生命周期内，对于 Servlet 的每一次访问请求，Servlet 容器都会调用一次 Servlet 的 service() 方法，并且创建新的 ServletRequest 和 ServletResponse 对象，也就是说，service() 方法在 Servlet 的整个生命周期中会被调用多次。</strong></p><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><p>当服务器关闭或 Web 应用被移除出容器时，Servlet 随着 Web 应用的关闭而销毁。在销毁 Servlet 之前，Servlet 容器会调用 Servlet 的 destroy() 方法，以便让 Servlet 对象释放它所占用的资源。在 Servlet 的整个生命周期中，destroy() 方法也只能被调用一次。</p><p><strong>需要注意的是，Servlet 对象一旦创建就会驻留在内存中等待客户端的访问，直到服务器关闭或 Web 应用被移除出容器时，Servlet 对象才会销毁。</strong></p><h2 id="Servlet配置虚拟路径映射"><a href="#Servlet配置虚拟路径映射" class="headerlink" title="Servlet配置虚拟路径映射"></a>Servlet配置虚拟路径映射</h2><p>创建好的 Servlet 只有映射成虚拟路径，客户端才能对其进行访问。但是在映射 Servlet 时，还存在如 Servlet 的多重映射、在映射路径中使用通配符、配置默认的 Servlet 等内容。</p><h3 id="Servlet多重映射"><a href="#Servlet多重映射" class="headerlink" title="Servlet多重映射"></a>Servlet多重映射</h3><p>Servlet 的多重映射指同一个 Servlet 可以被映射成多条虚拟路径。</p><p>有两种方法可以实现多重映射：</p><ol><li>配置多个 <servlet-mapping> 元素；</li><li>配置多个 <url-pattern> 子元素；</li></ol><p>我们使用第二个方法实现多重映射：</p><p>即在web.xml中配置例如下图所示的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.demoTest.TestServlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射为TestServlet01和Test02 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testServlet01<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test01<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，即可通过两种URL对该servlet进行访问：</p><p><code>http://localhost:8080/servlet/testServlet01</code></p><p><code>http://localhost:8080/servlet/test01</code></p><h3 id="Servlet映射路径中使用通配符"><a href="#Servlet映射路径中使用通配符" class="headerlink" title="Servlet映射路径中使用通配符"></a>Servlet映射路径中使用通配符</h3><p>在实际开发过程中，开发者有时会希望某个目录下的所有路径都可以访问同一个 Servlet，这时，可以在 Servlet 映射的路径中使用通配符*。通配符的格式有两种，具体如下。</p><ul><li><p>格式为<code>*.扩展名</code>，例如 *.do 匹配以 .do 结尾的所有 URL 地址。</p></li><li><p>格式为 <code>/*</code>，例如 /abc/* 匹配以 /abc 开始的所有 URL 地址。</p></li></ul><p>当客户端访问一个 Servlet 时，如果请求的 URL 地址能够匹配多条虚拟路径，那么 Tomcat 将采取最具体匹配原则查找与请求 URL 最接近的虚拟映射路径。</p><blockquote><p>/abc/*   映射到 Servlet1<br>/*       映射到 Servlet2<br>/abc     映射到 Servlet3<br>*.do     映射到 Servlet4</p></blockquote><ul><li>当请求 URL 为 <code>/abc/a.html </code>; <code>/abc/*</code> 和 <code>/*</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet1。</li><li>当请求 URL 为 <code>/abc </code>; <code>/*</code>、<code>/abc/*</code> 和 <code>/abc</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet3。</li><li>当请求 URL 为 <code>/abc/a.do</code>; <code>/*</code> 、<code>*.do</code> 和 <code>/abc/*</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet1。</li><li>当请求 URL 为 <code>/a.do</code>; <code>/*</code> 和 <code>*.do</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet2。</li><li>当请求 URL 为 <code>/xxx/yyy/a.do</code>; <code>*.do</code> 和 <code>/*</code> 都可以匹配这个 URL，Tomcat 会调用 Servlet2。</li></ul><h3 id="默认Servlet"><a href="#默认Servlet" class="headerlink" title="默认Servlet"></a>默认Servlet</h3><p>如果某个 Servlet 的映射路径仅仅是一个正斜线（/），那么这个 Servlet 就是当前 Web 应用的默认 Servlet。Servlet 服务器在接收到访问请求时，如果在 web.xml 文件中找不到匹配的 <servlet-mapping> 元素的 URL，则会将访问请求交给默认 Servlet 处理，也就是说，默认 Servlet 用于处理其他 Servlet 都不处理的访问请求。</p><p>下面对web.xml文件进行修改，将TestServlet01设置为默认的 Servlet，具体如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mengma.servlet.TestServlet01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动 Tomcat 服务器，在浏览器的地址栏中输入任意地址，如 <a href="http://localhost:8080/servletDemo01/abcde%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C%E9%83%BD%E5%B0%86%E6%98%AF%E8%B0%83%E7%94%A8TestServlet01%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82">http://localhost:8080/servletDemo01/abcde，浏览器的显示结果都将是调用TestServlet01的结果。</a></p><p>需要注意的是，在 Tomcat 安装目录下的 web.xml 文件中也配置了一个默认的 Servlet，配置信息如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">serlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">serlet-class</span>&gt;</span>    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的配置信息中，org.apache.catalina.servlets.DefaultServlet 被设置为默认的 Servlet，它对 Tomcat 服务器上所有的 Web 应用都起作用。</p><p>当 Tomcat 服务器中的某个 Web 应用没有默认 Servlet 时，都会将 DefaultServlet 作为默认的 Servlet。当客户端访问 Tomcat 服务器中的某个静态 HTML 文件时，DefaultServlet 会判断 HTML 是否存在，如果存在，则会将数据以流的形式回送给客户端，否则会报告 404 错误。</p><h2 id="ServletConfig和ServletContext接口及其使用方法"><a href="#ServletConfig和ServletContext接口及其使用方法" class="headerlink" title="ServletConfig和ServletContext接口及其使用方法"></a>ServletConfig和ServletContext接口及其使用方法</h2><h3 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a>ServletConfig接口</h3><p>在运行 Servlet 程序时，可能需要一些辅助信息，例如，文件使用的编码、使用 Servlet 程序的共享信息等，这些信息可以在 web.xml 文件中使用一个或多个 <init-param> 元素进行配置。当 Tomcat 初始化一个 Servlet 时，会将该 Servlet 的配置信息封装到 ServletConfig 对象中，此时可以通过调用 init（ServletConfig config）方法将 ServletConfig 对象传递给 Servlet。</p><table><caption>表 1 ServletConfig接口的常用方法</caption><thead><tr><th scope="col">方法说明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getInitParameter(String name)</td><td>根据初始化参数名返回对应的初始化参数值</td></tr><tr><td>Enumeration getInitParameterNames()</td><td>返回一个 Enumeration 对象，其中包含了所有的初始化参数名</td></tr><tr><td>ServletContext getServletContext()</td><td>返回一个代表当前 Web 应用的 ServletContext 对象</td></tr><tr><td>String getServletName()</td><td>返回 Servlet 的名字，即 web.xml 中 &lt;servlet-name&gt;元素的值</td></tr></tbody></table><p>例如：</p><p>Servlet代码如下，用于获得该Servlet的编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        ServletConfig config = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">        String param = config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;encoding=&quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet02<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mengma.servlet.TestServlet02<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--可以通过config.getInitParameter(&quot;encoding&quot;); 获得编码值，类似于key-value--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet02<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServlet02<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h3><p>当 Tomcat 启动时，Tomcat 会为每个 Web 应用创建一个<strong>唯一</strong>的 ServletContext 对象代表当前的 Web 应用，该对象封装了当前 Web 应用的所有信息。可以利用该对象获取 Web 应用程序的初始化信息、读取资源文件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet03<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mengma.servlet.TestServlet03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet03<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServlet03<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>读取全局的初始化信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">// 得到ServletContext对象</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">// 得到包含所有初始化参数名的Enumeration对象</span></span><br><span class="line">        Enumeration&lt;String&gt; paramNames = context.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 遍历所有的初始化参数名，得到相应的参数值并打印</span></span><br><span class="line">        <span class="keyword">while</span> (paramNames.hasMoreElements()) &#123;</span><br><span class="line">          String name = paramNames.nextElement();</span><br><span class="line">          <span class="comment">//直接获取键值对相关的值</span></span><br><span class="line">          String value = context.getInitParameter(name);</span><br><span class="line">          out.println(name + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">          out.println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用来临时存放数据：</p><p>使用setAttribute可以写入数据（保存在内存中），当web进程结束时，数据会丢失</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextTest1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//解决中文乱码</span></span><br><span class="line">res.setContentType(<span class="string">&quot;text/html;charset=gbk&quot;</span>);</span><br><span class="line">PrintWriter pw = res.getWriter();</span><br><span class="line"><span class="comment">//1：得到Servlet Context</span></span><br><span class="line">ServletContext sc = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//2: 添加属性</span></span><br><span class="line">sc.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">pw.println(<span class="string">&quot;给ServletContext添加了一个属性&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(req,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以读取Web应用下的资源文件：</p><p>ServletContext 接口中定义了一些读取 Web 资源的方法，这些方法是依靠 Servlet 容器实现的。Servlet 容器根据资源文件相对于 Web 应用的路径，返回关联资源文件的 I/O 流或资源文件在系统的绝对路径等。</p><table><caption>ServletContext接口的常用方法</caption><thead><tr><th scope="col">方法说明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>Set getResourcePaths(String path)</td><td><br>返回一个 Set 集合，集合中包含资源目录中子目录和文件的路径名 称。参数 path 必须以正斜线（/）开始，指定匹配资源的部分路径</td></tr><tr><td>String getRealPath(String path)&nbsp;</td><td>返回资源文件在服务器文件系统上的真实路径（文件的绝对路径）。参数 path 代表资源文件的虚拟路径，它应该以正斜线（/）开始，/ 表示当前 Web 应用的根目录，如果 Servlet 容器不能将虚拟路径转换为文 件系统的真实路径，则返回 null</td></tr><tr><td><br>URL getResource(String path)</td><td>返回映射到某个资源文件的 URL 对象。参数 path 必须以正斜线（/）开始，/ 表示当前 Web 应用的根目录</td></tr><tr><td>InputStream getResourceAsStream(String path)</td><td>返回映射到某个资源文件的 InputStream 输入流对象。参数 path 的传递规则和 getResource() 方法完全一致</td></tr></tbody></table><p>例如：</p><p>/WEB-INF/classes/itcast.properties文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">// 获取相对路径中的输入流对象</span></span><br><span class="line">        InputStream in = context</span><br><span class="line">            .getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/itcast.properties&quot;</span>);</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(in);</span><br><span class="line">        out.println(<span class="string">&quot;username=&quot;</span> + pros.getProperty(<span class="string">&quot;username&quot;</span>) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;password=&quot;</span> + pros.getProperty(<span class="string">&quot;password&quot;</span>) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><p>当访问 Servlet 时，所有请求消息将被封装到 HttpServletRequest 对象中，请求消息的请求行中包含请求方法、请求资源名、请求路径等信息，为了获取这些信息，HttpServletRequest 接口定义了一系列方法。</p><table><caption><br>获取请求行信息的常用方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getMethod()</td><td>该方法用于获取 HTTP 请求消息中的请求方式（如 GET、POST 等）</td></tr><tr><td>String getRequestURI()</td><td>该方法用于获取请求行中的资源名称部分即位于 URL 的主机和端门之后、参数部分之前的部分</td></tr><tr><td>String getQueryString()</td><td>该方法用于获取请求行中的参数部分，也就是资源路径后问号（？）以后的所有内容</td></tr><tr><td>String getContextPath()</td><td>该方法用于获取请求 URL 中属于 Web 应用程序的路径，这个路径以 / 开头，表示相对于整个 Web 站点的根目录，路径结尾不含 /。如果请求 URL 属于 Web 站点的根目录，那么返回结果为空字符串（""）</td></tr><tr><td>String getServletPath()</td><td>该方法用于获取 Servlet 的名称或 Servlet 所映射的路径</td></tr><tr><td>String getRemoteAddr()</td><td>该方法用于获取请求客户端的 IP 地址，其格式类似于 192.168.0.3</td></tr><tr><td>String getRemoteHost()</td><td>该方法用于获取请求客户端的完整主机名，其格式类似于 pcl.mengma.com。需要注意的是，如果无法解析出客户机的完整主机名，那么该方法将会返回客户端的 IP 地址</td></tr><tr><td>int getRemotePort()</td><td>该方法用于获取请求客户端网络连接的端口号</td></tr><tr><td>String getLocaIAddr()</td><td>该方法用于获取 Web 服务器上接收当前请求网络连接的 IP 地址</td></tr><tr><td>String getLocalName()</td><td><br>该方法用于获取 Web 服务器上接收当前网络连接 IP 所对应的主机名</td></tr><tr><td>int getLocalPort()</td><td>该方法用于获取 Web 服务器上接收当前网络连接的端口号</td></tr><tr><td>String getServerName()</td><td>该方法用于获取当前请求所指向的主机名，即 HTTP 请求消息中 Host 头字段所对应的主机名部分</td></tr><tr><td>int gctServcrPort()</td><td>该方法用于获取当前请求所连接的服务器端口号，即 HTTP 请求消息中 Host 头字段所对应的端口号部分</td></tr><tr><td>StringBuffcr getRequestURL()</td><td>该方法用于获取客户端发出请求时的完整 URL，包括协议、服务器名、端口号、 资源路径等信息，但不包括后面的査询参数部分。注意，getRequcstURL() 方法返冋的结果是 StringBuffer 类型，而不是 String 类型，这样更便于对结果进行修改</td></tr></tbody></table><p>当浏览器发送 Servlet 请求时，需要通过请求消息头向服务器传递附加信息，例如，客户端可以接收的数据类型、压缩方式、语言等。为此，在 HttpServletRequest 接口中定义了一系列用于获取 HTTP 请求头字段的方法。</p><table><caption><br>获取请求消息头的方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getHeader(String name)</td><td>该方法用于获取一个指定头字段的值，如果请求消息中没有包含指定的头字段，则 getHeader() 方法返回 null；如果请求消息中包含多个指定名称的头字段，则 getHeader() 方法返回其中第一个头字段的值</td></tr><tr><td>Enumeration getHeaders(String name)</td><td><br>该方法返回一个 Enumeration 集合对象，该集合对象由请求消息中出现的某个指定名称的所有头字段值组成。在多数情况下，一个头字段名在请求消息中只出现一次，但有时可能会出现多次</td></tr><tr><td>Enumeration getHeaderNames()</td><td>该方法用于获取一个包含所有请求头字段的 Enumeration 对象</td></tr><tr><td>int getIntHeader(String name)</td><td>该方法用于获取指定名称的头字段，并且将其值转为 int 类型。需要注意的是，如果指定名称的头字段不存在，则返回值为 -1；如果获取到的头字段的值不能转为 int 类型，则将发生 NumberFormatException 异常</td></tr><tr><td>long getDateHeader(String name)</td><td>该方法用于获取指定头字段的值，并将其按 GMT 时间格式转换为一个代表日期/时间的长整数，该长整数是自 1970 年 1 月 1 日 0 时 0 分 0 秒算起的以毫秒为单位的时间值</td></tr><tr><td>String getContentType()</td><td>该方法用于获取 Content-Type 头字段的值，结果为 String 类型</td></tr><tr><td>int getContentLength()</td><td>该方法用于获取 Content-Length 头字段的值，结果为 int 类型</td></tr><tr><td>String getCharacterEncoding()</td><td>该方法用于返回请求消息的实体部分的字符集编码，通常是从 Content-Type 头字段中进行提取，结果为 String 类型</td></tr></tbody></table><h2 id="获取表单数据"><a href="#获取表单数据" class="headerlink" title="获取表单数据"></a>获取表单数据</h2><p>在实际开发中，经常需要获取用户提交的表单数据，例如用户名和密码等，为了方便获取表单中的请求参数，在 HttpServletRequest 接口的父类 ServletRequest 中定义了一系列获取请求参数的方法</p><table><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>String getParameter(String name)</td><td>该方法用于获取某个指定名称的参数值。<br>如果请求消息中没有包含指定名称的参数，则 getParameter() 方法返回 null。<br>如果指定名称的参数存在但没有设置值，则返回一个空串。<br>如果请求消息中包含多个该指定名称的参数，则 getParameter() 方法返回第一个出现的参数值。</td></tr><tr><td><br>String [] getParameterValues (String name)</td><td>HTTP 请求消息中可以有多个相同名称的参数（通常由一个包含多个同名的字段元素的 form 表单生成），如果要获得 HTTP 请求消息中的同一个参数名所对应的所有参数值，那么就应该使用 getParameterValues() 方法，该方法用于返回一个 String 类型的数组。</td></tr><tr><td>Enumeration getParameterNames()</td><td>方法用于返回一个包含请求消息中所有参数名的 Enumeration 对象，在此基础上，可以对请求消息中的所有参数进行遍历处理。</td></tr><tr><td>Map getParameterMap()</td><td>getParameterMap() 方法用于将请求消息中的所有参数名和值装入一个 Map 对象中返回。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servletDemo02/RequestsParamServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>/&gt;</span>唱歌</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dance&quot;</span>/&gt;</span>跳舞</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>/&gt;</span>玩游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用该 Servlet 获取请求参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParamsServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码&quot;</span> + password);</span><br><span class="line">        <span class="comment">// 获取参数名为&quot;hobby&quot;的值</span></span><br><span class="line">        String[] hobbys = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;爱好:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hobbys.length; i++) &#123;</span><br><span class="line">            System.out.println(hobbys[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过 Request 对象传递数据</strong></p><p>Request 对象不仅可以获取一系列数据，还可以通过属性传递数据。ServletRequest 接口中定义了一系列操作属性的方法。</p><p><strong>1）setAttribute() 方法</strong></p><p>该方法用于将一个对象与一个名称关联后存储到 ServletRequest 对象中，其完整语法定义如下：</p><p><code>public void setAttribute(java.lang.String name,java.lang.Object o);</code></p><p>需要注意的是，如果 ServletRequest 对象中已经存在指定名称的属性，则 setAttribute() 方法将会先删除原来的属性，然后再添加新的属性。如果传递给 setAttribute() 方法的属性值对象为 null，则删除指定名称的属性，这时的效果等同于 removeAttribute() 方法。</p><p><strong>2）getAttribute() 方法</strong></p><p>该方法用于从 ServletRequest 对象中返回指定名称的属性对象，其完整的语法定义如下：</p><p><code>public java.lang.Object getAttribute(java.lang.String name);</code></p><p><strong>3）removeAttribute() 方法</strong></p><p>该方法用于从 ServletRequest 对象中删除指定名称的属性，其完整的语法定义如下：</p><p><code>public void removeAttribute(java.lang.String name);</code></p><p><strong>4）getAttributeNames() 方法</strong></p><p>该方法用于返回一个包含 ServletRequest 对象中的所有属性名的 Enumeration 对象，在此基础上，可以对 ServletRequest 对象中的所有属性进行遍历处理。getAttributeNames() 方法的完整语法定义如下：</p><p><code>public java.util.Enumeration getAttributeNames();</code></p><p>需要注意的是，只有属于同一个请求中的数据才可以通过 ServletRequest 对象传递数据。</p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>当一个 Web 资源收到客户端的请求后，如果希望服务器通知另外一个资源处理请求，那么这时可以通过 RequestDispatcher 接口的实例对象实现。ServletRequest 接口中定义了一个获取 RequestDispatcher 对象的方法：</p><p><code>RequestDispatcher getRequestDispatcher (String path)</code></p><p>该方法返回封装了某条路径所指定资源的 <code>RequestDispatcher</code> 对象。其中，参数 path 必须以 <code>/</code> 开头，用于表示当前 Web 应用的根目录。需要注意的是，<code>WEB-INF</code> 目录中的内容对 RequestDispatcher 对象也是可见的。因此，传递给 getRequestDispatcher(String path) 方法的资源可以是 <code>WEB-INF</code> 目录中的文件。</p><table><caption>表 2 RequestDispatcher 接口的方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>forward(ServletRequest request,ServletResponse response)</td><td>该方法用于将请求从一个 Servlet 传递给另一个 Web 资源。在 Servlet 中，可以对请求做一个初步处理，然后通过调用这个方法，将请求传递给其他资源进行响应。需要注意的是，该方法必须在响应提交给客户端之前被调用，否则将抛出 IllegalStateException 异常</td></tr><tr><td>include(ServletRequest request,ServletResponse response)</td><td><br>该方法用于将其他的资源作为当前响应内容包含进来</td></tr></tbody></table><p><code>servlet01：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);    <span class="comment">// 将数据存储到request对象中</span></span><br><span class="line">        RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/ResultServlet&quot;</span>);<span class="comment">//注意，可以使用WEB-INF中的文件</span></span><br><span class="line">        dispatcher.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>servlet02：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String username = (String) request.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;用户名：&quot;</span> + username + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>HttpServletResponse 接口继承自 ServletResponse 接口，主要用于封装 HTTP 响应消息。由于 HTTP 响应消息分为状态行、响应消息头、消息体三部分。因此，在 HttpServletResponse 接口中定义了向客户端发送响应状态码、响应消息头、响应消息体的方法。</p><h3 id="发送状态码相关的方法"><a href="#发送状态码相关的方法" class="headerlink" title="发送状态码相关的方法"></a>发送状态码相关的方法</h3><p>当 Servlet 向客户端回送响应消息时，需要在响应消息中设置状态码。因此，HttpServletResponse 接口定义了两个发送状态码的方法。</p><h4 id="setStatus（int-status）方法"><a href="#setStatus（int-status）方法" class="headerlink" title="setStatus（int status）方法"></a>setStatus（int status）方法</h4><p>该方法用于设置 HTTP 响应消息的状态码，并生成响应状态行。由于响应状态行中的状态描述信息直接与状态码相关，而 HTTP 版本由服务器确定，因此，只要通过 setStatus（int status）方法设置了状态码，即可实现状态行的发送。需要注意的是，在正常情况下，Web 服务器会默认产生一个状态码为 200 的状态行。</p><h4 id="sendError（int-sc）方法"><a href="#sendError（int-sc）方法" class="headerlink" title="sendError（int sc）方法"></a>sendError（int sc）方法</h4><p>该方法用于发送表示错误信息的状态码。例如，404 状态码表示找不到客户端请求的资源。response 对象提供了两个重载的 sendError（int sc）方法，具体如下：</p><p><code>public void sendError(int code) throws java.io.IOException</code><br><code>public void sendError(int code,String message)throws java.io.IOException</code></p><p>在上面重载的两个方法中，第一个方法只发送错误信息的状态码，而第二个方法除了发送状态码以外，还可以增加一条用于提示说明的文本信息，该文本信息将出现在发送给客户端的正文内容中。</p><h3 id="发送响应消息头相关的方法"><a href="#发送响应消息头相关的方法" class="headerlink" title="发送响应消息头相关的方法"></a>发送响应消息头相关的方法</h3><p>Servlet 向客户端发送的响应消息中包含响应头字段，由于 HTTP 协议的响应头字段有很多种，因此，HttpServletResponse 接口定义了一系列设置 HTTP 响应头字段的方法。</p><table><caption>表 1 设置响应消息头字段的方法</caption><thead><tr><th scope="col">方法声明</th><th scope="col">功能描述</th></tr></thead><tbody><tr><td>void addHeader(String name,String value)</td><td colspan="1" rowspan="2">这两个方法都是用于设置 HTTP 协议的响应头字段。其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响 应头字段的值。不同的是，addHeader() 方法可以增加同名的响应头字段，而 setHeader() 方法则会覆盖同名的头字段</td></tr><tr><td>void setHeader (String name,String value)</td></tr><tr><td>void addIntHeader(String name,int value)</td><td colspan="1" rowspan="2">这两个方法专门用于设置包含整数值的响应头，避免了使用 addHeader() 与 setHeader() 方法时需要将 int 类型的设置值转换为 String 类型的麻烦</td></tr><tr><td><br>void setIntHeader(String name, int value)</td></tr><tr><td>void setContentType(String type)</td><td>该方法用于设置 Servlet 输出内容的 MIME 类型，对于 HTTP 协议来说，就是设置 Content-Type 响应头字段的值。例如，如果发送到客户端的内容是 jpeg 格式的图像数据,就需要将响应头字段的类型设置为 image/jpeg。需要注意的是，如果响应的内容为文本，setContentType() 方法还可以设置字符编码，如 text/html;charset = UTF-8</td></tr><tr><td>void setLocale (Locale loc)</td><td>该方法用于设置响应消息的本地化信息。对 HTTP 来说，就是设置 Content-Language 响应头字段和 Content-Type 头字段中的字符集编码部分。需要注意的是，如果 HTTP 消息没有设置 Content-Type 头字段，则 setLocale() 方法设置的字符集编码不会出现在 HTTP 消息的响应头中，如果调用 setCharacterEncoding() 或 setContentType() 方法指定了响应内 容的字符集编码，则 setLocale() 方法将不再具有指定字符集编码的功能</td></tr><tr><td>void setCharacterEncoding(String charset)</td><td>该方法用于设置输出内容使用的字符编码，对 HTTP 协议来说，就是设置 Content-Type 头字段中的字符集编码部分。如果没有设置 Content-Type 头字段，则 setCharacterEncoding 方法设 置的字符集编码不会出现在 HTTP 消息的响应头中。setCharacterEncoding() 方法比 setContentType() 和 setLocale() 方法的优先权高，它的设置结果将覆盖 setContentType() 和 setLocale() 方法所设置的字符码表</td></tr></tbody></table><h3 id="发送响应消息体相关的方法"><a href="#发送响应消息体相关的方法" class="headerlink" title="发送响应消息体相关的方法"></a>发送响应消息体相关的方法</h3><p>由于在 HTTP 响应消息中，大量的数据都是通过响应消息体传递的，因此，ServletResponse 遵循以 I/O 流传递大量数据的设计理念。在发送响应消息体时，定义了两个与输出流相关的方法。</p><h4 id="getOutputStream-方法"><a href="#getOutputStream-方法" class="headerlink" title="getOutputStream()方法"></a>getOutputStream()方法</h4><p>该方法所获取的字节输出流对象为 ServletOutputStream 类型。由于 ServletOutputStream是OutputStream 的子类，它可以直接输出字节数组中的二进制数据。因此，要想输出二进制格式的响应正文，就需要使用 <code>getOutputStream()</code> 方法。</p><h4 id="getWriter-方法"><a href="#getWriter-方法" class="headerlink" title="getWriter()方法"></a>getWriter()方法</h4><p>该方法所获取的字符输出流对象为 PrintWriter 类型。由于 PrintWriter 类型的对象可以直接输出字符文本内容，因此，要想输出内容全部为字符文本的网页文档，则需要使用 <code>getWriter()</code> 方法。</p><p>注意：虽然 response 对象的 getOutputStream() 和 getWriter() 方法都可以发送响应消息体，但是，它们之间互相排斥，不可同时使用，否则会发生 IllegalStateException 异常。</p><h2 id="重定向-页面跳转"><a href="#重定向-页面跳转" class="headerlink" title="重定向(页面跳转)"></a>重定向(页面跳转)</h2><p>请求重定向指 Web 服务器接收到客户端的请求后，可能由于某些条件的限制，不能访问当前请求 URL 所指向的 Web 资源，而是指定了一个新的资源路径，让客户端重新发送请求。</p><p>为了实现请求重定向，HttpServletResponse 接口定义了一个 sendRedirect() 方法，该方法用于生成 302 响应码和 Location 响应头，从而通知客户端重新访问 Location 响应头中指定的 URL，sendRedirect() 方法的完整语法如下所示：</p><p><code>public void sendRedirect(java.lang.String location) throws java.io.IOException</code></p><p>在上述方法代码中，参数 location 可以使用相对 URL，Web 服务器会自动将相对 URL 翻译成绝对 URL，再生成 Location 头字段。</p><p>例如：</p><p><code>login.html:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把表单内容提交到 servletDemo02 工程下的 LoginServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servletDemo02/LoginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>welcome.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    欢迎你，登陆成功！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>创建 LoginServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 用 HttpServletRequest 对象的 getParameter() 方法获取用户名和密码</span></span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 假设用户名和密码分别为 admin 和 123456</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; (<span class="string">&quot;123456&quot;</span>).equals(password)) &#123;</span><br><span class="line">            <span class="comment">// 如果用户名和密码正确，重定向到 welcome.html</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/servletDemo02/welcome.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果用户名和密码错误，重定向到 login.html</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/servletDemo02/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>由于未指定浏览器和服务端编码，因此可能出现乱码的情况。</p><h3 id="request乱码"><a href="#request乱码" class="headerlink" title="request乱码"></a>request乱码</h3><p>对request对象使用<code>setCharacterEncoding()</code>方法，指定编码，可以避免从浏览器获得的数据存在乱码现象。</p><p>在调用request的任何其他方法前，使用如下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>); <span class="comment">//设置request对象的解码方式</span></span><br></pre></td></tr></table></figure><h3 id="response乱码"><a href="#response乱码" class="headerlink" title="response乱码"></a>response乱码</h3><p>第一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);    <span class="comment">//设置 HttpServletResponse使用utf-8编码</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);    <span class="comment">//通知浏览器使用utf-8解码</span></span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);  <span class="comment">//包含第一种方式的两个功能</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] <a href="http://c.biancheng.net/servlet/">Servlet入门教程 (biancheng.net)</a></p><p>[2] <a href="https://www.bilibili.com/video/BV1Y7411K7zz">尚硅谷最新版JavaWeb全套教程 java web零基础入门完整版_哔哩哔哩_bilibili</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器初探</title>
      <link href="/articles/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><ul><li>作为web开发人员，开发完的网页肯定是想通过ip或域名在浏览器上访问</li><li>用户使用浏览器访问网页就是发送http请求，web服务器响应请求的过程，所以解析http的工作就交给web服务器了</li><li>web服务器有很多，Tomcat是一款小巧灵活并使用最为广泛的轻量级Web应用服务器，提供了对Jsp和Servlet的支持</li></ul><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h2><table><caption>不同版本的 Tomcat 对各种规范的支持</caption><tbody><tr><th>Tomcat 版本</th><th>最新子版本</th><th>Servlet<br>规范</th><th>JSP<br>规范</th><th>EL<br>规范</th><th>WebSocket<br>规范</th><th>认证（JASIC）<br>规范</th><th>Java 版本</th></tr><tr><td>10.0.x</td><td>10.0.0</td><td>5.0</td><td>3.0</td><td>4.0</td><td>2.0</td><td>2.0</td><td>8 以及更高</td></tr><tr><td>9.0.x</td><td>9.0.36</td><td>4.0</td><td>2.3</td><td>3.0</td><td>1.1</td><td>1.1</td><td>8 以及更高</td></tr><tr><td>8.5.x</td><td>8.5.56</td><td>3.1</td><td>2.3</td><td>3.0</td><td>1.1</td><td>1.1</td><td>7 以及更高</td></tr><tr><td>8.0.x（已被取代）</td><td>8.0.53（已被取代）</td><td>3.1</td><td>2.3</td><td>3.0</td><td>1.1</td><td>N/A</td><td>7 以及更高</td></tr><tr><td>7.0.x</td><td>7.0.104</td><td>3.0</td><td>2.2</td><td>2.2</td><td>1.1</td><td>N/A</td><td>6 以及更高<br>（对于 WebSocket，支持 7 以及更高）</td></tr><tr><td>6.0.x（已废弃）</td><td>6.0.53（已废弃）</td><td>2.5</td><td>2.1</td><td>2.1</td><td>N/A</td><td>N/A</td><td>5 以及更高</td></tr><tr><td>5.5.x（已废弃）</td><td>5.5.36（已废弃）</td><td>2.4</td><td>2.0</td><td>N/A</td><td>N/A</td><td>N/A</td><td>1.4 以及更高</td></tr><tr><td>4.1.x（已废弃）</td><td>4.1.40（已废弃）</td><td>2.3</td><td>1.2</td><td>N/A</td><td>N/A</td><td>N/A</td><td>1.3 以及更高</td></tr><tr><td>3.3.x（已废弃）</td><td>3.3.2（已废弃）</td><td>2.2</td><td>1.1</td><td>N/A</td><td>N/A</td><td>N/A</td><td>1.1 以及更高</td></tr></tbody></table><h2 id="目录与文件"><a href="#目录与文件" class="headerlink" title="目录与文件"></a>目录与文件</h2><p>以下是 Tomcat 的一些关键目录：</p><ul><li><strong>/bin</strong>     命令中心：存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 <code>*.sh</code> 文件在功能上等同欲Windows 系统专用的 <code>*.bat</code> 文件。因为 Win32 的命令行缺乏某些功能，所以又额外地加入了一些文件。</li><li><strong>/conf</strong>    配置中心：配置文件及相关的 DTD。其中最重要的文件是 server.xml，这是容器的主配置文件。</li><li>/lib     Tomcat 的库文件。Tomcat 运行时需要的 jar 包所在的目录。</li><li>/temp    存储临时产生的文件，即缓存。</li><li><strong>/log</strong>     日志文件的默认目录。</li><li><strong>/webapps</strong> 存放 Web 应用的相关文件。web 应用放置到此目录下浏览器可以直接访问。</li><li>/work    编译以后的 class 文件。</li></ul><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>首先需要安装JRE，不过多演示如何安装运行环境</p><p>使用魔法去该网站下载Tomcat服务器压缩文件：<a href="http://tomcat.apache.org/">Apache Tomcat® - Welcome!</a></p><p><img src="image-20210920222839029.png" alt="image-20210920222839029"></p><p>下载完成后，进行解压</p><p>本人尝试在Windows下部署，之后JavaEE完成之后，将再演示部署到Linux服务器上。</p><h2 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h2><p>安装配置好了 Tomcat 和 JDK，就可以将 Tomcat 跑起来了。进入 Tomcat 安装目录下的 bin 文件夹，找到 startup.bat 脚本文件，双击即可运行 Tomcat。</p><p>若在Linux下，可以使用<code>./startup.sh</code>启动服务器</p><p><img src="image-20210920224436509.png" alt="image-20210920224436509"></p><h3 id="解决显示乱码问题"><a href="#解决显示乱码问题" class="headerlink" title="解决显示乱码问题"></a>解决显示乱码问题</h3><p>在安装路径的conf文件夹下找到<code>logging.properties</code>的文件，将其中的<code>java.util.logging.ConsoleHandler.encoding = UTF-8</code>后的<code>UTF-8</code>修改为GBK编码(原因是憨批Windows的默认编码是GBK编码，若改Windows为UTF-8，相信我会有更多的bug……)</p><h3 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h3><p>访问<a href="http://localhost:8080/">http://localhost:8080/</a> 即可看到如下所示页面，说明服务启动成功</p><p><img src="image-20210920225448704.png" alt="image-20210920225448704"></p><h2 id="如何停止Tomcat服务器"><a href="#如何停止Tomcat服务器" class="headerlink" title="如何停止Tomcat服务器"></a>如何停止Tomcat服务器</h2><p>1.在windows下直接点击powershell右上角的【x】进行关闭</p><p>2.使用快捷键Ctrl+C关闭服务器</p><p>3.找到Tomcat安装路径下bin目录中的shutdown.bat关闭服务器，Linux使用shutdown.sh</p><h2 id="在IDEA中管理配置Tomcat服务器"><a href="#在IDEA中管理配置Tomcat服务器" class="headerlink" title="在IDEA中管理配置Tomcat服务器"></a>在IDEA中管理配置Tomcat服务器</h2><p>1.在IDEA中建立JavaEE应用时选择服务器</p><p><img src="image-20210920230636618.png" alt="image-20210920230636618"></p><p>未创建过服务器时可以新建服务器</p><p><img src="image-20210920230757407.png" alt="image-20210920230757407"></p><p>文件结构如下所示，使用Maven进行JAR包管理：</p><p><img src="image-20210920232900527.png" alt="image-20210920232900527"></p><p>配置Tomcat启动选项</p><p><img src="image-20210920232959173.png" alt="image-20210920232959173"></p><p>启动服务器：</p><p><img src="image-20210920233049107.png" alt="image-20210920233049107"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> 服务器部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础学习</title>
      <link href="/articles/MySQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/articles/MySQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>MySQL是一个<strong>关系型数据库管理系统，</strong>由瑞典MySQL AB公司开发，属于Oracle旗下产品。MySQL是最流行的关系型数据库管理系统之一，在WEB应用方面，MySQL是最好的 RDBMS(Relational Database Management System，关系数据库管理系统)应用软件之一。</p><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般网站的开发都选择 MySQL 作为网站数据库。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><h3 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h3><p>首先我们需要在Oracle的官网下载MySQL的安装包，推荐下载ZIP压缩包，使用压缩包可以避免注册表产生的相关问题，下载完成后，对ZIP进行解压。</p><p>这里选择了下载8.025版本，可能会存在问题，理论上安装5.7版本应该是最稳定的，不过鉴于学习的目的，先瞎鼓捣尝试一下。</p><p>解压完成后，在根目录中，我们需要新建一个my.ini文件，该文件是mysql的配置文件，可以对mysql进行相关的配置。我的配置如下所示（网上偷师学到的，不保证靠谱，<strong>记住mysql安装目录一定要改成自己的！</strong>）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment">#设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\SourceFiles\mysql</span><br><span class="line"><span class="comment">#设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\SourceFiles\mysql\Data</span><br><span class="line"><span class="comment">#允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment">#允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">#服务端使用的字符集默认为utf8mb4</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment">#创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment">#默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment">#设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment">#设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></table></figure><p>之后配置系统变量，将<strong>mysql\bin</strong>目录添加到path环境变量中去，方便在命令行界面使用命令。</p><p>使用管理员权限打开cmd界面（<strong>否则将没有权限开启服务</strong>）</p><p>将路径切换到mysql的bin目录下，使用命令mysqld -install安装mysql。再输入mysqld –initialize-insecure –user=mysql初始化数据文件（可以看到出现了data文件夹，里面以db形式存放了数据库的配置信息）</p><p>之后启动mysql，使用mysql -u root -p进入mysql管理界面（此时密码为空，直接回车进入即可）</p><p>进入界面后，可以更改root密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>(记住SQL语句输入完成后需要输入;)</p><p>(输入flash privileges;刷新权限)</p><p>最后重启mysql即可正常进行使用：</p><p>在管理员权限下的控制台输入：</p><ul><li>net stop mysql 停止mysql服务</li><li>net start mysql 启动mysql服务</li></ul><p>之后尝试用mysql -u’root’ -p’password’进行登录(‘root’ 可以修改为自己的用户 ‘password’改成自己设置的密码，如123456，<strong>切记-u和’root’ 、-p和’password’ 之间没有空格！</strong>)</p><blockquote><p><strong>注意：若mysql服务安装错误，可以使用sc delete mysql语句在管理员权限下清空服务</strong></p></blockquote><h3 id="SQL可视化软件"><a href="#SQL可视化软件" class="headerlink" title="SQL可视化软件"></a>SQL可视化软件</h3><ul><li>SQLyog        体积较小，功能较为完善</li><li>Navicat       体积较大，功能较多</li></ul><p>本次尝试使用Navicat对数据库进行可视化管理！</p><p><img src="image-20210813111516192-16288245176381.png" alt="Navicat主界面"></p><center>Navicat主界面如图所示：</center><p><img src="image-20210813112018853-16288248202802.png" alt="尝试连接到localhost:3306数据库"></p><center>尝试连接到localhost:3306数据库：</center><h3 id="测试基本的新建数据库操作"><a href="#测试基本的新建数据库操作" class="headerlink" title="测试基本的新建数据库操作"></a>测试基本的新建数据库操作</h3><blockquote><p>要求：新建一个数据库，名称为：school</p><p>​           新建一张表，表名为：<code>student</code></p><p>​           新建一些字段：id, name, age等</p></blockquote><p><img src="image-20210813113700031.png" alt="image-20210813113700031"></p><center> 新建数据库，名称为school，使用utf8编码，排序规则使用utf8_general_ci</center><p><img src="image-20210813113838394.png" alt="image-20210813113838394"></p><center> 使用InnoDB引擎，编码集选择utf8，排序规则选择utf8_general_ci</center><p><img src="image-20210813114333554.png" alt="image-20210813114333554"></p><h3 id="使用命令行界面连接数据库"><a href="#使用命令行界面连接数据库" class="headerlink" title="使用命令行界面连接数据库"></a>使用命令行界面连接数据库</h3><p>使用语句<code>mysql -uroot -p</code>，之后输入密码，密码正确后，即可正确进入MySQL</p><p>MySQL中，使用<code>--</code>作为注释，例如<code>-- 注释</code></p><p><strong>简单的一些基本语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;<span class="comment">-- 展示所有的数据库</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> school             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用ctrl+c可以强行终止mysql语句</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use school<span class="comment">-- 切换数据库 使用use加数据库名</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;<span class="comment">-- 展示该数据库中的所有的表</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_school <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> student          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> status<span class="comment">-- 查看当前状态</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line">D:\SourceFiles\mysql\bin\mysql.exe  Ver <span class="number">8.0</span><span class="number">.25</span> <span class="keyword">for</span> Win64 <span class="keyword">on</span> x86_64 (MySQL Community Server <span class="operator">-</span> GPL)</span><br><span class="line"></span><br><span class="line">Connection id:          <span class="number">12</span></span><br><span class="line"><span class="keyword">Current</span> database:       school</span><br><span class="line"><span class="keyword">Current</span> <span class="keyword">user</span>:           root<span class="variable">@localhost</span></span><br><span class="line">SSL:                    Cipher <span class="keyword">in</span> use <span class="keyword">is</span> TLS_AES_256_GCM_SHA384</span><br><span class="line"><span class="keyword">Using</span> delimiter:        ;</span><br><span class="line">Server version:         <span class="number">8.0</span><span class="number">.25</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line">Protocol version:       <span class="number">10</span></span><br><span class="line">Connection:             localhost via TCP<span class="operator">/</span>IP</span><br><span class="line">Server characterset:    utf8mb4</span><br><span class="line">Db     characterset:    utf8mb3</span><br><span class="line">Client characterset:    utf8mb4</span><br><span class="line">Conn.  characterset:    utf8mb4</span><br><span class="line">TCP port:               <span class="number">3306</span></span><br><span class="line"><span class="type">Binary</span> data <span class="keyword">as</span>:         Hexadecimal</span><br><span class="line">Uptime:                 <span class="number">4</span> days <span class="number">7</span> hours <span class="number">42</span> min <span class="number">40</span> sec</span><br><span class="line"></span><br><span class="line">Threads: <span class="number">2</span>  Questions: <span class="number">224</span>  Slow queries: <span class="number">0</span>  Opens: <span class="number">199</span>  Flush tables: <span class="number">3</span>  <span class="keyword">Open</span> tables: <span class="number">118</span>  Queries <span class="keyword">per</span> <span class="keyword">second</span> avg: <span class="number">0.000</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> student;<span class="comment">-- 显示student表中的信息</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> columns <span class="keyword">from</span> student;<span class="comment">-- 显示student表中的信息，使用describe较为简单</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exit；<span class="comment">-- 退出与MySQL的连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释（SQL本身的注释）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*SQL的多行注释</span></span><br><span class="line"><span class="comment">hello，</span></span><br><span class="line"><span class="comment">world！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>数据库的基本语言</strong>    核心即CRUD业务(增删改查)</p><blockquote><p>DDL    定义</p><p>DML    操作</p><p>DQL    查询</p><p>DCL    控制</p></blockquote><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><p>操作数据库 &gt; 操作数据库中的表 &gt; 操作数据库中的表的数据</p><p><strong>mysql关键字不区分大小写</strong></p><h3 id="SQL基本信息"><a href="#SQL基本信息" class="headerlink" title="SQL基本信息"></a>SQL基本信息</h3><h4 id="表（table）"><a href="#表（table）" class="headerlink" title="表（table）"></a>表（table）</h4><p><strong>某种特定类型数据的结构化清单</strong></p><p>数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的，这表示数据库中没有其他表具有相同的名字。</p><blockquote><p><strong>表名</strong> 表名的唯一性取决于多个因素，如数据库名和表名等的结合。这表示，虽然在相同数据库中不能两次使用相同的表名，但在不同的数据库中却可以使用相同的表名。</p></blockquote><h4 id="模式（schema）"><a href="#模式（schema）" class="headerlink" title="模式（schema）"></a>模式（schema）</h4><p><strong>关于数据库和表的布局及特性的信息</strong></p><blockquote><p>有时，模式用作数据库的同义词。遗憾的是，模式的含义通常在上下文中并不是很清晰。</p></blockquote><h4 id="列（column）表中的一个字段"><a href="#列（column）表中的一个字段" class="headerlink" title="列（column）表中的一个字段"></a>列（column）表中的一个字段</h4><p><strong>所有表都是由一个或多个列组成的。</strong></p><blockquote><p><strong>分解数据</strong> 正确地将数据分解为多个列极为重要。例如，城市、州、邮政编码应该总是独立的列。通过把它分解开，才有可能利用特定的列对数据进行排序和过滤（如，找出特定州或特定城市的所有顾客）。如果城市和州组合在一个列中，则按州进行排序或过滤会很困难。</p></blockquote><blockquote><p><strong>数据类型（datatype）</strong>所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据。</p></blockquote><h4 id="行（row）-表中的一个记录"><a href="#行（row）-表中的一个记录" class="headerlink" title="行（row） 表中的一个记录"></a>行（row） 表中的一个记录</h4><blockquote><p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p></blockquote><h4 id="主键（primary-key）"><a href="#主键（primary-key）" class="headerlink" title="主键（primary key）"></a>主键（primary key）</h4><p><strong>一列（或一组列），其值能够唯一区分表中每个行。</strong></p><p>唯一标识表中每行的这个列（或这组列）称为主键。主键用来表示一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安全的方法保证只涉及相关的行。</p><blockquote><p><strong>应该总是定义主键</strong> 虽然并不总是都需要主键，但大多数数据库设计人员都应保证他们创建的每个表具有一个主键，以便于以后的数据操纵和管理。</p></blockquote><p>表中的任何列都可以作为主键，只要它满足以下条件：</p><ul><li>任意两行都不具有相同的主键值；</li><li>每个行都必须具有一个主键值（主键列不允许NULL值）。</li></ul><p>主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。在使用多列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）。</p><blockquote><p><strong>主键的最好习惯</strong> 除MySQL强制实施的规则外，应该坚持的几个普遍认可的最好习惯为：</p><ul><li>不更新主键列中的值；</li><li>不重用主键列的值；</li><li>不在主键列中使用可能会更改的值。（例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。）</li></ul></blockquote><h3 id="导入样例的数据库"><a href="#导入样例的数据库" class="headerlink" title="导入样例的数据库"></a>导入样例的数据库</h3><p>我们使用《MySQL必知必会》内提供的样例表进行操作。</p><p>进入书中提供的网址：<a href="https://forta.com/books/0672327120/">MySQL Crash Course – Ben Forta</a></p><p>此时网站提供的样例表下载资源URL为(若不能下载，请尝试挂梯子或者进入网站下载)：<a href="https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip">点击下载</a></p><p>下载完成后存储到磁盘位置，之后使用文件(create.sql  populate.sql)进行样例表的创建。</p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>使用mysql命令行界面：</p><p>输入创建数据库命令：create database crashcourse;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database crashcourse;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> crashcourse        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> school             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用crashcourse作为数据库的名称，便于与《MySQL必知必会》上的案例结合。</p><h4 id="选取数据库"><a href="#选取数据库" class="headerlink" title="选取数据库"></a>选取数据库</h4><p>使用use命令：<code>use crashcourse;</code></p><h4 id="执行create-sql脚本"><a href="#执行create-sql脚本" class="headerlink" title="执行create.sql脚本"></a>执行create.sql脚本</h4><p>输入执行脚本的命令，即指定数据库的源；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use crashcourse;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> source E:\DataBase\mysql_scripts\create.sql</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.09</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="执行populate-sql脚本"><a href="#执行populate-sql脚本" class="headerlink" title="执行populate.sql脚本"></a>执行populate.sql脚本</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source E:\DataBase\mysql_scripts\populate.sql</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_crashcourse <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> customers             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> orderitems            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> orders                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> productnotes          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> products              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> vendors               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="查看表列"><a href="#查看表列" class="headerlink" title="查看表列"></a>查看表列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> columns <span class="keyword">from</span> customers;<span class="comment">-- 使用SHOW COLUMNS展示表列，或者使用DESCRIBE</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id      <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_name    <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_address <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_city    <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_state   <span class="operator">|</span> <span class="type">char</span>(<span class="number">5</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_zip     <span class="operator">|</span> <span class="type">char</span>(<span class="number">10</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_country <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_contact <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_email   <span class="operator">|</span> <span class="type">char</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> customers;<span class="comment">-- 使用DESCRIBE展示表列</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id      <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_name    <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_address <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_city    <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_state   <span class="operator">|</span> <span class="type">char</span>(<span class="number">5</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_zip     <span class="operator">|</span> <span class="type">char</span>(<span class="number">10</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_country <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_contact <span class="operator">|</span> <span class="type">char</span>(<span class="number">50</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cust_email   <span class="operator">|</span> <span class="type">char</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到，上述表列中，有一个Extra属性，其中出现了auto_increment; </p><p>该属性的含义为自动增加编号而不必自己去进行定义赋值。</p><blockquote><p><strong>什么是自动增量？</strong> 某些表列需要唯一值。例如，订单编号、雇员ID或（如上面例子中所示的）顾客ID。在每个行添加到表中时，MySQL可以自动地为每个行分配下一个可用编号，不用在添加一行时手动分配唯一值（这样做必须记住最后一次使用的值）。这个功能就是所谓的自动增量。如果需要它，则必须在用CREATE语句创建表时把它作为表定义的组成部分。</p></blockquote><h2 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h2><h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><p>SELECT语句的作用是从一个或者多个表中检索出信息。</p><p>为了使用SELECT语句，至少要提供两条信息：</p><ol><li>想选择什么信息 </li><li>以及从什么地方选择</li></ol><h4 id="检索单个列"><a href="#检索单个列" class="headerlink" title="检索单个列"></a>检索单个列</h4><p>使用语句：<code>select FIELD from TABLE;</code> </p><p>此语句检索单个列所需的列名在SELECT关键字之后给出，FROM关键字指出从其中检索数据的表名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field      <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> prod_id    <span class="operator">|</span> <span class="type">char</span>(<span class="number">10</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> vend_id    <span class="operator">|</span> <span class="type">int</span>          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> prod_name  <span class="operator">|</span> <span class="type">char</span>(<span class="number">255</span>)    <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> prod_price <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> prod_desc  <span class="operator">|</span> text         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> prod_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">from</span> products;<span class="comment">-- 从products表中选择prod_id列，显示数据</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV03   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FU1     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DTNTR   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAFE    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP1000  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>若进行该查询，可能会发现显示出的数据顺序和此处的顺序不相同，原因是未指定排序查询结果，因此返回的数据顺序不具有特殊意义。</p></blockquote><blockquote><p><strong>SQL语句和大小写</strong> 请注意，SQL语句不区分大小写，因此SELECT与select是相同的。同样，写成Select也没有关系。<br>   许多SQL开发人员喜欢对所有SQL关键字使用大写，而对所有列和表名使用小写，这样做使代码更易于阅读和调试。</p><p>​    不过，一定要认识到虽然SQL是不区分大小写的，但有些标识符（如数据库名、表名、列名）可能不同：在MySQL 4.1及之前的版本中，这些标识符默认是区分大小写的；在MySQL 4.1.1版本中，这些标识符默认是不区分大小写的。<br>​    最佳方式是按照大小写的惯例，且使用时保持一致。</p></blockquote><blockquote><p><strong>使用空格</strong> 在处理SQL语句时，其中所有空格都被忽略。SQL语句可以在一行上给出，也可以分成许多行。多数SQL开发人员认为将SQL语句分成多行更容易阅读和调试。</p></blockquote><h4 id="检索多个列"><a href="#检索多个列" class="headerlink" title="检索多个列"></a>检索多个列</h4><blockquote><p><strong>逗号</strong> 在选择多个列时，一定要在列名之前加上逗号，最后一个列名不加逗号。</p></blockquote><p>使用语句：<code>SELECT prod_id, prod_name, prod_price FROM products;</code></p><p>此语句指令了3个列名，列名之间使用逗号进行分隔，以此对多个列检索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_id, prod_name, prod_price <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV03   <span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DTNTR   <span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FU1     <span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP1000  <span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAFE    <span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="检索所有列"><a href="#检索所有列" class="headerlink" title="检索所有列"></a>检索所有列</h4><p>使用语句：<code>SELECT * FROM products;</code></p><p>此语句使用通配符(*)，返回表中的所有列，列的顺序不固定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> vend_id <span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span> prod_desc                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil, black, complete <span class="keyword">with</span> handy hook                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span> <span class="number">1</span> ton anvil, black, complete <span class="keyword">with</span> handy hook <span class="keyword">and</span> carrying <span class="keyword">case</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV03   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span> <span class="number">2</span> ton anvil, black, complete <span class="keyword">with</span> handy hook <span class="keyword">and</span> carrying <span class="keyword">case</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DTNTR   <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span> Detonator (plunger powered), fuses <span class="keyword">not</span> included                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Large</span> bag (suitable <span class="keyword">for</span> road runners)                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> Carrots (rabbit hunting season <span class="keyword">only</span>)                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FU1     <span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span> <span class="number">1</span> dozen, extra long                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP1000  <span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span> JetPack <span class="number">1000</span>, intended <span class="keyword">for</span> single use                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span> JetPack <span class="number">2000</span>, multi<span class="operator">-</span>use                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span> Oil can, red                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAFE    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span> Safe <span class="keyword">with</span> combination lock                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span> Sling, <span class="keyword">one</span> size fits <span class="keyword">all</span>                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> TNT, red, single stick                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> TNT, red, pack <span class="keyword">of</span> <span class="number">10</span> sticks                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>该语句可以用来检索未知列，因为通配符可以匹配所有的列名</p></blockquote><h4 id="检索不同的行"><a href="#检索不同的行" class="headerlink" title="检索不同的行"></a>检索不同的行</h4><p>使用SELECT返回的是所有的匹配的行，若不想让每个值在每次都出现，可以使用<code>DISTINCT</code>关键字使得MySQL返回不同的值。</p><p>使用语句：<code>SELECT DISTINCT vend_id FROM products;</code></p><p>此语句只返回不同的<code>vend_id</code>行，若使用DISTINCT关键字，必须放在列名之前。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_id <span class="keyword">FROM</span> products;<span class="comment">-- 使用DISTINCT关键字，查询不同值</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_id <span class="keyword">FROM</span> products;<span class="comment">-- 不使用DISTINCT关键字，查询所有值</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>注意！</strong> 不能部分使用DISTINCT，若使用则必须所有的列都使用，否则将会检索所有的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_id,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> prod_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="限制结果"><a href="#限制结果" class="headerlink" title="限制结果"></a>限制结果</h4><p>使用语句：<code>SELECT prod_name FROM products LIMIT 5;</code></p><p>此语句使用LIMIT进行限制，使得MySQL返回的行数不多于5行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products LIMIT <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">.5</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> ton anvil  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Detonator    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bird seed    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>为了得出下一个5行，可以指定要检索的开始行和检索行数：</p><p>使用语句：<code>SELECT prod_name FROM products LIMIT 5,5;</code></p><p>此语句中：<code>LIMIT 5,5</code>指示Mysql返回从第5行开始的之后5行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products LIMIT <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> Carrots      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Fuses        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Oil can      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>注意！</strong> 行数从第0行开始，故使用LIMIT 1，1检测出的是第二行而不是第一行。当行数没有足够的行时，使用LIMIT只返回它能返回的行。</p><h4 id="使用完全限定的表名"><a href="#使用完全限定的表名" class="headerlink" title="使用完全限定的表名"></a>使用完全限定的表名</h4><p>使用语句：<code>SLEECT products.prod_name FROM products;</code></p><p>此语句中：限定了一个完全被指定了表和列的列名，在某些特殊情况下，需要使用该条语句！</p><h3 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h3><p>使用SELECT语句可以检索需要的数据，但是，正如3.1节中所示，并不存在特定的顺序。如果不排序，数据一般将以它在底层表中出现的顺序显示。<strong>这可以是数据最初添加到表中的顺序</strong>。但是，如果数据后来进行过更新或删除，则此顺序将会受到MySQL重用回收存储空间的影响。<strong>因此，如果不明确控制的话，不能（也不应该）依赖该排序顺序。</strong>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义。</p><blockquote><p><strong>子句（clause）</strong> SQL语句由子句构成，有些子句是必需的，而有的是可选的。一个子句通常由一个关键字和所提供的数据组成。子句的例子有SELECT语句的FROM子句，我们在前一章看到过这个子句。<br>为了明确地排序用SELECT语句检索出的数据，可使用<code>ORDER BY</code>子句。<code>ORDER BY</code>子句取一个或多个列的名字，据此对输出进行排序。</p></blockquote><h4 id="按照单个列排序"><a href="#按照单个列排序" class="headerlink" title="按照单个列排序"></a>按照单个列排序</h4><p>使用语句：<code>SELECT prod_name FROM products ORDER BY prod_name;</code></p><p>此语句中：指示了按照prod_name列以字母顺序(字典序)进行数据的排序，使用了ORDER BY子句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bird seed      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Carrots        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Detonator      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Fuses          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Oil can        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Safe           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sling          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="按照多个列进行排序"><a href="#按照多个列进行排序" class="headerlink" title="按照多个列进行排序"></a>按照多个列进行排序</h4><p>经常会出现需要按照多个列进行排序的情况，例如：希望先按照雇员的姓排序，排序之后再按照雇员的名进行排序(即：公司人员较多，出现较多重复姓氏)，此时若能够按照多个列进行排序，则很有用。</p><p>使用语句：<code>SELECT * FROM products ORDER BY vend_id, prod_price;</code></p><p>此语句中：使用*获取products中的所有信息，再首先按照<code>vend_id</code>进行升序排序，排序后若出现<code>vend_id</code>相同的行，再按照``prod_price`对价格进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_id, prod_price;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> vend_id <span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span> prod_desc                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil, black, complete <span class="keyword">with</span> handy hook                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span> <span class="number">1</span> ton anvil, black, complete <span class="keyword">with</span> handy hook <span class="keyword">and</span> carrying <span class="keyword">case</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV03   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span> <span class="number">2</span> ton anvil, black, complete <span class="keyword">with</span> handy hook <span class="keyword">and</span> carrying <span class="keyword">case</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FU1     <span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span> <span class="number">1</span> dozen, extra long                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span> Oil can, red                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> Carrots (rabbit hunting season <span class="keyword">only</span>)                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> TNT, red, single stick                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span> Sling, <span class="keyword">one</span> size fits <span class="keyword">all</span>                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Large</span> bag (suitable <span class="keyword">for</span> road runners)                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> TNT, red, pack <span class="keyword">of</span> <span class="number">10</span> sticks                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DTNTR   <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span> Detonator (plunger powered), fuses <span class="keyword">not</span> included                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAFE    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span> Safe <span class="keyword">with</span> combination lock                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP1000  <span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span> JetPack <span class="number">1000</span>, intended <span class="keyword">for</span> single use                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span> JetPack <span class="number">2000</span>, multi<span class="operator">-</span>use                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="指定排序方向"><a href="#指定排序方向" class="headerlink" title="指定排序方向"></a>指定排序方向</h4><p>数据排序可以按照升序（默认排序顺序），也可以按照降序排序，若使用降序，则必须指定<code>DESC</code>关键字(descent)对列进行降序排序。</p><p>使用语句：<code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name;</code></p><p>此语句中：按照倒序（降价）的顺序排序商品，再对产品的名称进行正序排序；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_id, prod_price, prod_name <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> prod_price <span class="operator">|</span> prod_name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAFE    <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span> Safe           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP1000  <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV03   <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DTNTR   <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span> Detonator      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> Bird seed      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span> Oil can        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span> Sling          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FU1     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span> Fuses          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> Carrots        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+----------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>若对多个列使用降序排序，则必须对每个列指定<code>DESC</code>关键字。与此同时，若想使用升序排序，需要使用<code>ASC</code>关键字(ascending)，但是事实上不必要如此设定，因为升序排序是默认选项。</p></blockquote><blockquote><p><strong>区分大小写和排序顺序</strong> 在对文本性的数据进行排序时，A与a相同吗？a位于B之前还是位于Z之后？这些问题不是理论问题，其答案取决于数据库如何设置。在字典（dictionary）排序顺序中，A被视为与a相同，这是MySQL（和大多数数据库管理系统）的默认行为。但是，许多数据库管理员能够在需要时改变这种行为（如果你的数据库包含大量外语字符，可能必须这样做）。</p></blockquote><h4 id="查询最值"><a href="#查询最值" class="headerlink" title="查询最值"></a>查询最值</h4><p>使用ORDER BY和LIMIT的组合，可以很方便的找到一列中的最值。</p><p>使用语句：<code>SELECT prod_price, prod_name FROM products ORDER BY prod_price DESC LIMIT 1;</code></p><p>此语句中：使用了ORDER BY和LIMIT的组合，找到价格最昂贵的物品的价格和名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_price, prod_name <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_price <span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h3><p>数据库表一般包含大量的数据，很少需要检索表中所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。</p><p>一般使用SELECT语句和WHERE子句进行，在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。WHERE子句在表名（FROM子句）之后给出。</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE prod_price = 2.5;</code></p><p>此语句中：将查询products表中，prod_price (价格)等于2.5的元素。并将这些行返回。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_id, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price <span class="operator">=</span> <span class="number">2.5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>SQL过滤与应用过滤</strong> 数据也可以在应用层过滤。为此目的，SQL的SELECT语句为客户机应用检索出超过实际所需的数据，然后客户机代码对返回数据进行循环，以提取出需要的行。<br>    通常，这种实现并不令人满意。因此，对数据库进行了优化，以便快速有效地对数据进行过滤。让客户机应用（或开发语言）处理数据库的工作将会极大地影响应用的性能，并且使所创建的应用完全不具备可伸缩性。此外，如果在客户机上过滤数据，服务器不得不通过网络发送多余的数据，这将导致网络带宽的浪费。</p></blockquote><blockquote><p>若使用ORDER BY和WHERE子句，应该将ORDER BY位于WHERE之后</p></blockquote><h4 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h4><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在指定的两个值之间</td></tr></tbody></table><p>MySQL支持以上的所有操作符，可以用在WHERE后，进行条件判断</p><h4 id="检查单个值"><a href="#检查单个值" class="headerlink" title="检查单个值"></a>检查单个值</h4><p>使用语句：<code>SELECT * FROM products WHERE prod_name = &#39;fuses&#39;;</code></p><p>此语句中：检查prod_name为’fuses’的行，它返回prod_name的值为Fuses的一行。<code>MySQL在执行匹配时默认不区分大小写，所以fuses与Fuses匹配。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name <span class="operator">=</span> <span class="string">&#x27;fuses&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+-----------+------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> vend_id <span class="operator">|</span> prod_name <span class="operator">|</span> prod_price <span class="operator">|</span> prod_desc           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+-----------+------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> FU1     <span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Fuses     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span> <span class="number">1</span> dozen, extra long <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+-----------+------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE prod_price &lt; 10;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name     <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">.5</span> ton anvil  <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil   <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Carrots       <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Fuses         <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Oil can       <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sling         <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">1</span> stick) <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT * FROM products WHERE prod_price BETWEEN 5 AND 10;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> vend_id <span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span> prod_desc                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span> <span class="number">.5</span> ton anvil, black, complete <span class="keyword">with</span> handy hook                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span> <span class="number">1</span> ton anvil, black, complete <span class="keyword">with</span> handy hook <span class="keyword">and</span> carrying <span class="keyword">case</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Large</span> bag (suitable <span class="keyword">for</span> road runners)                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span> Oil can, red                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> TNT, red, pack <span class="keyword">of</span> <span class="number">10</span> sticks                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="不匹配检查"><a href="#不匹配检查" class="headerlink" title="不匹配检查"></a>不匹配检查</h4><p>使用语句：<code>SELECT vend_id, prod_name FROM products WHERE vend_id != 1003 AND vend_id &lt;&gt; 1001;</code></p><p>此语句中：使用<code>!=</code>和<code>&lt;&gt;</code>进行不匹配检查，索引不满足需求的行，可以看到使用两种操作符可以得到一样的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_id, prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="operator">!=</span> <span class="number">1003</span> <span class="keyword">AND</span> vend_id <span class="operator">&lt;&gt;</span> <span class="number">1001</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Fuses        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> Oil can      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span> JetPack <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="范围值检查"><a href="#范围值检查" class="headerlink" title="范围值检查"></a>范围值检查</h4><p>使用<code>BETWEEN</code>操作符，可以用来进行范围值检查</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 5 AND 10 AND vend_id != 1001;</code></p><p>此语句中：查找价格在5到10之间且id不为1001的所有行。<strong>在使用BETWEEN时，必须指定两个值——所需范围的低端值和高端值。这两个值必须用AND关键字分隔。BETWEEN匹配范围中所有值，包括指定的开始值和结束值。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="keyword">AND</span> vend_id <span class="operator">!=</span> <span class="number">1001</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="空值检查"><a href="#空值检查" class="headerlink" title="空值检查"></a>空值检查</h4><p>在创建表时，可以指定当前的列中能否存在不包含值，若一个列不包含值，视作包含空值NULL</p><blockquote><p>NULL 无值（no value），它与字段包含0、空字符串或仅仅包含空格不同。</p></blockquote><p>使用<code>IS NULL</code>子句可以返回有空值的列，例如查没有填写家庭地址的客户。</p><p>使用语句：<code>SELECT * FROM customers WHERE cust_email IS NULL;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+------------------+-----------+------------+----------+--------------+--------------+------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> cust_name   <span class="operator">|</span> cust_address     <span class="operator">|</span> cust_city <span class="operator">|</span> cust_state <span class="operator">|</span> cust_zip <span class="operator">|</span> cust_country <span class="operator">|</span> cust_contact <span class="operator">|</span> cust_email <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+------------------+-----------+------------+----------+--------------+--------------+------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10002</span> <span class="operator">|</span> Mouse House <span class="operator">|</span> <span class="number">333</span> Fromage Lane <span class="operator">|</span> Columbus  <span class="operator">|</span> OH         <span class="operator">|</span> <span class="number">43333</span>    <span class="operator">|</span> USA          <span class="operator">|</span> Jerry Mouse  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span> E Fudd      <span class="operator">|</span> <span class="number">4545</span> <span class="number">53</span>rd Street <span class="operator">|</span> Chicago   <span class="operator">|</span> IL         <span class="operator">|</span> <span class="number">54545</span>    <span class="operator">|</span> USA          <span class="operator">|</span> E Fudd       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+------------------+-----------+------------+----------+--------------+--------------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>NULL与不匹配</strong> 在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。</p><p>因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。</p></blockquote><h3 id="组合过滤数据"><a href="#组合过滤数据" class="headerlink" title="组合过滤数据"></a>组合过滤数据</h3><p>我们在使用WHERE子句时，还可以使用AND OR NOT IN这样的操作符进行匹配。</p><h4 id="AND操作符"><a href="#AND操作符" class="headerlink" title="AND操作符"></a>AND操作符</h4><p>使用语句：<code>SELECT prod_id, prod_price, prod_name FROM products WHERE vend_id = 1003 AND prod_price &lt;= 10 AND prod_name != &#39;Sling&#39;;</code></p><p>此语句中：使用了AND操作符来进行匹配，若存在多个与逻辑，需要使用多个AND。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_id, prod_price, prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span> <span class="number">10</span> <span class="keyword">AND</span> prod_name <span class="operator">!=</span> <span class="string">&#x27;Sling&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> prod_price <span class="operator">|</span> prod_name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> Bird seed      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> Carrots        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="OR操作符"><a href="#OR操作符" class="headerlink" title="OR操作符"></a>OR操作符</h4><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1002</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="计算次序"><a href="#计算次序" class="headerlink" title="计算次序"></a>计算次序</h4><p>WHERE语句可以包含任意数目的AND和OR操作符，但是若过于依赖其默认的排序，很可能出现匹配的问题，我们需要使用圆括号帮助其进行优先匹配。</p><p>例如，若想查询价格为10元以上,且编号1002或1003，若使用语句<code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003 AND prod_price &gt;= 10;</code></p><p>一定会产生错误，原因是，SQL在处理OR操作符之前，会优先处理AND操作符，因此这句话中，它会认为应该先找出编号为1003并且价格大于10的产品，或者找到编号为1002的产品，因此会出现有编号为1002的产品的价格少于10。从而产生错误，因此可以使用括号增加优先级，如下所示：</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> <span class="number">1002</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="number">1003</span>) <span class="keyword">AND</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到此时结果正确，查询结果正常。</p><blockquote><p><strong>在WHERE子句中使用圆括号</strong> 任何时候使用具有AND和OR操作符的WHERE子句，都应该使用圆括号明确地分组操作符。不要过分依赖默认计算次序，即使它确实是你想要的东西也是如此。使用圆括号没有什么坏处，它能消除歧义。</p></blockquote><h4 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h4><p>圆括号在WHERE子句中还有另外一种用法。IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清单，全都括在圆括号中。</p><p>使用语句：<code>SELECT prod_name, prod_price FROM products WHERE vend_id IN (1002, 1003) ORDER BY prod_name;</code></p><p>此语句中：使用了IN匹配了vend_id中，所有编号为1002和1003的值，并按照prod_name的字典序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>使用IN操作符可以代替OR操作符的功能，且较为方便便捷。</p><p>例如上述代码，使用以下含OR的代码一样可以完成操作，但是使用IN更加清除直观，且次序较容易管理，比OR操作符执行速度要快。</p><h4 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h4><p>WHERE子句中的NOT操作符只有一个功能，即否定之后的所有关键字。</p><blockquote><p><strong>MySQL中的NOT</strong> MySQL支持使用NOT 对IN 、BETWEEN 和EXISTS子句取反，这与多数其他DBMS允许使用NOT对各种条件取反有很大的差别。</p></blockquote><p>使用语句：<code>SELECT prod_name, vend_id, prod_price FROM products WHERE vend_id NOT IN (1002, 1003) AND prod_price NOT BETWEEN 5 AND 10;</code></p><p>此语句中：使用NOT对1002和1003编号进行反选，且除去价格5到10之间的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name, vend_id, prod_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>) <span class="keyword">AND</span> prod_price <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span> vend_id <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> ton anvil  <span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">1000</span> <span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a>通配符匹配</h3><p>前面介绍的所有操作符都是针对已知值进行过滤的。不管是匹配一个还是多个值，测试大于还是小于已知值，或者检查某个范围的值，共同点是过滤中使用的值都是已知的。但是，这种过滤方法并不是任何时候都好用。例如，怎样搜索产品名中包含文本anvil的所有产品？用简单的比较操作符肯定不行，必须使用通配符。利用通配符可创建比较特定数据的搜索模式。在这个例子中，如果你想找出名称包含anvil的所有产品，可构造一个通配符搜索模式，找出产品名中任何位置出现anvil的产品。</p><h4 id="百分号-通配符"><a href="#百分号-通配符" class="headerlink" title="百分号(%)通配符"></a>百分号(%)通配符</h4><p>使用<code>%</code>可以表示任何字符出现任意次数，例如为了找出jet开头的产品，可以使用jet%进行匹配。</p><p>使用语句：<code>SELECT prod_id, prod_name From products WHERE prod_name LIKE &#39;jet%&#39;;</code></p><p>此语句中：使用jet%进行了匹配，jet和JET都可以进行匹配，数据库若不特殊配置，不区分大小写，若配置后，jet%与JetPACK会不匹配。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_id, prod_name <span class="keyword">From</span> products <span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;jet%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+</span></span><br><span class="line"><span class="operator">|</span> JP1000  <span class="operator">|</span> JetPack <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>若想要查询含有某个词的行，可以前后都带上%，例如<code>%anvil%</code>，这个可以匹配任何位置包含anvil的文本，不论前后出现过什么字符。</strong></p><p><strong>通配符也可以出现在搜索模式之间，例如<code>s%e</code>可以找出以s开头和以e结尾的字符，且%代表0个，1个或多个字符，意味着其也可以匹配se。</strong></p><blockquote><p><strong>注意尾空格</strong> 尾空格可能会干扰通配符匹配。例如，在保存词anvil 时， 如果它后面有一个或多个空格， 则子句WHEREprod_name LIKE ‘%anvil’将不会匹配它们，因为在最后的l后有多余的字符。解决这个问题的一个简单的办法是在搜索模式最后附加一个%。一个更好的办法是使用函数去掉首尾空格。</p></blockquote><blockquote><p><strong>注意NULL</strong> 虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。即使是WHERE prod_name LIKE ‘%’也不能匹配用值NULL作为产品名的行。</p></blockquote><h4 id="下划线-通配符"><a href="#下划线-通配符" class="headerlink" title="下划线(_)通配符"></a>下划线(_)通配符</h4><p>该通配符可以匹配单个字符，不能和%一样去匹配多个字符或0个字符，必须要恰好为1个。</p><p>例如，使用LIKE ‘_ ton anvil’，可以匹配例如’1 ton anvil’但是不能匹配’.1 ton anvil’</p><h4 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h4><ol><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。即先把范围缩小后，再使用通配符进行查询</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ol><h3 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h3><p>正则表达式用正则表达式语言来建立，正则表达式语言是用来完成刚讨论的所有工作以及更多工作的一种特殊语言。与任意语言一样，正则表达式具有你必须学习的特殊的语法和指令。</p><blockquote><p>注意，MySQL中的正则表达式仅为正则表达式的一个子集，意味着有些语句会受到限制。</p></blockquote><h4 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a>基本字符匹配</h4><p>使用REGEXP(Regular Expression)关键字去进行匹配，后面所跟的东西叫做正则表达式。</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;.000&#39; ORDER BY prod_name;</code></p><p>此语句中：使用了正则表达式 <code>.000</code>代替了1000和2000等数据，即.匹配了任意一个字符，因此将1000和2000全部匹配。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;.000&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>使用LIKE和REGEXP有区别，LIKE不会匹配列值，若被匹配的文本在列值中出现，LIKE将无法找到，但是REGEXP可以找到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;1 TON&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;1 TON%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1 TON&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>匹配不区分大小写</strong> MySQL中的正则表达式匹配（自版本3.23.4后）不区分大小写（即，大写和小写都匹配）。为区分大小写，可使用BINARY关键字，如WHERE prod_name REGEXPBINARY ‘JetPack .000’。</p></blockquote><h4 id="进行OR匹配"><a href="#进行OR匹配" class="headerlink" title="进行OR匹配"></a>进行OR匹配</h4><p>使用|进行或匹配，例如 <code>REGEXP &#39;1000|2000|3000&#39;</code>，将匹配1000或2000或3000，因此将会把所有的匹配数据全部返回。</p><h4 id="匹配特定字符"><a href="#匹配特定字符" class="headerlink" title="匹配特定字符"></a>匹配特定字符</h4><p>可以使用<code>[]</code>对特定的一组字符进行匹配，例如使用’REGEXP [123] TON’，将会匹配1或2或3 TON</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[123] TON&#39;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[123] TON&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>所以，[] 像是另一种OR语句，。事实上，正则表达式[123] Ton为[1|2|3] Ton的缩写，也可以使用后者。但是，需要用[]来定义OR语句查找什么。</p><p>若不使用[]则会导致查找出错，例如使用 <code>1|2|3 TON</code> ，MySQL会假定你的意思是’1’或’2’或’3 ton’。</p><blockquote><p>在前面加上^可以取反，例如[ ^123]可以匹配除了123以外的任何东西</p></blockquote><h4 id="匹配范围"><a href="#匹配范围" class="headerlink" title="匹配范围"></a>匹配范围</h4><p>[0123456789]可以用来匹配数字0-9，但是若字符较多会比较麻烦，因此可以使用[0-9]来匹配0-9</p><p>范围不限于完整的集合，[1-3]和[6-9]也是合法的范围。此外，范围不一定只是数值的，[a-z]匹配任意字母字符。</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[0-5] TON&#39; ORDER BY prod_name;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[0-5] TON&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">.5</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> ton anvil  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a>匹配特殊字符</h4><p>正则表达式中包含了特殊字符，例如：. [] | - 等特殊字符，那么若想查询此类特殊字符，应该怎么办？</p><p>答案是可以使用<code>\\</code>作为前导，\- 表示查找 -， \. 表示查找 .</p><p>使用语句：<code>SELECT vend_name FROM vendors WHERE vend_name REGEXP &#39;\\.&#39; ORDER BY vend_name;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_name <span class="keyword">FROM</span> vendors <span class="keyword">WHERE</span> vend_name REGEXP <span class="string">&#x27;\\.&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> vend_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> Furball Inc. <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>除此之外，\也可以用来引用元字符，例如：<br>| 元字符 | 说明  |<br>| —– | ——– |<br>| \\f | 换页     |<br>| \\n | 换行     |<br>| \\r | 回车     |<br>| \\t | 制表     |<br>| \\v | 纵向制表 |</p><blockquote><p>为了匹配反斜杠本身，需要使用 <code>\\\</code> 进行匹配。</p></blockquote><blockquote><p><strong>\或\\?</strong> 多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。但MySQL要求两个反斜杠（MySQL自己解释一个，正则表达式库解释另一个）。</p></blockquote><h4 id="匹配字符类"><a href="#匹配字符类" class="headerlink" title="匹配字符类"></a>匹配字符类</h4><p>为了更方便地找出经常使用的数字，字母或者数字字母字符等，可以适用预定的字符集。称为字符类(character class)</p><p>字符类如下表所示：</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>任意字母和数字（同[a-zA-Z0-9]）</td></tr><tr><td>[:alpha:]</td><td>任意字符（同[a-zA-Z]）</td></tr><tr><td>[:blank:]</td><td>空格和制表（同[\t]）</td></tr><tr><td>[:cntrl:]</td><td>ASCII控制字符（ASCII 0到31和127）</td></tr><tr><td>[:digit:]</td><td>任意数字（同[0-9]）</td></tr><tr><td>[:graph:]</td><td>与[:print:]相同，但不包括空格</td></tr><tr><td>[:lower:]</td><td>任意小写字母（同[a-z]）</td></tr><tr><td>[:print:]</td><td>任意可打印字符</td></tr><tr><td>[:punct:]</td><td>既不在[:alnum:]又不在[:cntrl:]中的任意字符</td></tr><tr><td>[:space:]</td><td>包括空格在内的任意空白字符（同[\f\n\r\t\v]）</td></tr><tr><td>[:upper:]</td><td>任意大写字母（同[A-Z]）</td></tr><tr><td>[:xdigit:]</td><td>任意十六进制数字（同[a-fA-F0-9]）</td></tr></tbody></table><h4 id="匹配多个实例"><a href="#匹配多个实例" class="headerlink" title="匹配多个实例"></a>匹配多个实例</h4><p>可以使用重复元字符进行多个匹配，例如找出所有的数而不管一共有多少位，或者想查询一个单词但是满足单词后可能接上了尾缀s。</p><p>重复元字符如下表：</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0个或多个匹配</td></tr><tr><td>+</td><td>1个或多个匹配（等于{1,}）</td></tr><tr><td>?</td><td>0个或1个匹配（等于{0,1}）</td></tr><tr><td>{n}</td><td>指定数目的匹配</td></tr><tr><td>{n,}</td><td>不少于指定数目的匹配</td></tr><tr><td>{n,m}</td><td>匹配数目的范围（m不超过255）</td></tr></tbody></table><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;\\([0-9] sticks?\\)&#39;;</code></p><p>此语句中：\\() 匹配了括号，sticks? 匹配 stick或者sticks，?表示前一个字符出现1次或者0次。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;\\([0-9] sticks?\\)&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[[:digit:]]&#123;4&#125;&#39; ORDER BY prod_name;</code></p><p>此语句中：，[:digit:]匹配任意数字，因而它为数字的一个集合。{4}确切地要求它前面的字符（任意数字）出现4次，所以[[:digit:]]{4}匹配连在一起的任意4位数字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[[:digit:]]&#123;4&#125;&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JetPack <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><p>目前为止的所有例子都是为了匹配一个串中任意位置的文本，为了匹配特定位置的文本，需要使用定位符。</p><p>定位符如下所示：</p><table><thead><tr><th>元 字 符</th><th>说 明</th></tr></thead><tbody><tr><td>^</td><td>文本的开始</td></tr><tr><td>$</td><td>文本的结尾</td></tr><tr><td>[[:&lt;:]]</td><td>词的开始</td></tr><tr><td>[[:&gt;:]]</td><td>词的结尾</td></tr></tbody></table><p>若想搜索一个以数或者小数点开头的所有产品，应该怎么使用？如果简单的搜索[0-9\\.]肯定不行，因为他会在文本内任意匹配而不是在开头匹配。</p><p>使用语句：<code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;^[0-9\\.]&#39; ORDER BY prod_name;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;^[0-9\\.]&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> prod_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">.5</span> ton anvil <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> ton anvil  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>^的双重用途</strong> ^有两种用法。在集合中（用[和]定义），用它来否定该集合，否则，用来指串的开始处。</p></blockquote><blockquote><p><strong>使REGEXP起类似LIKE的作用</strong> LIKE和REGEXP的不同在于，LIKE匹配整个串而REGEXP匹配子串。利用定位符，通过用^开始每个表达式，用$结束每个表达式，可以使REGEXP的作用与LIKE一样。</p></blockquote><blockquote><p>简单的正则表达式测试 可以在不使用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查总是返回0（没有匹配）或1（匹配）。可以用带文字串的REGEXP来测试表达式，并试验它们。相应的语法如下：</p><p>SELECT ‘hello’ REGEXP ‘[0-9]’;</p><p>这个例子显然将返回0（因为文本hello中没有数字）。</p></blockquote><h3 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h3><p>存储在表中的数据不都是应用程序所需要的。我们需要直接从数据库中检索出转换、计算或格式化过的数据；而不是检索出数据，然后再在客户机应用程序或报告程序中重新格式化。</p><blockquote><p><strong>字段</strong> 基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而术语字段通常用在计算字段的连接上。</p></blockquote><blockquote><p><strong>客户机与服务器的格式</strong> 可在SQL语句内完成的许多转换和格式化工作都可以直接在客户机应用程序内完成。但一般来说，在数据库服务器上完成这些操作比在客户机中完成要快得多，因为DBMS是设计来快速有效地完成这种处理的。</p></blockquote><h4 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h4><p>vendors表包含供应商名和位置信息。假如要生成一个供应商报表，需要在供应商的名字中按照name(location)这样的格式列出供应商的位置。</p><blockquote><p><strong>拼接（concatenate）</strong> 将值联结到一起构成单个值。</p></blockquote><p>解决方案是把两个列直接拼接起来，在MySQL的SELECT语句中，可以使用<code>Concat()</code>函数来拼接两个列。</p><p>使用语句：<code>SELECT Concat(vend_name, &#39;(&#39;, vend_country, &#39;)&#39;) FROM vendors ORDER BY vend_name;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Concat(vend_name, <span class="string">&#x27;(&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>) <span class="keyword">FROM</span> vendors <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Concat(vend_name, <span class="string">&#x27;(&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ACME(USA)                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us(USA)                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Furball Inc.(USA)                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>(England)                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jouets Et Ours(France)                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies(USA)                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>Concat()需要一个或多个指定的串，各个串之间用逗号分隔。上面的SELECT语句连接以下4个元素：</p><ul><li>存储在vend_name列中的名字；</li><li>包含一个空格和一个左圆括号的串；</li><li>存储在vend_country列中的国家；</li><li>包含一个右圆括号的串。</li></ul><h5 id="Trim函数"><a href="#Trim函数" class="headerlink" title="Trim函数"></a>Trim函数</h5><blockquote><p><strong>Trim函数</strong> 该函数可以将值的左右两侧空格全部去掉，使用RTrim可以去掉右侧的空格，使用LTrim可以去掉左侧的空格</p></blockquote><p>例如使用语句：<code>SELECT Concat(Trim(vend_name), &#39;(&#39;, Trim(vend_country), &#39;)&#39;) FROM vendors ORDER BY vend_name;</code></p><h5 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h5><p>SELECT语句拼接地址字段工作得很好，但是新计算列的名字实际上没有，只是一个值，而一个未知的值不能用在客户机应用中，因为其没有办法被引用，因此我们使用AS语句，为其赋予一个替换名(别名：alias)。</p><p>使用语句：<code>SELECT Concat(Trim(vend_name), &#39;(&#39;, Trim(vend_country), &#39;)&#39;) AS vend_title FROM vendors ORDER BY vend_name;</code></p><p>此语句中：可以看到返回的列名为vend_title，所有的客户机都可以直接使用，就像一个实际的列表一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Concat(<span class="built_in">Trim</span>(vend_name), <span class="string">&#x27;(&#x27;</span>, <span class="built_in">Trim</span>(vend_country), <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title <span class="keyword">FROM</span> vendors <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> vend_title             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> ACME(USA)              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us(USA)       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Furball Inc.(USA)      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>(England)       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jouets Et Ours(France) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies(USA)       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>导出列</strong> 别名有时也称为导出列（derived column），不管称为什么，它们所代表的都是相同的东西。</p></blockquote><blockquote><p><strong>别名的其他用途</strong> 别名还有其他用途。常见的用途包括在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它，等等。</p></blockquote><h4 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h4><p>在使用SELECT语句中，可能会出现需要进行算数运算的情况，例如，知道物品单价和物品数量，想知道总价格，应该将单价与数量相乘。显然在知道了单价和数量后，没有必要将总价格进行储存，这将占很大的空间。</p><p>所以我们可以使用算数运算，进行统计。</p><p>使用语句：<code>SELECT prod_id, quantity, item_price, quantity * item_price AS total_price FROM orderitems WHERE order_num = 20005;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> prod_id, quantity, item_price, quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> total_price <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> quantity <span class="operator">|</span> item_price <span class="operator">|</span> total_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span>       <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span>       <span class="number">29.97</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>       <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>       <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+------------+-------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>除此之外，还允许使用+，-，*，/操作符。</strong></p><h3 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h3><p>大多数SQL支持以下类型的函数：</p><ul><li>用于处理文本串（如删除或填充值，转换值为大写或小写）的文本函数。</li><li>用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数。</li><li>用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期之差，检查日期有效性等）的日期和时间函数。</li><li>返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li></ul><h4 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Left()</td><td>返回串左边的字符</td></tr><tr><td>Right()</td><td>返回串右边的字符</td></tr><tr><td>LTrim()</td><td>去掉串左边的空格</td></tr><tr><td>RTrim()</td><td>去掉串右边的空格</td></tr><tr><td>Locate()</td><td>找出串的一个子串</td></tr><tr><td>Length()</td><td>返回串的长度</td></tr><tr><td>Lower()</td><td>将串转换为小写</td></tr><tr><td>Soundex()</td><td>返回串的SOUNDEX值</td></tr><tr><td>SubString()</td><td>返回子串的字符</td></tr><tr><td>Upper()</td><td>将串转换为大写</td></tr></tbody></table><p>其中，Soundex()函数可以匹配读音相同的串，例如Soundex(‘Y.Lie’) = Soundex(‘Y LEE’)的返回值为TRUE；</p><p>使用语句：<code>mysql&gt; SELECT Upper(Trim(SubString(prod_desc, Length(prod_desc) - 4, 5))) AS temp FROM products;</code></p><p>此语句中：使用了Substring函数，用法为：SubString(buffer, offset, len);注意此处的offset从1开始到Length(buffer)结束。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">Upper</span>(<span class="built_in">Trim</span>(<span class="built_in">SubString</span>(prod_desc, Length(prod_desc) <span class="operator">-</span> <span class="number">4</span>, <span class="number">5</span>))) <span class="keyword">AS</span> temp <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> temp  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> HOOK  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">CASE</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">CASE</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LUDED <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NERS) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">ONLY</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LONG  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> E USE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> I<span class="operator">-</span>USE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> , RED <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LOCK  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> S <span class="keyword">ALL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> STICK <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TICKS <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AddDate()</td><td>增加一个日期（天、周等）</td></tr><tr><td>AddTime()</td><td>增加一个时间（时、分等）</td></tr><tr><td>CurDate()</td><td>返回当前date</td></tr><tr><td>CurTime()</td><td>返回当前time</td></tr><tr><td>Date()</td><td>返回date time的date部分</td></tr><tr><td>DateDiff()</td><td>计算两个date之差</td></tr><tr><td>Date_Add()</td><td>高度灵活的日期运算函数</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>Day()</td><td>返回一个日期的天数部分</td></tr><tr><td>DayOfWeek()</td><td>对于一个date，返回对应的星期几</td></tr><tr><td>Hour()</td><td>返回一个时间的小时部分</td></tr><tr><td>Minute()</td><td>返回一个时间的分钟部分</td></tr><tr><td>Month()</td><td>返回一个日期的月份部分</td></tr><tr><td>Now()</td><td>返回当前date和time</td></tr><tr><td>Second()</td><td>返回一个时间的秒部分</td></tr><tr><td>Time()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>Year()</td><td>返回一个日期的年份部分</td></tr></tbody></table><p>MySQL使用的日期格式无论什么时候都要使用yyyy-mm-dd。因此2021年5月1日，为2021-05-01。其他的方法也许也可以，但是这样可以排除多义性。</p><blockquote><p><strong>应该总是使用4位数字的年份</strong> 支持2位数字的年份，MySQL处理00-69为2000-2069，处理70-99为1970-1999。虽然它们可能是打算要的年份，但使用完整的4位数字年份更可靠，因为MySQL不必做出任何假定。</p></blockquote><p>使用语句：<code>SELECT cust_id, order_num, order_date, DateDiff(CurDate(), Date(order_date)) AS diff FROM orders WHERE Month(order_date) = &#39;10&#39;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_id, order_num, order_date, DateDiff(CurDate(), <span class="type">Date</span>(order_date)) <span class="keyword">AS</span> diff <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="keyword">Month</span>(order_date) <span class="operator">=</span> <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+---------------------+------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> order_num <span class="operator">|</span> order_date          <span class="operator">|</span> diff <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+---------------------+------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-10</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">5822</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20009</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-10</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">5817</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+---------------------+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>注意，sql中，星期天是1，星期一是2，……星期六是7</strong></p><p>若需要检测一个范围，则可以使用BETWEEN操作符。</p><p>使用语句：<code>SELECT cust_id, order_num FROM orders WHERE Date(order_date) BETWEEN &#39;2005-09-01&#39; AND &#39;2005-09-30&#39;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_id, order_num <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="type">Date</span>(order_date) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2005-09-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2005-09-30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> order_num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Abs()</td><td>返回一个数的绝对值</td></tr><tr><td>Cos()</td><td>返回一个角度的余弦</td></tr><tr><td>Exp()</td><td>返回一个数的指数值</td></tr><tr><td>Mod()</td><td>返回除操作的余数</td></tr><tr><td>Pi()</td><td>返回圆周率</td></tr><tr><td>Rand()</td><td>返回一个随机数</td></tr><tr><td>Sin()</td><td>返回一个角度的正弦</td></tr><tr><td>Sqrt()</td><td>返回一个数的平方根</td></tr><tr><td>Tan()</td><td>返回一个角度的正切</td></tr></tbody></table><h3 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h3><p>我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。使用这些函数，MySQL查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有以下几种。</p><ul><li>确定表中行数（或者满足某个条件或包含某个特定值的行数）。</li><li>获得表中行组的和。</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。</li></ul><h4 id="汇总函数的使用"><a href="#汇总函数的使用" class="headerlink" title="汇总函数的使用"></a>汇总函数的使用</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><h5 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h5><p>AVG()通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p><p>使用语句：<code>SELECT AVG(prod_price) AS avg_price FROM products;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> avg_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">16.133571</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>只用于单个列</strong> AVG()只能用来确定特定数值列的平均值，而<br>且列名必须作为函数参数给出。为了获得多个列的平均值，<br>必须使用多个AVG()函数。</p></blockquote><blockquote><p><strong>NULL值</strong> AVG()函数忽略列值为NULL的行。</p></blockquote><h5 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h5><p>该COUNT()函数共有两种使用方式：</p><ul><li>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li><li>使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。</li></ul><p>使用语句：<code>SELECT COUNT(*) AS num_cust FROM customers;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust <span class="keyword">FROM</span> customers;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> num_cust <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT COUNT(cust_email) AS num_cust FROM customers;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust <span class="keyword">FROM</span> customers;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> num_cust <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>NULL值</strong> 如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号（*），则不忽略。</p></blockquote><h5 id="MAX-MIN"><a href="#MAX-MIN" class="headerlink" title="MAX(), MIN()"></a>MAX(), MIN()</h5><p>使用MAX()函数需要指定列名。</p><p>使用语句：<code>SELECT MAX(prod_price) AS max_price, MIN(prod_price) AS min_price FROM products;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price, <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> min_price <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> max_price <span class="operator">|</span> min_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">55.00</span> <span class="operator">|</span>      <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>对非数值数据使用MAX()</strong> 虽然MAX()一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。</p></blockquote><h5 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h5><p>使用语句<code>SELECT SUM(quantity) AS items_ordered FROM orderitems WHERE order_num = 20005;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_ordered <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> items_ordered <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>SUM()也可以用来计算合计值。例如算总金额</p><p>使用语句<code>SELECT SUM(quantity * item_price) AS total_price FROM orderitems WHERE order_num = 20005;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity <span class="operator">*</span> item_price) <span class="keyword">AS</span> total_price <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> total_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">149.87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h4><p>使用聚集函数的DISTINCT参数。对于上述的五个聚集函数(SUM, COUNT, MAX, MIN, AVG)，都可以使用DISTINCT参数。</p><p>例如在使用AVG()函数返回特定供应商提供的产品的平均价格。如果不使用DISTINCT参数，平均值将考虑所有的价格，也就是所有相同的值都会被计算一遍，若想要进行多个相同值的值只被计算一次，则需要加入DISTINCT参数。</p><p>使用语句：<code>SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id = 1003;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> prod_price) <span class="keyword">AS</span> avg_price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> avg_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15.998000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到，在使用了DISTINCT后，此例子中的avg_price比较高，因为有多个物品具有相同的较低价格。排除它们提升了平均价格。</p><blockquote><p><strong>注意</strong>  如果指定列名，则DISTINCT只能用于COUNT()。DISTINCT不能用于COUNT(*)，因此不允许使用COUNT（DISTINCT），否则会产生错误。类似地，DISTINCT必须使用列名，不能用于计算或表达式。</p></blockquote><blockquote><p><strong>将DISTINCT用于MIN()和MAX()</strong> 虽然DISTINCT从技术上可<br>用于MIN()和MAX()，但这样做实际上没有价值。一个列中的<br>最小值和最大值不管是否包含不同值都是相同的。</p></blockquote><h4 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h4><p>目前的所有聚集函数都只涉及了单个的函数，但是实际上SELECT语句可能包括了多个聚集函数。</p><p>使用语句：<code>SELECT COUNT(*) AS num_items, MIN(prod_price) AS price_min, MAX(prod_price) AS price_max, AVG(prod_price) AS price_avg FROM products;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items, <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min, <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max, <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> num_items <span class="operator">|</span> price_min <span class="operator">|</span> price_max <span class="operator">|</span> price_avg <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">14</span> <span class="operator">|</span>      <span class="number">2.50</span> <span class="operator">|</span>     <span class="number">55.00</span> <span class="operator">|</span> <span class="number">16.133571</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+-----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h3><h4 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h4><p>SQL聚集函数可以用来汇总数据，这使得我们能够对数据进行计数，计算和平均数，获得最大值，最小值。</p><p>目前为止的所有计算都是在表的所有数据或匹配特定的WHERE子句的数据上进行的。但如果要返回每个供应商提供的产品数目怎么办？或者返回只提供单项产品的供应商所提供的产品，或返回提供10个以上产品的供应商怎么办？</p><p>这就需要分组来方便聚集计算，分组允许把数据分为多个逻辑组，对每个组进行聚集计算。</p><h4 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h4><p>使用语句：<code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id;</code></p><p>此语句中：使用了SELECT语句指定了两个列，vend_id包含产品供应商的ID，num_prods为计算字段（用COUNT(*)函数建立）。GROUP BY子句指示MySQL按vend_id排序并分组数据。这导致对每个vend_id而不是整个表计算num_prods一次。从输出中可以看到，供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> products <span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> num_prods <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>         <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在具体使用GROUP BY子句前，需要知道一些重要的规定。</p><ul><li>GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li><li>如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li><li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。</li><li>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。</li><li>如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。</li><li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</li></ul><blockquote><p><strong>使用ROLLUP</strong> 使用WITH ROLLUP关键字，可以得到每个分组以及每个分组汇总级别（针对每个分组）的值</p></blockquote><h4 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h4><p>除了能够使用GROUP BY分组之外，还允许过滤分组，允许过滤那些分组或者排除那些分组。例如，需要列出两个订单的所有顾客。为了得出需要的数据，必须基于完整的分组而不是个别的行进行过滤。</p><p>MYSQL为此目的提供了另外的子句，就是HAVING子句。该子非常类似于WHERE，事实上所有的类型的WHERE子句都可以使用HAVING来进行替代。唯一的区别是，WHERE过滤行HAVING过滤分组。</p><p>使用语句：<code>SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) &gt;= 2;</code></p><p>此语句中：最后一行增加了HAVING子句，它过滤COUNT(*) &gt;=2（两个以上的订单）的那些分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders <span class="keyword">FROM</span> orders <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> orders <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>假如想进一步过滤上面的语句，使它返回过去12个月内具有两个以上订单的顾客。为达到这一点，可增加一条WHERE子句，过滤出过去12个月内下过的订单。然后再增加HAVING子句过滤出具有两个以上订单的分组。</p><p>使用语句：<code>SELECT cust_id, COUNT(*) AS total_count FROM orders WHERE DATE(order_date) BETWEEN &#39;2005-09-01&#39; AND &#39;2005-12-31&#39; GROUP BY cust_id HAVING COUNT(*) &gt;= 2;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_count <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> <span class="type">DATE</span>(order_date) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2005-09-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2005-12-31&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> total_count <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>注意，需要先使用WHERE再使用GROUP BY子句。</p><p>使用语句：<code>SELECT vend_id, COUNT(*) AS num_prods FROM products WHERE prod_price &gt;= 10 GROUP BY vend_id HAVING COUNT(*) &gt;= 2;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> num_prods <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1005</span> <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h4><p>GROUP BY和 ORDER BY存在一些区别，也能完成某些相同的工作。</p><p>区别有：</p><table><thead><tr><th>ORDER BY</th><th>GROUP BY</th></tr></thead><tbody><tr><td>排序产生的输出</td><td>分组行。但输出可能不是分组的顺序</td></tr><tr><td>任意列都可以使用（甚至非选择的列也可以使用）</td><td>只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td></tr><tr><td>不一定需要</td><td>如果与聚集函数一起使用列（或表达式），则必须使用</td></tr></tbody></table><blockquote><p><strong>注意！</strong> 千万不要忘记再使用GROUP BY子句时，也应该给出ORDER BY子句，这是保证排序的唯一可行方法。不能依赖GROUP BY所提供的排序顺序。</p></blockquote><p>使用语句：<code>SELECT order_num, SUM(quantity*item_price) AS noOrderTotal FROM orderitems GROUP BY order_num HAVING SUM(quantity*item_price) &gt;= 50;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> order_num, <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="keyword">AS</span> noOrderTotal <span class="keyword">FROM</span> orderitems <span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num <span class="keyword">HAVING</span> <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="operator">&gt;=</span> <span class="number">50</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> order_num <span class="operator">|</span> noOrderTotal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span>       <span class="number">149.87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span>        <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span>      <span class="number">1000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span>       <span class="number">125.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="comment">-- 可以看到未进行排序</span></span><br></pre></td></tr></table></figure><p>使用语句：<code>SELECT order_num, SUM(quantity*item_price) AS orderTotal FROM orderitems GROUP BY order_num HAVING SUM(quantity*item_price) &gt;= 50 ORDER BY orderTotal;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> order_num, <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="keyword">AS</span> orderTotal <span class="keyword">FROM</span> orderitems <span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num <span class="keyword">HAVING</span> <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="operator">&gt;=</span> <span class="number">50</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> orderTotal;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> order_num <span class="operator">|</span> orderTotal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span>     <span class="number">125.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span>     <span class="number">149.87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span>    <span class="number">1000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="SELECT子句的顺序"><a href="#SELECT子句的顺序" class="headerlink" title="SELECT子句的顺序"></a>SELECT子句的顺序</h4><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>要返回的列或者表达式</td><td>是</td></tr><tr><td>FROM</td><td>从什么表中检索数据</td><td>仅在从表选BY择数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组说明</td><td>仅在按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>输出排序的顺序</td><td>否</td></tr><tr><td>LIMIT</td><td>要检索的行数</td><td>否</td></tr></tbody></table><h3 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><blockquote><p>MySQL 4.1引入了对子查询的支持，所以要想使用这些SQL，必须使用MySQL4.1或更高级的版本。</p></blockquote><p>SQL还允许创建子查询（subquery），即嵌套在其他查询中的查询。</p><h4 id="利用子查询进行过滤"><a href="#利用子查询进行过滤" class="headerlink" title="利用子查询进行过滤"></a>利用子查询进行过滤</h4><p>提供的样例数据库中，订单存储在两个表中。orders表存储包含订单号、客户ID、订单日期的订单作为一行。各订单的物品存储在相关的orderitems表中。orders表不存储客户信息，它只存储客户的ID。实际的客户信息存储在customers表中。</p><p>现在，假设需要列出订购物品TNT2的所有客户，应该如何检索？</p><p>步骤：<br>(1) 检索包含物品TNT2的所有订单的编号。<br>(2) 检索具有前一步骤列出的订单编号的所有客户的ID。<br>(3) 检索前一步骤返回的所有客户ID的客户信息。</p><p>上述的所有步骤都可以作为一个单独的查询来执行，因此，可以把一条SELECT的查询返回值作为下一条SELECT语句的WHERE子句。</p><p>第一步：<code>SELECT order_num FROM orderitems WHERE prod_id = &#39;TNT2&#39;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> order_num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>将上一个查询得到的order_num，20005，20007作为下面的入参进行查询</p><p>第二步：<code>SELECT cust_id FROM orders WHERE order_num IN (20005, 20007);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_id <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="number">20005</span>, <span class="number">20007</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>若使用子查询，则为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num </span><br><span class="line">                    <span class="keyword">FROM</span> orderitems </span><br><span class="line">                    <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>);         </span><br><span class="line"><span class="comment">-- 结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>第三步：<code>SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (10001, 10004);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_name, cust_contact <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="number">10001</span>, <span class="number">10004</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_contact <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> Y Lee        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> Y Sam        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>若联合上述所有查询作为子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id </span><br><span class="line">  <span class="keyword">FROM</span> orders </span><br><span class="line">  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num </span><br><span class="line">                      <span class="keyword">FROM</span> orderitems </span><br><span class="line">                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>));</span><br><span class="line"><span class="comment">-- 结果             </span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_contact <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> Y Lee        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> Y Sam        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)                      </span><br></pre></td></tr></table></figure><blockquote><p><strong>列必须匹配</strong> 在WHERE子句中使用子查询（如这里所示），应该保证SELECT语句具有与WHERE子句中相同数目的列。通常，子查询将返回单个列并且与单个列匹配，但如果需要也可以使用多个列。</p></blockquote><h4 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h4><p>使用子查询的另一方法是创建计算字段。假如需要显示customers表中每个客户的订单总数。订单与相应的客户ID存储在orders表中。</p><p>步骤如下：<br>(1) 从customers表中检索客户列表。<br>(2) 对于检索出的每个客户，统计其在orders表中的订单数目。</p><p>步骤一：<code>SELECT COUNT(*) AS orders FROM orders WHERE cust_id = 10001;</code></p><p>索引cust_id = 10001的用户的订单次数</p><p>步骤二：将10001替换成顾客表的数据，将两个表联系起来；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_state, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) </span><br><span class="line">                               <span class="keyword">FROM</span> orders </span><br><span class="line">                               <span class="keyword">WHERE</span> orders.cust_id <span class="operator">=</span> customers.cust_id) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> orders <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+--------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_state <span class="operator">|</span> orders <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> MI         <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Wascals        <span class="operator">|</span> <span class="keyword">IN</span>         <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> AZ         <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> E Fudd         <span class="operator">|</span> IL         <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Mouse House    <span class="operator">|</span> OH         <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h3><h4 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h4><p>SQL最强大的功能之一就是能在数据检索查询的执行中联结（join）表。联结是利用SQL的SELECT能执行的最重要的操作，很好地理解联结及其语法是学习SQL的一个极为重要的组成部分。</p><h5 id="关系表"><a href="#关系表" class="headerlink" title="关系表"></a>关系表</h5><p>什么是关系表？</p><p>假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。</p><p>现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢？<code>将这些数据与产品信息分开存储</code>的理由如下。</p><ul><li>因为同一供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费存储空间。</li><li>如果供应商信息改变（例如，供应商搬家或电话号码变动），只需改动一次即可。</li><li>如果有重复数据（即每种产品都存储供应商信息），很难保证每次输入该数据的方式都相同。不一致的数据在报表中很难利用。</li></ul><p>各表通过某些常用的值（即关系设计中的关系（relational））互相关联。</p><p>在这个例子中，可建立两个表，一个存储供应商信息，另一个存储产品信息。vendors表包含所有供应商信息，每个供应商占一行，每个供应商具有唯一的标识。此标识称为主键（primary key），可以是供应商ID或任何其他唯一值。</p><p><strong>products表只存储产品信息，它除了存储供应商ID（vendors表的主键）外不存储其他供应商信息。vendors表的主键又叫作products的外键，它将vendors表与products表关联，利用供应商ID能从vendors表中找出相应供应商的详细信息。</strong></p><blockquote><p><strong>外键（foreign key）</strong> 外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p><p>这样做的好处如下：</p><ul><li>供应商信息不重复，从而不浪费时间和空间；</li><li>如果供应商信息变动，可以只更新vendors表中的单个记录，相关表中的数据不用改动；</li><li>由于数据无重复，显然数据是一致的，这使得处理数据更简单。</li></ul></blockquote><h5 id="为什么要使用联结"><a href="#为什么要使用联结" class="headerlink" title="为什么要使用联结"></a>为什么要使用联结</h5><p>正如所述，分解数据为多个表能更有效地存储，更方便地处理，并且具有更大的可伸缩性。但这些好处是有代价的。</p><p>如果数据存储在多个表中，怎样用单条SELECT语句检索出数据？</p><p>答案是使用联结。简单地说，联结是一种机制，用来在一条SELECT语句中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p><blockquote><p><strong>维护引用完整性</strong> 重要的是，要理解联结不是物理实体。换句话说，它在实际的数据库表中不存在。联结由MySQL根据需<br>要建立，它存在于查询的执行当中。</p><p>在使用关系表时，仅在关系列中插入合法的数据非常重要。回到这里的例子，如果在products表中插入拥有非法供应商ID（即没有在vendors表中出现）的供应商生产的产品，则这些<br>产品是不可访问的，因为它们没有关联到某个供应商。</p><p>为防止这种情况发生，可指示MySQL只允许在products表的供应商ID列中出现合法值（即出现在vendors表中的供应商）。这就是维护引用完整性，它是通过在表的定义中指定主键和外键来实现的。</p></blockquote><h4 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h4><p>很容易创建联结，只需要规定所有的表如何关联即可。</p><p>使用语句：<code>SELECT vend_name, prod_name, prod_price FROM vendors, products WHERE vendors.vend_id = products.vend_id ORDER BY vend_name, prod_name;</code></p><p>此语句中：最大的差别是所指定的两个列（prod_name和prod_price）在一个表中，而另一个列（vend_name）在另一个表中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_name, prod_name, prod_price <span class="keyword">FROM</span> vendors, products <span class="keyword">WHERE</span> vendors.vend_id <span class="operator">=</span> products.vend_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> vend_name   <span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us <span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>     <span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>     <span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies <span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies <span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>完全限定列名</strong> 在引用的列可能出现二义性时，必须使用完全限定列名（用一个点分隔的表名和列名）。如果引用一个没有用表名限制的具有二义性的列名，MySQL将返回错误。</p></blockquote><h5 id="WHERE子句的重要性"><a href="#WHERE子句的重要性" class="headerlink" title="WHERE子句的重要性"></a>WHERE子句的重要性</h5><p>在一条SELECT语句中联结几个表时，相应的关系是在运行中构造的。在数据库表的定义中不存在能指示MySQL如何对表进行联结的东西。你必须自己做这件事情。在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。WHERE子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。没有WHERE子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。</p><blockquote><p><strong>笛卡儿积（cartesian product）</strong> 由<strong>没有联结条件</strong>的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p></blockquote><h5 id="内部联结"><a href="#内部联结" class="headerlink" title="内部联结"></a>内部联结</h5><p>目前为止所用的联结称为等值联结（equijoin），它基于两个表之间的相等测试。这种联结也称为内部联结。其实，对于这种联结可以使用稍微不同的语法来明确指定联结的类型。</p><p>使用语句：<code>SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;</code></p><p>此语句中：SELECT与前面的SELECT语句相同，但FROM子句不同。这里，两个表之间的关系是FROM子句的组成部分，以INNER JOIN指定。在使用这种语法时，联结条件用特定的ON子句而不是WHERE子句给出。传递给ON的实际条件与传递给WHERE的相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> vend_name, prod_name, prod_price <span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products <span class="keyword">ON</span> vendors.vend_id <span class="operator">=</span> products.vend_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> vend_name   <span class="operator">|</span> prod_name      <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us <span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us <span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us <span class="operator">|</span> <span class="number">2</span> ton anvil    <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies <span class="operator">|</span> Fuses          <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies <span class="operator">|</span> Oil can        <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Detonator      <span class="operator">|</span>      <span class="number">13.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Bird seed      <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Carrots        <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Safe           <span class="operator">|</span>      <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> Sling          <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACME        <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>     <span class="operator">|</span> JetPack <span class="number">1000</span>   <span class="operator">|</span>      <span class="number">35.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>     <span class="operator">|</span> JetPack <span class="number">2000</span>   <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>将返回相同的结果。</p><blockquote><p><strong>使用哪种语法?</strong> ANSI SQL规范首选INNER JOIN语法。此外，尽管使用WHERE子句定义联结的确比较简单，但是使用明确的联结语法能够确保不会忘记联结条件，有时候这样做也能影响性能。</p></blockquote><h5 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a>联结多个表</h5><p>SQL对一条SELECT语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。首先列出所有表，然后定义表之间的关系。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, vend_name, prod_price, quantity </span><br><span class="line"><span class="keyword">FROM</span> orderitems, products, vendors </span><br><span class="line"><span class="keyword">WHERE</span> products.vend_id <span class="operator">=</span> vendors.vend_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.prod_id <span class="operator">=</span> products.prod_id </span><br><span class="line">  <span class="keyword">AND</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> prod_name      <span class="operator">|</span> vend_name   <span class="operator">|</span> prod_price <span class="operator">|</span> quantity <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">.5</span> ton anvil   <span class="operator">|</span> Anvils R Us <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> ton anvil    <span class="operator">|</span> Anvils R Us <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span> ACME        <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bird seed      <span class="operator">|</span> ACME        <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------------+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>因此，有时候使用子查询并不一定是最优解，例如3.11中的子查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id </span><br><span class="line">  <span class="keyword">FROM</span> orders </span><br><span class="line">  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num </span><br><span class="line">                      <span class="keyword">FROM</span> orderitems </span><br><span class="line">                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>));</span><br><span class="line"><span class="comment">-- 结果             </span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_contact <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> Y Lee        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> Y Sam        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以替换成</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_contact <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> Y Lee        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> Y Sam        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h3><h4 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h4><p>别名除了用于列名和计算字段外，SQL还允许给表名起别名。这样做有两个主要理由：</p><ul><li><p>缩短SQL语句；</p></li><li><p>允许在单条SELECT语句中多次使用相同的表。</p></li></ul><p>例如3.12.2.3中的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 可以对表名取别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c, orders <span class="keyword">AS</span> o, orderitems <span class="keyword">AS</span> oi</span><br><span class="line"><span class="keyword">WHERE</span> c.cust_id <span class="operator">=</span> o.cust_id</span><br><span class="line">  <span class="keyword">AND</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- SQL语句显著缩短</span></span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_contact <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> Y Lee        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> Y Sam        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>应该注意，表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。</strong></p><h4 id="使用不同类型的联结"><a href="#使用不同类型的联结" class="headerlink" title="使用不同类型的联结"></a>使用不同类型的联结</h4><p>迄今为止，我们使用的只是称为内部联结或等值联结（equijoin）的简单联结。还存在其他三种联结，即自联结，自然联结和外部联结。</p><h5 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h5><p>如前所述，使用表别名的主要原因之一是能在单条SELECT语句中不止一次引用相同的表。</p><p>假如你发现某物品（其ID为DTNTR）存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题。此查询要求首先找到生产ID为DTNTR的物品的供应商，然后找出这个供应商生产的所有物品。</p><p>可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> (<span class="keyword">SELECT</span> vend_id </span><br><span class="line">                 <span class="keyword">FROM</span> products</span><br><span class="line">                 <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;DTNTR&#x27;</span>);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> prod_name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> DTNTR   <span class="operator">|</span> Detonator      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span> Bird seed      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span> Carrots        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAFE    <span class="operator">|</span> Safe           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span> Sling          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT1    <span class="operator">|</span> TNT (<span class="number">1</span> stick)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span> TNT (<span class="number">5</span> sticks) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+</span></span><br></pre></td></tr></table></figure><p>若使用联结进行查询，可以使用如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.prod_id, p1.prod_name </span><br><span class="line"><span class="keyword">FROM</span> products <span class="keyword">AS</span> p1, products <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">WHERE</span> p1.vend_id  <span class="operator">=</span> p2.vend_id</span><br><span class="line">  <span class="keyword">AND</span> p2.prod_id <span class="operator">=</span> <span class="string">&#x27;DTNTR&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>用自联结而不用子查询</strong> 自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该试一下两种方法，以确定哪一种的性能更好。</p></blockquote><h5 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h5><p>无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。标准的联结（前一章中介绍的内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</p><p>一般是通过对表使用通配符（SELECT *），对所有其他表的列使用明确的子集来完成</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.<span class="operator">*</span>, o.order_num, o.order_date, oi.prod_id, oi.quantity,        oi.item_price</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c, orders <span class="keyword">AS</span> o, orderitems <span class="keyword">AS</span> oi</span><br><span class="line"><span class="keyword">WHERE</span> c.cust_id <span class="operator">=</span> o.cust_id</span><br><span class="line">  <span class="keyword">AND</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;FB&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此语句中：通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。</p><h5 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h5><p>许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。例如，可能需要使用联结来完成以下工作：</p><ul><li><p>对每个客户下了多少订单进行计数，包括那些至今尚未下订单的客户；</p></li><li><p>列出所有产品和订购数量，包括没有人订购的产品；</p></li><li><p>计算平均销售规模，包括那些至今尚未下订单的客户。</p></li></ul><p>在上述例子中，联结包含了那些在相关表中没有关联行的行。这种类型的联结称为<code>外部联结</code>。</p><p>若想检索所有客户和订单，可以使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line">  <span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> order_num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br></pre></td></tr></table></figure><p>但是此时未下订单的用户并没有被检索出，若想检索出，可以使用 OUTER JOIN 来指定联结的类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line">  <span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> order_num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10002</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br></pre></td></tr></table></figure><p>这条SELECT语句使用了关键字OUTER JOIN来指定联结的类型（而不是在WHERE子句中指定）。但是，与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定包括其所有行的表（RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表）。上面的例子使用LEFT OUTER JOIN从FROM子句的左边表（customers表）中选择所有行。为了从右边的表中选择所<br>有行，应该使用RIGHT OUTER JOIN，如下例所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line">  <span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> order_num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>     <span class="number">20009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+</span></span><br></pre></td></tr></table></figure><h4 id="使用带聚集函数的联结"><a href="#使用带聚集函数的联结" class="headerlink" title="使用带聚集函数的联结"></a>使用带聚集函数的联结</h4><p>如果要检索所有客户及每个客户所下的订单数，下面使用了COUNT()函数的代码可完成此工作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.cust_name, c.cust_id, <span class="built_in">COUNT</span>(o.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders <span class="keyword">AS</span> o </span><br><span class="line">  <span class="keyword">ON</span> c.cust_id <span class="operator">=</span> o.cust_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.cust_id;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_id <span class="operator">|</span> num_ord <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Wascals        <span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> E Fudd         <span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>同样也可以与其他不同类型的联结一并使用。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.cust_name, c.cust_id, <span class="built_in">COUNT</span>(o.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders <span class="keyword">AS</span> o </span><br><span class="line">  <span class="keyword">ON</span> c.cust_id <span class="operator">=</span> o.cust_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.cust_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num_ord <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_id <span class="operator">|</span> num_ord <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Wascals        <span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> E Fudd         <span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Mouse House    <span class="operator">|</span>   <span class="number">10002</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+---------+</span></span><br></pre></td></tr></table></figure><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><p>多数SQL查询都只包含从一个或多个表中返回数据的单条SELECT语句。MySQL也允许执行多个查询（多条SELECT语句），并将结果作为单个查询结果集返回。这些组合查询通常称为并（union）或复合查询（compound query）。</p><p>有两种基本情况，其中需要使用组合查询：</p><ul><li>在单个查询中从不同的表返回类似结构的数据；</li><li>对单个表执行多个查询，按单个查询返回数据。</li></ul><h4 id="创建组合查询"><a href="#创建组合查询" class="headerlink" title="创建组合查询"></a>创建组合查询</h4><p>可以使用UNION操作符来组合数条SQL查询语句，利用UNION，可以给出多条SELECT 语句，将他们的结果组合成单个的结果集</p><h4 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a>使用UNION</h4><p>UNION的使用非常简单，只需要给每条SELECT语句之间放上关键词UNION</p><p>举一个例子，假如需要价格小于等于5的所有物品的一个列表，而且还想包括供应商1001和1002生产的所有物品（不考虑价格）。当然，可以利用WHERE子句来完成此工作，不过这次我们将使用UNION。</p><p>第一条语句：<code>SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;= 5;</code></p><p>第二条语句：<code>SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);</code></p><p>这两条语句中，第一句找出价格不高于5的所有物品。第二句找出供应商1001和1002生产的所有商品。</p><p>现在对这两条语句进行组合：</p><p>使用UNION：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span><span class="comment">-- 注意：此处没有 &#x27;;&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> prod_id <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> FU1     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> SLING   <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT1    <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV01   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV02   <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV03   <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> OL1     <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br></pre></td></tr></table></figure><p>可以看到进行了联合操作，将所有的结果取了并集。</p><blockquote><p>当然此处也可以使用<code>WHERE</code>进行查询，但是若使用WHERE查询，无法从多个表查到结果，例如，有两个不同用户的表，都要查询包含一条物品的购买的信息，使用WHERE就很难做到，但是使用<code>UNION</code>会特别简单。</p></blockquote><h4 id="UNION规则"><a href="#UNION规则" class="headerlink" title="UNION规则"></a>UNION规则</h4><ul><li><p>UNION中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</p></li><li><p>列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。如果遵守了这些基本规则或限制，则可以将并用于任何数据检索任务。</p></li></ul><h4 id="包含重复行"><a href="#包含重复行" class="headerlink" title="包含重复行"></a>包含重复行</h4><p>使用UNION会返回两个结果的并集，而其交集部分会被合并，若不想让其合并，可以使用<code>UNION ALL</code>返回所有的行。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span><span class="comment">-- 注意：此处没有 &#x27;;&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> prod_id <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> FU1     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span><span class="comment">-- *注意重复出现两次</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> SLING   <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT1    <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV01   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV02   <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV03   <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> FU1     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span><span class="comment">-- *注意重复出现两次</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> OL1     <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> WHERE子句实现不了这个功能，若要进行这样的操作，必须使用UNION ALL而不是WHERE；</p></blockquote><h4 id="对组合语句进行排序"><a href="#对组合语句进行排序" class="headerlink" title="对组合语句进行排序"></a>对组合语句进行排序</h4><p>SELECT语句的输出用ORDER BY子句排序。在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span><span class="comment">-- 注意：此处没有 &#x27;;&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>; </span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> vend_id <span class="operator">|</span> prod_id <span class="operator">|</span> prod_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV03   <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV02   <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> OL1     <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1001</span> <span class="operator">|</span> ANV01   <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> SLING   <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> FU1     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1002</span> <span class="operator">|</span> FU1     <span class="operator">|</span>       <span class="number">3.42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1003</span> <span class="operator">|</span> TNT1    <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+</span></span><br></pre></td></tr></table></figure><h3 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h3><blockquote><p><strong>并非所有引擎都支持全文本搜索</strong> MySQL支持几种基本的数据库引擎。但并非所有的引擎都支持全文本搜索。<code>两个最常使用的引擎为MyISAM和InnoDB，前者支持全文本搜索，而后者不支持。</code>这就是为什么虽然模板样例创建的多数样例表使用InnoDB，但样例表（productnotes表）却使用MyISAM。如果应用中需要全文本搜索功能，应该记住这一点。</p></blockquote><h4 id="使用全文本搜索"><a href="#使用全文本搜索" class="headerlink" title="使用全文本搜索"></a>使用全文本搜索</h4><p>为了进行全文本搜索，必须索引被搜索的列，而且要在数据改变后能够重新进行索引，因此在对表列进行设计后，MySQL会自动进行所有的索引和重新索引。</p><p>在索引之后，SELECT可与Match()和Against()一起使用以执行搜索。</p><h5 id="启用文本搜索"><a href="#启用文本搜索" class="headerlink" title="启用文本搜索"></a>启用文本搜索</h5><p>一般在创建表时启用全文本搜索。CREATE TABLE语句接受FULLTEXT子句，它给出被索引列的一个逗号分隔的列表。</p><p>本样例的productnotes表的CREATE TABLE语句如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `productnotes` (</span><br><span class="line">  `note_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `prod_id` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `note_date` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `note_text` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`note_id`),</span><br><span class="line">  FULLTEXT KEY `note_text` (`note_text`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM AUTO_INCREMENT<span class="operator">=</span><span class="number">115</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>此语句中，在定义<code>note_text</code>列时，为了进行全文本搜索，使用了FULLTEXT(`note_text`)引导MySQL对其进行索引。这里的FULLTEXT索引单个列，若需要也可以索引多个列。</p><p><strong>在定义之后，MySQL自动维护该索引。在增加、更新或删除行时，索引随之自动更新。</strong></p><p><strong>可以在创建表时指定FULLTEXT，或者在稍后指定（在这种情况下所有已有数据必须立即索引）。</strong></p><blockquote><p><strong>不要在导入数据时使用FULLTEXT</strong> 更新索引要花时间，虽然不是很多，但毕竟要花时间。如果正在导入数据到一个新表，此时不应该启用FULLTEXT索引。应该首先导入所有数据，然后再修改表，定义FULLTEXT。这样有助于更快地导入数据（而且使索引数据的总时间小于在导入每行时分别进行索引所需的总时间）。</p><p><strong>即：为了更快地导入大量数据，先导入数据再定义列为FULLTEXT，避免每次导入一个数据后都更新了一遍索引，大量数据导入后，一次定义即可更新全部索引。</strong></p></blockquote><h5 id="进行全文本搜索"><a href="#进行全文本搜索" class="headerlink" title="进行全文本搜索"></a>进行全文本搜索</h5><p>在索引完成之后，使用两个函数Match()和Against()执行全文本搜索，其中Match()指定被搜索的列，Against()指定要使用的搜索表达式。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabbit&#x27;</span>);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> note_text                                                                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Customer complaint: rabbit has been able <span class="keyword">to</span> detect trap, food apparently less effective now.                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Quantity varies, sold <span class="keyword">by</span> the sack load. <span class="keyword">All</span> guaranteed <span class="keyword">to</span> be bright <span class="keyword">and</span> orange, <span class="keyword">and</span> suitable <span class="keyword">for</span> use <span class="keyword">as</span> rabbit bait. <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>使用完整地Match()说明</strong>  传递给Match() 的值必须与FULLTEXT()定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。</p></blockquote><blockquote><p><strong>搜索不区分大小写</strong> 除非使用BINARY方式，否则全文本搜索不区分大小写。</p></blockquote><p>刚才地搜索也可以用LIKE子句完成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> note_text <span class="keyword">LIKE</span> <span class="string">&#x27;%rabbit%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 也能查询到同样的结果</span></span><br></pre></td></tr></table></figure><p>但是使用全文本搜索和LIKE的最主要的区别是，前者（使用全文本搜索）返回以文本匹配<br>的良好程度排序的数据。两个行都包含词rabbit，但包含词rabbit作为第3个词的行的等级比作为第20个词的行高。这很重要。全文本搜索的一个重要部分就是对结果排序。具有较高等级的行先返回（因为这些行很可能是你真正想要的行）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text, </span><br><span class="line">   <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabbit&#x27;</span>) <span class="keyword">AS</span> ranklevel </span><br><span class="line">   <span class="keyword">FROM</span> productnotes;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> note_text                                                                                                                                                 <span class="operator">|</span> ranklevel          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line">Sticks <span class="keyword">not</span> individually wrapped, too easy <span class="keyword">to</span> mistakenly detonate <span class="keyword">all</span> <span class="keyword">at</span> once.</span><br><span class="line">Recommend individual wrapping.                          <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Can shipped <span class="keyword">full</span>, refills <span class="keyword">not</span> available.</span><br><span class="line">Need <span class="keyword">to</span> <span class="keyword">order</span> <span class="keyword">new</span> can if refill needed.                                                                          <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Safe <span class="keyword">is</span> combination locked, combination <span class="keyword">not</span> provided <span class="keyword">with</span> safe.</span><br><span class="line">This <span class="keyword">is</span> rarely a problem <span class="keyword">as</span> safes <span class="keyword">are</span> typically blown up <span class="keyword">or</span> dropped <span class="keyword">by</span> customers.         <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Quantity varies, sold <span class="keyword">by</span> the sack load.</span><br><span class="line"><span class="keyword">All</span> guaranteed <span class="keyword">to</span> be bright <span class="keyword">and</span> orange, <span class="keyword">and</span> suitable <span class="keyword">for</span> use <span class="keyword">as</span> rabbit bait.                                      <span class="operator">|</span> <span class="number">1.5905543565750122</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Included fuses <span class="keyword">are</span> short <span class="keyword">and</span> have been known <span class="keyword">to</span> detonate too quickly <span class="keyword">for</span> <span class="keyword">some</span> customers.</span><br><span class="line">Longer fuses <span class="keyword">are</span> available (item FU1) <span class="keyword">and</span> should be recommended. <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Matches</span> <span class="keyword">not</span> included, recommend purchase <span class="keyword">of</span> <span class="keyword">matches</span> <span class="keyword">or</span> detonator (item DTNTR).                                                                            <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Please note that <span class="keyword">no</span> <span class="keyword">returns</span> will be accepted if safe opened <span class="keyword">using</span> explosives.                                                                             <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Multiple customer <span class="keyword">returns</span>, anvils failing <span class="keyword">to</span> <span class="keyword">drop</span> fast enough <span class="keyword">or</span> falling backwards <span class="keyword">on</span> purchaser. Recommend that customer considers <span class="keyword">using</span> heavier anvils.  <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Item <span class="keyword">is</span> extremely heavy. Designed <span class="keyword">for</span> dropping, <span class="keyword">not</span> recommended <span class="keyword">for</span> use <span class="keyword">with</span> slings, ropes, pulleys, <span class="keyword">or</span> tightropes.                                       <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint: rabbit has been able <span class="keyword">to</span> detect trap, food apparently less effective now.                                                              <span class="operator">|</span> <span class="number">1.6408053636550903</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Shipped unassembled, requires common tools (including oversized hammer).                                                                                  <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line">Circular hole <span class="keyword">in</span> safe floor can apparently be easily cut <span class="keyword">with</span> handsaw.                                                                <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line"><span class="keyword">Not</span> heavy enough <span class="keyword">to</span> generate flying stars around head <span class="keyword">of</span> victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 <span class="keyword">or</span> ANV03 instead.   <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Call</span> <span class="keyword">from</span> individual trapped <span class="keyword">in</span> safe plummeting <span class="keyword">to</span> the ground, suggests an <span class="keyword">escape</span> hatch be added.</span><br><span class="line">Comment forwarded <span class="keyword">to</span> vendor.                            <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------+</span></span><br></pre></td></tr></table></figure><p>此语句中：等级由MySQL根据行中词的数目、唯一词的数目、整个索引中词的总数以及包含该词的行的数目计算出来。正如所见，不包含词rabbit的行等级为0（因此不被前一例子中的WHERE子句选择）。确实包含词rabbit的两个行每行都有一个等级值，文本中词靠前的行的等级值比词靠后的行的等级值高。这个例子有助于说明全文本搜索如何排除行（排除那些等级为0的行），如何排序结果（按等级以降序排序）。</p><p><strong>正如所见，全文本搜索提供了简单LIKE搜索不能提供的功能。而且，由于数据是索引的，全文本搜索还相当快。</strong></p><h4 id="使用查询扩展"><a href="#使用查询扩展" class="headerlink" title="使用查询扩展"></a>使用查询扩展</h4><p>查询扩展用来设法放宽所返回的全文本搜索结果的范围。</p><p>但考虑下面的情况。你想找出所有提到anvils的注释。只有一个注释包含词anvils，但你还想找出可能与你的搜索有关的所有其他行，即使它们不包含词anvils。</p><p>在使用查询扩展时，MySQL对数据和索引检索两遍来完成扫描：</p><ul><li><p>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</p></li><li><p>其次，MySQL检查这些匹配行并选择所有有用的词（我们将会简要地解释MySQL如何断定什么有用，什么无用）。</p></li><li><p>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。</p></li></ul><p>利用查询扩展，能找出可能相关的结果，即使它们并不精确包含所查找的词。</p><blockquote><p><strong>只用于MySQL版本4.1.1或更高级的版本</strong> 查询扩展功能是在MySQL 4.1.1中引入的，因此不能用于之前的版本。</p></blockquote><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;anvils&#x27;</span> <span class="keyword">WITH</span> QUERY EXPANSION);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> note_text                                                                                                                                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Multiple customer <span class="keyword">returns</span>, anvils failing <span class="keyword">to</span> <span class="keyword">drop</span> fast enough <span class="keyword">or</span> falling backwards <span class="keyword">on</span> purchaser. Recommend that customer considers <span class="keyword">using</span> heavier anvils. <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line">Sticks <span class="keyword">not</span> individually wrapped, too easy <span class="keyword">to</span> mistakenly detonate <span class="keyword">all</span> <span class="keyword">at</span> once.</span><br><span class="line">Recommend individual wrapping.                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line"><span class="keyword">Not</span> heavy enough <span class="keyword">to</span> generate flying stars around head <span class="keyword">of</span> victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 <span class="keyword">or</span> ANV03 instead.  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Please note that <span class="keyword">no</span> <span class="keyword">returns</span> will be accepted if safe opened <span class="keyword">using</span> explosives.                                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint: rabbit has been able <span class="keyword">to</span> detect trap, food apparently less effective now.                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line">Circular hole <span class="keyword">in</span> safe floor can apparently be easily cut <span class="keyword">with</span> handsaw.                                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Matches</span> <span class="keyword">not</span> included, recommend purchase <span class="keyword">of</span> <span class="keyword">matches</span> <span class="keyword">or</span> detonator (item DTNTR).                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此语句中：返回了7行。第一行包含词anvils，因此等级最高。第二行与anvils无关，但因为它包含第一行中的两个词（customer和recommend），所以也被检索出来。第3行也包含这两个相同的词，但它们在文本中的位置更靠后且分开得更远，因此也包含这一行，但等级为第三。第三行确实也没有涉及anvils（按它们的产品名）。正如所见，查询扩展极大地增加了返回的行数，但这样做也增加了你实际上并不想要的行的数目。</p><blockquote><p>使用查询扩展当表中的行越多，返回的结果也就越好。</p></blockquote><h4 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h4><p>以布尔方式，可以提供关于如下内容的细节：</p><ul><li>要匹配的词；</li><li>要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li><li>排列提示（指定某些词比其他词更重要，更重要的词等级更高）；</li><li>表达式分组；</li><li>另外一些内容。</li></ul><blockquote><p><strong>即使没有FULLTEXT索引也可以使用</strong> 布尔方式不同于迄今为止使用的全文本搜索语法的地方在于， 即使没有定义FULLTEXT索引，也可以使用它。但这是一种非常缓慢的操作（其性能将随着数据量的增加而降低）。</p></blockquote><p>使用<code>IN BOOLEAN MODE</code>可以进行布尔文本搜索：</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;heavy -rope*&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> note_text                                                                                                                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Customer complaint:</span><br><span class="line"><span class="keyword">Not</span> heavy enough <span class="keyword">to</span> generate flying stars around head <span class="keyword">of</span> victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 <span class="keyword">or</span> ANV03 instead. <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>此语句匹配包含词heavy，但是-rope*表示排除<code>rope*</code>，即以rope开头的词语(包括ropes等)</p><table><thead><tr><th>布尔操作符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>包含，词必须存在</td></tr><tr><td>-</td><td>排除，词必须不出现</td></tr><tr><td>&gt;</td><td>包含，而且增加等级值</td></tr><tr><td>&lt;</td><td>包含，且减少等级值</td></tr><tr><td>()</td><td>把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）</td></tr><tr><td>~</td><td>取消一个词的排序值</td></tr><tr><td>*</td><td>词尾的通配符</td></tr><tr><td>“”</td><td>定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</td></tr></tbody></table><p>举例说明：</p><ul><li><p><code>Match(note_text) Against(&#39;+rabbit + bait&#39; IN BOOLEAN MODE);</code></p><p>这个用来搜索匹配包含词rabbit和bait的行；</p></li><li><p><code>Match(note_text) Against(&#39;rabbit bait&#39; IN BOOLEAN MODE);</code></p><p>这个用来匹配rabbit和bait包含两者中至少一个的行；</p></li><li><p><code>Match(note_text) Against(&#39;&quot;rabbit bait&quot;&#39; IN BOOLEAN MODE);</code></p><p>这个用来匹配短语rabbit bait而不是匹配两个词rabbit和bait；</p></li><li><p><code>Match(note_text) Against(&#39;&gt;rabbit &lt;bait&#39; IN BOOLEAN MODE);</code></p><p>匹配rabbit和carrot，增加前者的等级，降低后者的等级；</p></li><li><p><code>Match(note_text) Against(&#39;+safe +(&lt;combination)&#39; IN BOOLEAN MODE);</code></p><p>这个搜索匹配词safe和combination，降低后者的等级；</p></li></ul><blockquote><p>在布尔方式中，不按照等级值降序排序返回的行。</p></blockquote><h4 id="全文本搜索的使用说明"><a href="#全文本搜索的使用说明" class="headerlink" title="全文本搜索的使用说明"></a>全文本搜索的使用说明</h4><ul><li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li><li>MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表。</li><li>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEANMODE。</li><li>如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词或者不出现，或者至少出现在50%的行中）。</li><li>忽略词中的单引号。例如，don’t索引为dont。</li><li>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li><li>仅在MyISAM数据库引擎中支持全文本搜索。</li></ul><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h3><p>使用``INSERT`可以执行数据的插入，可以有以下的几种使用方式：</p><ul><li>插入完整的行；</li><li>插入行的一部分；</li><li>插入多行；</li><li>插入某些查询的结果。</li></ul><h3 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h3><p>基本语法实例如下：<br>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,</span><br><span class="line">      <span class="string">&#x27;HeavyTiger&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WHUT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Wu Han&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WH&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;430000&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;CHN&#x27;</span>,</span><br><span class="line">      <span class="keyword">NULL</span>,</span><br><span class="line">      <span class="keyword">NULL</span>);</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"><span class="comment">-- query2</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> cust_name      <span class="operator">|</span> cust_address        <span class="operator">|</span> cust_city <span class="operator">|</span> cust_state <span class="operator">|</span> cust_zip <span class="operator">|</span> cust_country <span class="operator">|</span> cust_contact <span class="operator">|</span> cust_email          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> <span class="number">200</span> Maple Lane      <span class="operator">|</span> Detroit   <span class="operator">|</span> MI         <span class="operator">|</span> <span class="number">44444</span>    <span class="operator">|</span> USA          <span class="operator">|</span> Y Lee        <span class="operator">|</span> ylee<span class="variable">@coyote</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10002</span> <span class="operator">|</span> Mouse House    <span class="operator">|</span> <span class="number">333</span> Fromage Lane    <span class="operator">|</span> Columbus  <span class="operator">|</span> OH         <span class="operator">|</span> <span class="number">43333</span>    <span class="operator">|</span> USA          <span class="operator">|</span> Jerry Mouse  <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span> Wascals        <span class="operator">|</span> <span class="number">1</span> Sunny Place       <span class="operator">|</span> Muncie    <span class="operator">|</span> <span class="keyword">IN</span>         <span class="operator">|</span> <span class="number">42222</span>    <span class="operator">|</span> USA          <span class="operator">|</span> Jim Jones    <span class="operator">|</span> rabbit<span class="variable">@wascally</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span> Yosemite Place <span class="operator">|</span> <span class="number">829</span> Riverside Drive <span class="operator">|</span> Phoenix   <span class="operator">|</span> AZ         <span class="operator">|</span> <span class="number">88888</span>    <span class="operator">|</span> USA          <span class="operator">|</span> Y Sam        <span class="operator">|</span> sam<span class="variable">@yosemite</span>.com    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span> E Fudd         <span class="operator">|</span> <span class="number">4545</span> <span class="number">53</span>rd Street    <span class="operator">|</span> Chicago   <span class="operator">|</span> IL         <span class="operator">|</span> <span class="number">54545</span>    <span class="operator">|</span> USA          <span class="operator">|</span> E Fudd       <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10006</span> <span class="operator">|</span> HeavyTiger     <span class="operator">|</span> WHUT                <span class="operator">|</span> Wu Han    <span class="operator">|</span> WH         <span class="operator">|</span> <span class="number">430000</span>   <span class="operator">|</span> CHN          <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>INSERT语句一般不会产生输出</p></blockquote><p>虽然这种语法很简单，但并不安全，应该尽量避免使用。上面的SQL语句高度依赖于表中列的定义次序，并且还依赖于其次序容易获得的信息。即使可得到这种次序信息，也不能保证下一次表结构变动后各个列保持完全相同的次序。因此，编写依赖于特定列次序的SQL语句是很不安全的。如果这样做，有时难免会出问题。</p><p>更好的方法是指定插入的内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name,</span><br><span class="line">                     cust_address,</span><br><span class="line">                     cust_city,</span><br><span class="line">                     cust_state,</span><br><span class="line">                     cust_zip,</span><br><span class="line">                     cust_country,</span><br><span class="line">                     cust_contact,</span><br><span class="line">                     cust_email</span><br><span class="line">                   )</span><br><span class="line">               <span class="keyword">VALUES</span>(<span class="string">&#x27;dcm&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WHUT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Wu Han&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WH&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;430000&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;CHN&#x27;</span>,</span><br><span class="line">      <span class="keyword">NULL</span>,</span><br><span class="line">      <span class="keyword">NULL</span></span><br><span class="line">                    );</span><br></pre></td></tr></table></figure><p>因为提供了列名，VALUES必须以其指定的次序匹配指定的列名，不一定按各个列出现在实际表中的次序。<strong>其优点是，即使表的结构改变，此INSERT语句仍然能正确工作。</strong>你会发现cust_id的NULL值是不必要的，cust_id列并没有出现在列表中，所以不需要任何值。</p><blockquote><p><strong>总是使用列的列表</strong> 一般不要使用没有明确给出列的列表的INSERT语句。使用列的列表能使SQL代码继续发挥作用，即使表结构发生了变化。</p></blockquote><blockquote><p><strong>省略列</strong> 如果表的定义允许，则可以在INSERT操作中省略某些列。省略的列必须满足以下某个条件。</p><ul><li><p>该列定义为允许NULL值（无值或空值）。</p></li><li><p>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</p><p>如果对表中不允许NULL值且没有默认值的列不给出值，则MySQL将产生一条错误消息，并且相应的行插入不成功。</p></li></ul></blockquote><blockquote><p><strong>提高整体性能</strong> 数据库经常被多个客户访问，对处理什么请求以及用什么次序处理进行管理是MySQL的任务。INSERT操作可能很耗时（特别是有很多索引需要更新时），而且它可能降低等待处理的SELECT语句的性能。</p><p>如果数据检索是最重要的（通常是这样），则你可以通过在INSERT和INTO之间添加关键字LOW_PRIORITY，指示MySQL降低INSERT语句的优先级，如下所示：</p><p><code>INSERT LOW_PRIORITY INTO</code></p><p>顺便说一下，这也适用于UPDATE和DELETE语句。</p></blockquote><h3 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h3><p>可以以分号结尾，直接输入多个插入行语句，也可以在VALUES中设置多组值；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name,</span><br><span class="line">                     cust_address,</span><br><span class="line">                     cust_city,</span><br><span class="line">                     cust_state,</span><br><span class="line">                     cust_zip,</span><br><span class="line">                     cust_country</span><br><span class="line">                   )</span><br><span class="line">               <span class="keyword">VALUES</span>(<span class="string">&#x27;test1&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WHUT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Wu Han&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WH&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;430000&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;CHN&#x27;</span></span><br><span class="line">                    ),</span><br><span class="line">                    (<span class="string">&#x27;test2&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WHUT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Wu Han&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;WH&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;430000&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;CHN&#x27;</span></span><br><span class="line">                    );</span><br><span class="line">                    </span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10008</span> <span class="operator">|</span> test1          <span class="operator">|</span> WHUT                <span class="operator">|</span> Wu Han    <span class="operator">|</span> WH         <span class="operator">|</span> <span class="number">430000</span>   <span class="operator">|</span> CHN          <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10009</span> <span class="operator">|</span> test2          <span class="operator">|</span> WHUT                <span class="operator">|</span> Wu Han    <span class="operator">|</span> WH         <span class="operator">|</span> <span class="number">430000</span>   <span class="operator">|</span> CHN          <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>可以提高INSERT的性能</strong> 此技术可以提高数据库处理的性能，因为MySQL用单条INSERT语句处理多个插入，比使用多条INSERT语句更快。</p></blockquote><h3 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h3><p>若想把检索筛选出的客户数据（例如消费金额大于1w的VIP客户），插入到另一张表中，一条一条插入太浪费时间，因此可以使用<code>INSERT SELECT</code>语句执行该操作。</p><p>假设存在一张叫做custnew的表存储客户的数据，欲将该表导入到customers表中：</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_id,</span><br><span class="line">                     cust_email,</span><br><span class="line">                     cust_contact,</span><br><span class="line">     cust_name,</span><br><span class="line">                     cust_address,</span><br><span class="line">                     cust_city,</span><br><span class="line">                     cust_state,</span><br><span class="line">                     cust_zip,</span><br><span class="line">                     cust_country</span><br><span class="line">                   )</span><br><span class="line">              <span class="keyword">SELECT</span> cust_id,</span><br><span class="line">                     cust_email,</span><br><span class="line">                     cust_contact,</span><br><span class="line">     cust_name,</span><br><span class="line">                     cust_address,</span><br><span class="line">                     cust_city,</span><br><span class="line">                     cust_state,</span><br><span class="line">                     cust_zip,</span><br><span class="line">                     cust_country</span><br><span class="line">                <span class="keyword">FROM</span> custnew;</span><br></pre></td></tr></table></figure><p>此语句中：</p><p>使用INSERT SELECT从custnew中将所有数据导入customers。SELECT语句从custnew检索出要插入的值，而不是列出它们。SELECT中列出的每个列对应于customers表名后所跟的列表中的每个列。这条语句将插入多少行有赖于custnew表中有多少行。如果这个表为空，则没有行被插入（也不产生错误，因为操作仍然是合法的）。如果这个表确实含有数据，则所有数据将被插入到customers。</p><p>这个例子导入了cust_id（假设能够确保cust_id的值不重复）。也可以简单地省略这列（从INSERT和SELECT中），这样MySQL就会生成新值。</p><p><strong>INSERT SELECT中SELECT语句可包含WHERE子句以过滤插入的数据。</strong></p><h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>使用UPDATE语句，可以达到更新表中数据的目的，有以下两种方式使用UPDATE：</p><ul><li>更新表中的特定列；</li><li>更新表中的所有行。</li></ul><blockquote><p><strong>不要省略WHERE子句</strong> 在使用UPDATE时一定要注意细心。因为稍不注意，就会更新表中所有行。</p></blockquote><p>UPDATE语句非常容易使用，甚至可以说是太容易使用了。基本的UPDATE语句由3部分组成，分别是：</p><ul><li>要更新的表；</li><li>列名和它们的新值；</li><li>确定要更新行的过滤条件。</li></ul><p>假设需要更新客户10005的电子邮件地址，因此他的记录需要更新，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"><span class="comment">-- query2</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_email <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> cust_email     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span> elmer<span class="variable">@fudd</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>若没有告诉更新哪里的数据，将会更新所有人的cust_email为<a href="mailto:&#101;&#x6c;&#109;&#x65;&#114;&#x40;&#102;&#x75;&#100;&#x64;&#x2e;&#99;&#111;&#x6d;">&#101;&#x6c;&#109;&#x65;&#114;&#x40;&#102;&#x75;&#100;&#x64;&#x2e;&#99;&#111;&#x6d;</a>;</p></blockquote><p><strong>更新多个列：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line"><span class="keyword">SET</span> cust_name <span class="operator">=</span> <span class="string">&#x27;The Fudds&#x27;</span>,</span><br><span class="line">cust_email <span class="operator">=</span> <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p>在更新多个列时，只需要使用单个SET命令，每个“列=值”对之间用逗号分隔（最后一列之后不用逗号）。在此例子中，更新客户10005的cust_name和cust_email列。</p><blockquote><p><strong>在UPDATE语句中使用子查询</strong> UPDATE语句中可以使用子查询，使得能用SELECT语句检索出的数据更新列数据。</p></blockquote><blockquote><p><strong>IGNORE关键字</strong> 如果用UPDATE语句更新多行，并且在更新这些行中的一行或多行时出一个现错误，则整个UPDATE操作被取消（错误发生前更新的所有行被恢复到它们原来的值）。为即使是发生错误，也继续进行更新，可使用IGNORE关键字，如下所示：<br><code>UPDATE IGNORE customers…</code></p></blockquote><p>为了删除某个列，也可以设置其为NULL，将其中的值删除</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>为了从一个表中删除（去掉）数据，使用DELETE语句。可以两种方式使用DELETE：</p><ul><li>从表中删除特定的行；</li><li>从表中删除所有行。</li></ul><blockquote><p><strong>不要省略WHERE子句</strong> 在使用DELETE时一定要注意细心。因为稍不注意，就会错误地删除表中所有行。</p></blockquote><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10006</span>;</span><br></pre></td></tr></table></figure><p>为了删除指定的列，使用UPDATE语句，可以达到要求。</p><blockquote><p><strong>删除表的内容而不是表</strong> DELETE语句从表中删除行，甚至是删除表中所有行。但是，DELETE不删除表本身。</p></blockquote><blockquote><p><strong>更快的删除</strong> 如果想从表中删除所有行，不要使用DELETE。可使用TRUNCATE TABLE语句，它完成相同的工作，但速度更快（TRUNCATE实际是删除原来的表并重新创建一个表，而不是逐行删除表中的数据）。</p></blockquote><h3 id="更新和删除的指导原则"><a href="#更新和删除的指导原则" class="headerlink" title="更新和删除的指导原则"></a>更新和删除的指导原则</h3><p>下面是许多SQL程序员使用UPDATE或DELETE时所遵循的习惯。</p><ul><li>除非确实打算更新和删除每一行，否则绝对不要使用不带WHERE子句的UPDATE或DELETE语句。</li><li>保证每个表都有主键（如果忘记这个内容，请参阅第15章），尽可能像WHERE子句那样使用它（可以指定各主键、多个值或值的范围）。</li><li>在对UPDATE或DELETE语句使用WHERE子句前，应该先用SELECT进行测试，保证它过滤的是正确的记录，以防编写的WHERE子句不正确。</li><li>使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。</li></ul><blockquote><p><strong>小心使用</strong> MySQL没有撤销（undo）按钮。应该非常小心地使用UPDATE和DELETE，否则你会发现自己更新或删除了错误的数据。</p></blockquote><h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>MySQL不仅用于表数据操纵，而且还可以用来执行数据库和表的所有操作，包括表本身的创建和处理。</p><p>一般有两种创建表的方法：</p><ul><li>使用具有交互式创建和管理表的工具（如第2章讨论的工具）；</li><li>表也可以直接用MySQL语句操纵。</li></ul><h4 id="表创建基础"><a href="#表创建基础" class="headerlink" title="表创建基础"></a>表创建基础</h4><p>使用<code>CREATE TABLE</code>创建表，必须给出以下信息：</p><ul><li>新表的名字，在关键字CREATE TABLE之后给出；</li><li>表列的名字和定义，用逗号分隔。</li></ul><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers</span><br><span class="line">(</span><br><span class="line">cust_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    cust_name  <span class="type">char</span>(<span class="number">50</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    cust_address <span class="type">char</span>(<span class="number">50</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    cust_city <span class="type">char</span>(<span class="number">50</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    cust_state <span class="type">char</span>(<span class="number">5</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    cust_zip <span class="type">char</span>(<span class="number">10</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    cust_country <span class="type">char</span>(<span class="number">50</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    cust_contact <span class="type">char</span>(<span class="number">50</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    cust_email <span class="type">char</span>(<span class="number">255</span>)<span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (cust_id)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br></pre></td></tr></table></figure><p>此语句中：表名紧跟在CREATE TABLE关键字后面。实际的表定义（所有列）括在圆括号之中。各列之间用逗号分隔。这个表由9列组成。每列的定义以列名（它在表中必须是唯一的）开始，后跟列的数据类型。表的主键可以在创建表时用PRIMARY KEY关键字指定。这里，列cust_id指定作为主键列。整条语句由右圆括号后的分号结束。</p><blockquote><p><strong>处理现有的表</strong> 在创建新表时，指定的表名必须不存在，否则将出错。如果要防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建它，而不是简单地用创建表语句覆盖它。</p><p>如果你仅想在一个表不存在时创建它，应该在表名后给出<code>IF NOT EXISTS</code>。这样做不检查已有表的模式是否与你打算创建的表模式相匹配。它只是查看表名是否存在，并且仅在表名不存在时创建它。</p></blockquote><h4 id="使用NULL值"><a href="#使用NULL值" class="headerlink" title="使用NULL值"></a>使用NULL值</h4><p>允许NULL值即允许在插入行时不给出该列的值。不允许NULL值则表示不接受不提供该值的行。每一个表列都需要在创建时给出定义规定。</p><p>如6.1.1中的例子，NOT NULL表示不允许插入NULL，将会阻止插入没有值的列。如果试图插入没有值的列，将返回错误，且插入失败。NULL不是必须的，不指定NOT NULL则默认为NULL。</p><blockquote><p><strong>理解NULL</strong> 不要把NULL值与空串相混淆。NULL值是没有值，它不是空串。如果指定’’（两个单引号，其间没有字符），这在NOT NULL列中是允许的。空串是一个有效的值，它不是无值。NULL值用关键字NULL而不是空串指定。</p></blockquote><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>正如所述，主键值必须唯一。即，表中的每个行必须具有唯一的主键值。如果主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合值必须唯一。</p><p>迄今为止我们看到的CREATE TABLE例子都是用单个列作为主键。其中主键用以下的类似的语句定义：</p><p><code>PRIMARY KEY (vend_id)</code></p><p>若创建由多个列组成的主键，则应该以逗号分隔的列表给出各个列名，例如：</p><p><code>PRIMARY KEY (order_num, order_item)</code></p><p>此时二者共同表示主键，每个订单号（order_num）和订单物品（order_item）列的组合是唯一的，因此可以被作为主键。</p><p>主键可以在创建表时定义，也可以在创建表后定义；</p><blockquote><p><strong>主键和NULL值</strong> 主键为其值唯一标识表中每个行的列。主键中只能使用不允许NULL值的列。允许NULL值的列不能作为唯一标识。</p></blockquote><h4 id="使用AUTO-INCREMENT"><a href="#使用AUTO-INCREMENT" class="headerlink" title="使用AUTO_INCREMENT"></a>使用AUTO_INCREMENT</h4><p><code>AUTO_INCREMENT</code>告诉MySQL，本列每当增加一行时自动增量。每次执行一个INSERT操作时，MySQL自动对该列增量（从而才有这个关键字AUTO_INCREMENT），给该列赋予下一个可用的值。这样给每个行分配一个唯一的key_id，从而可以用作主键值。</p><blockquote><p><strong>覆盖AUTO_INCREMENT</strong> 如果一个列被指定为AUTO_INCREMENT，则它需要使用特殊的值吗？你可以简单地在INSERT语句<br>中指定一个值，只要它是唯一的（至今尚未使用过）即可，该值将被用来替代自动生成的值。后续的增量将开始使用该手工插入的值。</p></blockquote><blockquote><p><strong>确定AUTO_INCREMENT值</strong> 让MySQL生成（通过自动增量）主键的一个缺点是你不知道这些值都是谁。</p><p>考虑这个场景：你正在增加一个新订单。这要求在orders表中创建一行，然后在orderitms表中对订购的每项物品创建一行。主键order_num（自动生成）在orderitems表中与订单细节一起存储。这就是为什么orders表和orderitems表为相互关联的表的原因。这显然要求你在插入orders行之后，插入orderitems行之前知道生成的order_num。</p><p>那么，如何在使用AUTO_INCREMENT列时获得这个值呢？可使用last_insert_id()函数获得这个值，如下所示：<br><code>SELECT last_insert_id()</code><br>此语句返回最后一个AUTO_INCREMENT值，然后可以将它用于后续的MySQL语句。</p></blockquote><h4 id="指定默认值"><a href="#指定默认值" class="headerlink" title="指定默认值"></a>指定默认值</h4><p>若在插入行时没有给出具体的值，MySQL允许指定此时使用的默认值。默认值使用<code>CREATE TABLE</code>中的<code>DEFAULT</code>关键词指定。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orderitems(</span><br><span class="line">order_num <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    order_item<span class="type">int</span><span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    quantity<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(order_num, order_item)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br></pre></td></tr></table></figure><p>此语句中：设定了quantity的默认值为1，在未给出数量的情况下，将直接使用数量1。</p><blockquote><p><strong>不允许函数</strong> 与大多数DBMS不一样，MySQL不允许使用函数作为默认值，它只支持常量。</p></blockquote><blockquote><p><strong>使用默认值而不是NULL值</strong> 许多数据库开发人员使用默认值而不是NULL列，特别是对用于计算或数据分组的列更是如此。</p></blockquote><h4 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a>引擎类型</h4><p>MySQL有一个具体管理和处理数据的内部引擎。在你使用CREATE TABLE语句时，该引擎具体创建表，而在你使用SELECT语句或进行其他数据库处理时，该引擎在内部处理你的请求。多数时候，此引擎都隐藏在DBMS内，不需要过多关注它。</p><p>但MySQL与其他DBMS不一样，它具有多种引擎。它打包多个引擎，这些引擎都隐藏在MySQL服务器内，全都能执行CREATE TABLE和SELECT等命令。</p><p>为什么要发行多种引擎呢？因为它们具有各自不同的功能和特性，为不同的任务选择正确的引擎能获得良好的功能和灵活性。</p><p>当然，你完全可以忽略这些数据库引擎。如果省略ENGINE=语句，则使用默认引擎（很可能是MyISAM），多数SQL语句都会默认使用它。但并不是所有语句都默认使用它，这就是为什么ENGINE=语句很重要的原因。</p><ul><li>InnoDB是一个可靠的事务处理引擎，它不支持全文本搜索；</li><li>MEMORY在功能等同于MyISAM，但由于数据存储在内存（不是磁盘）中，速度很快（特别适合于临时表）；</li><li>MyISAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</li></ul><p>引擎类型可以混用。参考书籍中提供的数据库样例，除productnotes表使用MyISAM外，其他样例表都使用InnoDB。原因是作者希望支持事务处理（因此，使用InnoDB），但也需要在productnotes中支持全文本搜索（因此，使用MyISAM）。</p><blockquote><p><strong>外键不能跨引擎</strong> 混用引擎类型有一个大缺陷。外键不能跨引擎，即使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p></blockquote><h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><p>为更新表定义，可使用ALTER TABLE语句。但是，理想状态下，当表中存储数据以后，该表就不应该再被更新。在表的设计过程中需要花费大量时间来考虑，以便后期不对该表进行大的改动。</p><p>为了使用ALTER TABLE更改表结构，必须给出下面的信息：</p><ul><li>在ALTER TABLE之后给出要更改的表名（该表必须存在，否则将出错）；</li><li>所做更改的列表。</li></ul><p>使用语句给表添加一个列：</p><p><code>ALTER TABLE vendors ADD vend_phone CHAR(20);</code></p><p>删除刚刚添加的列：</p><p><code>ALTER TABLE vendors DROP COLUMN vend_phone;</code></p><p>可以用该语句定义外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- first</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_orders</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (order_num) </span><br><span class="line"><span class="keyword">REFERENCES</span> orders (order_num);</span><br><span class="line"><span class="comment">-- second</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_products</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (prod_id) </span><br><span class="line"><span class="keyword">REFERENCES</span> products (prod_id);</span><br></pre></td></tr></table></figure><p>复杂的表结构的更改一般需要手动删除的过程，一般涉及到如下步骤：</p><ul><li>用新的列布局创建一个新表；</li><li>使用INSERT SELECT语句从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；</li><li>检验包含所需数据的新表；</li><li>重命名旧表（如果确定，可以删除它）；</li><li>用旧表原来的名字重命名新表；</li><li>根据需要，重新创建触发器、存储过程、索引和外键。</li></ul><blockquote><p><strong>小心使用ALTER TABLE</strong> 使用ALTER TABLE要极为小心，应该在进行改动前做一个完整的备份（模式和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的列，可能不能删除它们。类似地，如果删除了不应该删除的列，可能会丢失该列中的所有数据。</p></blockquote><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>使用<code>DORP TABLE</code>语句可以很容易实现此功能：</p><p><code>DROP TABLE customers2;</code></p><p>这条语句删除customers2表（假设它存在）。删除表没有确认，也不能撤销，执行这条语句将永久删除该表。</p><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p>使用<code>RENAME TABLE</code>语句对表进行重命名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> backup_customers <span class="keyword">TO</span> customers,</span><br><span class="line"> backup_vendors <span class="keyword">TO</span> vendors,</span><br><span class="line"> backup_products <span class="keyword">TO</span> products;</span><br></pre></td></tr></table></figure><h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><blockquote><p><strong>需要MySQL 5</strong> MySQL 5添加了对视图的支持。因此，本内容适用于MySQL 5及以后的版本。</p></blockquote><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p><p>例如之前使用的查询三个表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此查询用来检索订购了某个特定产品的客户。任何需要这个数据的人都必须理解相关表的结构，并且知道如何创建查询和对表进行联结。为了检索其他产品（或多个产品）的相同数据，必须修改最后的WHERE子句。</p><p><strong>假设有办法将整个查询包装成一个名为productcustomers的虚拟表，则可以很容易地使用以下语句达成目的：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> productcustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure><p>作为视图，他不应该包含表中的任何列或者数据，它包含的是一个SQL查询。</p><h4 id="为什么使用视图"><a href="#为什么使用视图" class="headerlink" title="为什么使用视图"></a>为什么使用视图</h4><p>我们已经看到了视图应用的一个例子。下面是视图的一些常见应用。</p><ul><li>重用SQL语句。</li><li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li><li>使用表的组成部分而不是整个表。</li><li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><p>在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据。</p><p>重要的是知道视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变过的数据。</p><blockquote><p><strong>性能问题</strong> 因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一个检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。</p></blockquote><h4 id="视图的规则和限制"><a href="#视图的规则和限制" class="headerlink" title="视图的规则和限制"></a>视图的规则和限制</h4><p>下面是关于视图创建和使用的一些最常见的规则和限制。</p><ul><li>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。</li><li>对于可以创建的视图数目没有限制。</li><li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li><li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li><li>ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖。</li><li>视图不能索引，也不能有关联的触发器或默认值。</li><li>视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句。</li></ul><h3 id="使用视图-1"><a href="#使用视图-1" class="headerlink" title="使用视图"></a>使用视图</h3><ul><li>视图用CREATE VIEW语句来创建。</li><li>使用SHOW CREATE VIEW viewname；来查看创建视图的语句。</li><li>用DROP删除视图，其语法为DROP VIEW viewname;。</li><li>更新视图时，可以先用DROP再用CREATE，也可以直接用CREATE ORREPLACE VIEW。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li></ul><h4 id="利用视图简化复杂的联结"><a href="#利用视图简化复杂的联结" class="headerlink" title="利用视图简化复杂的联结"></a>利用视图简化复杂的联结</h4><p>视图的最常见的应用之一是隐藏复杂的SQL，这通常都会涉及联结。</p><p>使用语句创建视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productcustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">    <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">-- use</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> productcustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name      <span class="operator">|</span> cust_contact <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> Y Lee        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Yosemite Place <span class="operator">|</span> Y Sam        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------+</span></span><br></pre></td></tr></table></figure><h4 id="使用视图重新格式化检索出的数据"><a href="#使用视图重新格式化检索出的数据" class="headerlink" title="使用视图重新格式化检索出的数据"></a>使用视图重新格式化检索出的数据</h4><p>假设经常进行某项数据的拼接格式化工作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name),<span class="string">&#x27;(&#x27;</span>,RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="comment">-- 可以对此创建一个视图，在每次使用时直接索引视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vend_locations <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name),<span class="string">&#x27;(&#x27;</span>,RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="comment">-- test</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> vend_locations;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> vend_title             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> ACME(USA)              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Anvils R Us(USA)       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Furball Inc.(USA)      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jet <span class="keyword">Set</span>(England)       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jouets Et Ours(France) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LT Supplies(USA)       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="使用视图过滤掉不想要的数据"><a href="#使用视图过滤掉不想要的数据" class="headerlink" title="使用视图过滤掉不想要的数据"></a>使用视图过滤掉不想要的数据</h4><p>使用视图过滤掉没有电子邮件地址的客户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- create view</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> customeremaillist <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- test</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customeremaillist;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> cust_id <span class="operator">|</span> cust_name      <span class="operator">|</span> cust_email          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10001</span> <span class="operator">|</span> Coyote Inc.    <span class="operator">|</span> ylee<span class="variable">@coyote</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10003</span> <span class="operator">|</span> Wascals        <span class="operator">|</span> rabbit<span class="variable">@wascally</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10004</span> <span class="operator">|</span> Yosemite Place <span class="operator">|</span> sam<span class="variable">@yosemite</span>.com    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">10005</span> <span class="operator">|</span> E Fudd         <span class="operator">|</span> elmer<span class="variable">@fudd</span>.com      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------------+---------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="使用视图和计算字段"><a href="#使用视图和计算字段" class="headerlink" title="使用视图和计算字段"></a>使用视图和计算字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> orderitemsexpanded <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, quantity, item_price,</span><br><span class="line">   quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems;</span><br><span class="line"><span class="comment">-- test</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orderitemsexpanded <span class="keyword">ORDER</span> <span class="keyword">BY</span> expanded_price <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> prod_id <span class="operator">|</span> quantity <span class="operator">|</span> item_price <span class="operator">|</span> expanded_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>      <span class="number">100</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>        <span class="number">1000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FC      <span class="operator">|</span>       <span class="number">50</span> <span class="operator">|</span>       <span class="number">2.50</span> <span class="operator">|</span>         <span class="number">125.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV01   <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span>       <span class="number">5.99</span> <span class="operator">|</span>          <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JP2000  <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span>          <span class="number">55.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TNT2    <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>          <span class="number">50.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV02   <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span>       <span class="number">9.99</span> <span class="operator">|</span>          <span class="number">29.97</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANV03   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>      <span class="number">14.99</span> <span class="operator">|</span>          <span class="number">14.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>          <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FB      <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>      <span class="number">10.00</span> <span class="operator">|</span>          <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OL1     <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>       <span class="number">8.99</span> <span class="operator">|</span>           <span class="number">8.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SLING   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>       <span class="number">4.49</span> <span class="operator">|</span>           <span class="number">4.49</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+------------+----------------+</span></span><br></pre></td></tr></table></figure><h4 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h4><p>迄今为止的所有视图都是和SELECT语句使用的。然而，视图的数据能否更新？答案视情况而定。</p><p>通常，视图是可更新的（即，可以对它们使用INSERT、UPDATE和DELETE）。更新一个视图将更新其基表（可以回忆一下，视图本身没有数据）。如果你对视图增加或删除行，实际上是对其基表增加或删除行。</p><p>但是，并非所有视图都是可更新的。基本上可以说，如果MySQL不能正确地确定被更新的基数据，则不允许更新（包括插入和删除）。这实际上意味着，如果视图定义中有以下操作，则不能进行视图的更新：</p><ul><li><p>分组（使用GROUP BY和HAVING）；</p></li><li><p>联结；</p></li><li><p>子查询；</p></li><li><p>并；</p></li><li><p>聚集函数（Min()、Count()、Sum()等）；</p></li><li><p>DISTINCT；</p></li><li><p>导出（计算）列。</p></li></ul><p>换句话说，本章许多例子中的视图都是不可更新的。这听上去好像是一个严重的限制，但实际上不是，因为视图主要用于数据检索。</p><blockquote><p><strong>将视图用于检索</strong> 一般，应该将视图用于检索（SELECT语句）而不用于更新（INSERT、UPDATE和DELETE）。</p></blockquote><h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><blockquote><p><strong>需要MySQL 5</strong> MySQL 5添加了对存储过程的支持，因此，适用于MySQL 5及以后的版本。</p></blockquote><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>迄今为止，使用的大多数SQL语句都是针对一个或多个表的单条语句。并非所有操作都这么简单，经常会有一个完整的操作需要多条语句才能完成。例如，考虑以下的情形。</p><ul><li>为了处理订单，需要核对以保证库存中有相应的物品。</li><li>如果库存有物品，这些物品需要预定以便不将它们再卖给别的人，并且要减少可用的物品数量以反映正确的库存量。</li><li>库存中没有的物品需要订购，这需要与供应商进行某种交互。</li><li>关于哪些物品入库（并且可以立即发货）和哪些物品退订，需要通知相应的客户。</li></ul><p>这显然不是一个完整的例子，它甚至超出了本书中所用样例表的范围，但足以帮助表达我们的意思了。执行这个处理需要针对许多表的多条MySQL语句。此外，需要执行的具体语句及其次序也不是固定的，它们可能会（和将）根据哪些物品在库存中哪些不在而变化。</p><p>那么，怎样编写此代码？可以单独编写每条语句，并根据结果有条件地执行另外的语句。在每次需要这个处理时（以及每个需要它的应用中）都必须做这些工作。</p><p>可以创建存储过程。存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批文件，虽然它们的作用不仅限于批处理。</p><h3 id="为什么要使用存储过程"><a href="#为什么要使用存储过程" class="headerlink" title="为什么要使用存储过程"></a>为什么要使用存储过程</h3><p><strong>优点：</strong></p><ul><li><p>通过把处理封装在容易使用的单元中，简化复杂的操作</p></li><li><p>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。如果所有开发人员和应用程序都使用同一（试验和测试）存储过程，则所使用的代码都是相同的。这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</p></li><li><p>简化对变动的管理。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。</p></li><li><p>这一点的延伸就是安全性。通过存储过程限制对基础数据的访问减少了数据讹误（无意识的或别的原因所导致的数据讹误）的机会。</p></li><li><p>提高性能。因为使用存储过程比使用单独的SQL语句要快。</p></li><li><p>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>一般来说，存储过程的编写比基本SQL语句复杂，编写存储过程需要更高的技能，更丰富的经验。</p></li><li><p>可能没有创建存储过程的安全访问权限。许多数据库管理员限制存储过程的创建权限，允许用户使用存储过程，但不允许他们创建存储过程。</p></li></ul><p>尽管有这些缺陷，存储过程还是非常有用的，并且应该尽可能地使用。</p><h3 id="使用存储过程-1"><a href="#使用存储过程-1" class="headerlink" title="使用存储过程"></a>使用存储过程</h3><h4 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h4><p>MySQL称存储过程的执行为调用，因此MySQL执行存储过程的语句为CALL。CALL接受存储过程的名字以及需要传递给它的任意参数。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(<span class="variable">@pricelow</span></span><br><span class="line">                    <span class="variable">@pricehigh</span></span><br><span class="line">                    <span class="variable">@priceaverage</span></span><br><span class="line">                   );</span><br></pre></td></tr></table></figure><p>此语句中：将执行名为productpricing的存储过程，它计算并返回产品的最低、最高和平均价格。</p><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><h5 id="无参存储过程"><a href="#无参存储过程" class="headerlink" title="无参存储过程"></a>无参存储过程</h5><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price) <span class="keyword">AS</span> priceaverage</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此语句中：存储过程名为productpricing，用CREATE PROCEDURE productpricing()语句定义。如果存储过程接受参数，它们将在()中列举出来。此存储过程没有参数，但后跟()仍然需要。BEGIN和END语句用来限定存储过程体，过程体本身仅是一个简单的SELECT语句。</p><p>在MySQL处理这段代码时，它创建一个新的存储过程productpricing。没有返回数据，因为这段代码并未调用存储过程，这里只是为以后使用而创建它。</p><blockquote><p><strong>mysql命令行客户机的分隔符</strong> 如果使用的是mysql命令行，应该仔细阅读此说明。</p><p>默认的MySQL语句分隔符为<code>;</code>。mysql命令行实用程序也使用<code>;</code>作为语句分隔符。如果命令行要解释存储过程自身内的<code>;</code>字符，则它们最终不会成为存储过程的内容，这会使存储过程中的SQL出现句法错误。</p><p>解决办法是临时更改命令行实用程序的语句分隔符，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price) <span class="keyword">AS</span> priceaverage</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span>DELIMITER ;</span><br></pre></td></tr></table></figure><p>其中，<code>DELIMITER //</code>告诉命令行实用程序使用<code>//</code>作为新的语句结束分隔符，可以看到标志存储过程结束的END定义为<code>END//</code>而不是<code>END;</code>。这样，存储过程体内的<code>;</code>仍然保持不动，并且正确地传递给数据库引擎。最后，为恢复为原来的语句分隔符，可使用<code>DELIMITER ;</code>。除<code>\</code>符号外，任何字符都可以用作语句分隔符。</p></blockquote><p>使用<code>CALL productpricing();</code>可以调用这个存储过程；</p><h5 id="含参存储过程"><a href="#含参存储过程" class="headerlink" title="含参存储过程"></a>含参存储过程</h5><p>productpricing只是一个简单的存储过程，它简单地显示SELECT语句的结果。一般，存储过程并不显示结果，而是把结果返回给你指定的变量。</p><blockquote><p><strong>变量（variable）</strong>内存中一个特定的位置，用来临时存储数据。</p></blockquote><p>使用有参存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing(</span><br><span class="line"><span class="keyword">OUT</span> pl <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> ph <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> pa <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Min</span>(prod_price)</span><br><span class="line"><span class="keyword">INTO</span> pl</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Max</span>(prod_price)</span><br><span class="line"><span class="keyword">INTO</span> ph</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price)</span><br><span class="line"><span class="keyword">INTO</span> pa</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>关键字OUT指出相应的参数用来从存储过程传出一个值（返回给调用者）。MySQL支持IN（传递给存储过程）、OUT（从存储过程传出）和INOUT（对存储过程传入和传出）类型的参数。存储过程的代码位于BEGIN和END语句内，如前所见，它们是一系列SELECT语句，用来检索值，然后保存到相应的变量（通过指定INTO关键字）。</p><blockquote><p><strong>参数的数据类型</strong></p><p>切记不能使用一个参数返回多个行和列，记录集是不被允许的。</p></blockquote><p>调用含参存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(<span class="variable">@pricelow</span>,</span><br><span class="line">                    <span class="variable">@pricehigh</span>,</span><br><span class="line">                    <span class="variable">@pricecaverage</span>);</span><br></pre></td></tr></table></figure><p>它们是存储过程将保存结果的3个变量的名字。所有MySQL变量都必须以<code>@</code>开始。</p><p>为了检索变量，可以使用如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@pricelow</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@pricelow</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">2.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@pricelow</span>, <span class="variable">@pricehigh</span>, <span class="variable">@pricecaverage</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@pricelow</span> <span class="operator">|</span> <span class="variable">@pricehigh</span> <span class="operator">|</span> <span class="variable">@pricecaverage</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">2.50</span> <span class="operator">|</span>      <span class="number">55.00</span> <span class="operator">|</span>          <span class="number">16.13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+----------------+</span></span><br></pre></td></tr></table></figure><p>使用含入参的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordercount(</span><br><span class="line"><span class="keyword">IN</span> onum <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> onum</span><br><span class="line"><span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ordercount(<span class="number">20005</span>, <span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@total</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">149.87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- test2</span></span><br><span class="line"><span class="keyword">CALL</span> ordercount(<span class="number">20009</span>, <span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@total</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">38.47</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p>使用语句:</p><p><code>DROP PROCEDURE productpricing;</code></p><p>若需要更安全，可以使用仅当存在时删除：</p><p><code>DROP PROCEDURE productpricing IF EXISTS;</code></p><h4 id="建立智能存储过程"><a href="#建立智能存储过程" class="headerlink" title="建立智能存储过程"></a>建立智能存储过程</h4><p>使用智能存储过程可以处理更加复杂的规则和业务。</p><p>假如，需要获得与以前一样的订单合计，但需要对合计增加营业税，不过只针对某些顾客。那么，需要做下面几件事情：</p><ul><li>获得合计（与以前一样）；</li><li>把营业税有条件地添加到合计；</li><li>返回合计（带或不带税）。</li></ul><p>建立存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Name: ordertotal</span></span><br><span class="line"><span class="comment">-- Praameters: onumber = order number</span></span><br><span class="line"><span class="comment">--    tax = order number</span></span><br><span class="line"><span class="comment">--    ototal = order total variable</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line"><span class="keyword">IN</span> onumber <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">IN</span> taxable <span class="type">BOOLEAN</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">) COMMENT <span class="string">&#x27;Obtain order total, optionally adding tax&#x27;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- Declare variable for total</span></span><br><span class="line"><span class="keyword">DECLARE</span> total <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">-- Declare tax perceentage</span></span><br><span class="line"><span class="keyword">DECLARE</span> taxrate <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Get the order total</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price <span class="operator">*</span> quantity)</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> onumber</span><br><span class="line"><span class="keyword">INTO</span> total;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Is this taxable?</span></span><br><span class="line">IF taxable <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> total <span class="operator">+</span> (total <span class="operator">*</span> taxrate <span class="operator">/</span> <span class="number">100</span>) <span class="keyword">INTO</span> total;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SELECT</span> total <span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>COMMENT关键字</strong> 本例子中的存储过程在CREATE PROCEDURE语句中包含了一个COMMENT值。它不是必需的，但如果给出，将在SHOW PROCEDURE STATUS的结果中显示。</p></blockquote><p>调用存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>, <span class="number">0</span> , <span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@total</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">149.87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="comment">-- test</span></span><br><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>, <span class="number">1</span> , <span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@total</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">158.86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure><blockquote><p>BOOLEAN值指定为1表示真，指定为0表示假（实际上，非零值都考虑为真，只有0被视为假）。通过给中间的参数指定0或1，可以有条件地将营业税加到订单合计上。</p></blockquote><blockquote><p><strong>IF语句</strong> 这个例子给出了MySQL的IF语句的基本用法。IF语句还支持ELSEIF和ELSE子句（前者还使用THEN子句，后者不使用）。</p></blockquote><h4 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h4><p>使用语句：<code>SHOW CREATE PROCEDURE ordertotal;</code></p><p>可以显示创建存储过程的CREATE语句；</p><p>使用<code>SHOW PROCEDURE STATUS;</code></p><p>可以显示列出<strong>所有</strong>的存储过程，包括创建时间，由谁创建等信息；</p><p>为了显示相关数据，可以使用通配符匹配：<br><code>SHOW PROCEDURE STATUS LIKE &#39;ordertotal&#39;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+-----------+----------------+---------------------+---------------------+---------------+-------------------------------------------+----------------------+----------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Db          <span class="operator">|</span> Name       <span class="operator">|</span> Type      <span class="operator">|</span> Definer        <span class="operator">|</span> Modified            <span class="operator">|</span> Created             <span class="operator">|</span> Security_type <span class="operator">|</span> Comment                                   <span class="operator">|</span> character_set_client <span class="operator">|</span> collation_connection <span class="operator">|</span> Database <span class="keyword">Collation</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+-----------+----------------+---------------------+---------------------+---------------+-------------------------------------------+----------------------+----------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> crashcourse <span class="operator">|</span> ordertotal <span class="operator">|</span> <span class="keyword">PROCEDURE</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-09</span><span class="number">-29</span> <span class="number">09</span>:<span class="number">10</span>:<span class="number">20</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-09</span><span class="number">-29</span> <span class="number">09</span>:<span class="number">10</span>:<span class="number">20</span> <span class="operator">|</span> DEFINER       <span class="operator">|</span> Obtain <span class="keyword">order</span> total, optionally adding tax <span class="operator">|</span> utf8mb4              <span class="operator">|</span> utf8mb4_0900_ai_ci   <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+-----------+----------------+---------------------+---------------------+---------------+-------------------------------------------+----------------------+----------------------+--------------------+</span></span><br></pre></td></tr></table></figure><h2 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h2><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>MySQL检索操作返回一组称为结果集的行。这组返回的行都是与SQL语句相匹配的行（零行或多行）。使用简单的SELECT语句，例如，没有办法得到第一行、下一行或前10行，也不存在每次一行地处理所有行的简单方法（相对于成批地处理它们）。</p><p>有时，需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。游标（cursor）是一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p><p>游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改。</p><blockquote><p><strong>只能用于存储过程</strong> 不像多数DBMS，MySQL游标只能用于存储过程（和函数）。</p></blockquote><h3 id="使用游标-1"><a href="#使用游标-1" class="headerlink" title="使用游标"></a>使用游标</h3><p>使用游标需要以下几个步骤：</p><ul><li>在能够使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，它只是定义要使用的SELECT语句。</li><li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的SELECT语句把数据实际检索出来。</li><li>对于填有数据的游标，根据需要取出（检索）各行。</li><li>在结束游标使用时，必须关闭游标。</li></ul><h4 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h4><p>使用<code>DECLARE</code>语句可以创建游标，DECLARE命名游标，并定义了相应的SELECT语句，根据需要可选择带WHERE和其他的子句。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure><p>这个存储过程并没有做很多事情，DECLARE语句用来定义和命名游标，这里为ordernumbers。存储过程处理完成后，游标就消失（因为它局限于存储过程）。</p><p>在定义游标之后，可以打开它。</p><h4 id="打开和关闭游标"><a href="#打开和关闭游标" class="headerlink" title="打开和关闭游标"></a>打开和关闭游标</h4><p>使用<code>OPEN CURSOR</code>语句来打开游标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> ordernumbers;</span><br></pre></td></tr></table></figure><p>关闭游标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> ordernumbers;</span><br></pre></td></tr></table></figure><p>隐含关闭：</p><h4 id="使用游标数据"><a href="#使用游标数据" class="headerlink" title="使用游标数据"></a>使用游标数据</h4><p>对该存储过程进行修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure><p>此存储过程中：</p><p>其中FETCH用来检索当前行的order_num列（将自动从第一行开始）到一个名为o的局部声明的变量中。对检索出的数据不做任何处理。</p><p>再将其进行修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- Declare local variables</span></span><br><span class="line"><span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line"><span class="comment">-- Declare the cursor</span></span><br><span class="line"><span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="comment">-- Declare continue handler</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- Open the cursor</span></span><br><span class="line"><span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"><span class="comment">-- Loop through all rows</span></span><br><span class="line">REPEAT</span><br><span class="line"><span class="comment">-- Get order number</span></span><br><span class="line"><span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line"><span class="comment">-- End of loop</span></span><br><span class="line">UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="comment">-- Close the cursor</span></span><br><span class="line"><span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>与前一个例子一样，这个例子使用FETCH检索当前order_num到声明的名为o的变量中。但与前一个例子不一样的是，这个例子中的FETCH是在REPEAT内，因此它反复执行直到done为真（由UNTILdone END REPEAT;规定）。为使它起作用，用一个DEFAULT 0（假，不结束）定义变量done。那么，done怎样才能在结束时被设置为真呢？答案是用以下语句：</p><p><code>DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done=1;</code></p><p>这条语句定义了一个CONTINUE HANDLER，它是在条件出现时被执行的代码。这里，它指出当SQLSTATE ‘02000’出现时，SET done=1。SQLSTATE’02000’是一个未找到条件，当REPEAT由于没有更多的行供循环而不能继续时，出现这个条件。</p><p>如果调用这个存储过程，它将定义几个变量和一个CONTINUEHANDLER，定义并打开一个游标，重复读取所有行，然后关闭游标。如果一切正常，你可以在循环内放入任意需要的处理（在FETCH语句之后，循环结束之前）。</p><p>为了把这些内容组织起来，下面给出我们的游标存储过程样例的更进一步修改的版本，这次对取出的数据进行某种实际的处理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line">   <span class="comment">-- Declare local variables</span></span><br><span class="line">   <span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> t <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">   <span class="comment">-- Declare the cursor</span></span><br><span class="line">   <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">   <span class="keyword">FOR</span></span><br><span class="line">   <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">   <span class="comment">-- Declare continue handler</span></span><br><span class="line">   <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">   <span class="comment">-- If exists table then delete it;</span></span><br><span class="line">   <span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> ordertotals;</span><br><span class="line">   <span class="comment">-- Create a table to store the results</span></span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ordertotals</span><br><span class="line">      (order_num <span class="type">INT</span>, total_tax <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line">   <span class="comment">-- Open the cursor</span></span><br><span class="line">   <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line">   <span class="comment">-- Loop through all rows</span></span><br><span class="line">   REPEAT</span><br><span class="line">      <span class="comment">-- Get order number</span></span><br><span class="line">      <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line">      <span class="comment">-- Get the total for this order</span></span><br><span class="line">      <span class="keyword">CALL</span> ordertotal(o, <span class="number">1</span>, t);</span><br><span class="line">      <span class="comment">-- Insert order and total into ordertotals</span></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num, total_tax)</span><br><span class="line">      <span class="keyword">VALUES</span>(o, t);</span><br><span class="line">   <span class="comment">-- End of loop</span></span><br><span class="line">   UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line">   <span class="comment">-- Close the cursor</span></span><br><span class="line">   <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们增加了另一个名为t的变量（存储每个订单的合计）。此存储过程还在运行中创建了一个新表（如果它不存在的话），名为ordertotals。这个表将保存存储过程生成的结果。FETCH像以前一样取每个order_num，然后用CALL执行另一个存储过程来计算每个订单的带税的合计（结果存储到t）。最后，用INSERT保存每个订单的订单号和合计。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_tax <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> order_num <span class="operator">|</span> total_tax <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span>   <span class="number">1060.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span>    <span class="number">158.86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span>    <span class="number">132.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span>    <span class="number">132.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span>     <span class="number">58.30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20009</span> <span class="operator">|</span>     <span class="number">40.78</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>BUG FIXED:</p><p>参考：<a href="https://stackoverflow.com/questions/16900482/mysql-cursor-fetching-same-result-twice">loops - MySQL cursor fetching same result twice - Stack Overflow</a></p><p>此处存在BUG，查看可以发现，order_num被索引了两次，但是orders中的order_num作为主键肯定是唯一值，因此考虑是该使用游标的存储过程中出现了问题：</p><p>我们可以看到，此处的REPEAT循环中，是最后再判断条件，即类似于do while语句，我首先想到能否修改为while语句，来修复bug，但是在尝试后，仍然有该bug。</p><p>在分析语句后，我发现游标在<code>FETCH</code>语句时被调用，此时，游标向后移动指向元素，并取出值，当表已经被遍历完成后，此时游标发现<code>NOT FOUNT</code>（已经遍历完成），之后设置的 <code>CONTINUE HANDLER</code> 将done置为true，此时FETCH并未得到值，因此变量o仍然是最后一排的<code>order_num</code>的值，之后继续执行导入到新表中的操作，因此最后一排会有两次重复。</p><p>为了修复这个bug，可以将存储过程做如下修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`localhost` <span class="keyword">PROCEDURE</span> `processorders`()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">-- Declare local variables</span></span><br><span class="line">   <span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> t <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">   <span class="comment">-- Declare the cursor</span></span><br><span class="line">   <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">   <span class="keyword">FOR</span></span><br><span class="line">   <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">   <span class="comment">-- Declare continue handler</span></span><br><span class="line">   <span class="comment">-- SQLSTATE &#x27;02000&#x27;</span></span><br><span class="line">   <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"> <span class="comment">-- If exists table then delete it;</span></span><br><span class="line"> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> ordertotals;</span><br><span class="line">   <span class="comment">-- Create a table to store the results</span></span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ordertotals</span><br><span class="line">      (order_num <span class="type">INT</span>, total_tax <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line">   <span class="comment">-- Open the cursor</span></span><br><span class="line">   <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line">   <span class="comment">-- Loop through all rows</span></span><br><span class="line">   WHILE <span class="keyword">NOT</span> done DO</span><br><span class="line">      <span class="comment">-- Get order number</span></span><br><span class="line">      <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line">      <span class="comment">-- Get the total for this order</span></span><br><span class="line">IF <span class="operator">!</span>done <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">CALL</span> ordertotal(o, <span class="number">1</span>, t);</span><br><span class="line"><span class="comment">-- Insert order and total into ordertotals</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num, total_tax)</span><br><span class="line"><span class="keyword">VALUES</span>(o, t);</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">   <span class="comment">-- End of WHILE</span></span><br><span class="line">   <span class="keyword">END</span> WHILE;</span><br><span class="line">   <span class="comment">-- Close the cursor</span></span><br><span class="line">   <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>此时Bug被修复，最后一行只会显示一次；</p></blockquote><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><blockquote><p><strong>需要MySQL 5</strong> 对触发器的支持是在MySQL 5中增加的。因此，触发器适用于MySQL 5或之后的版本。</p></blockquote><p>MySQL语句在需要被执行，存储过程也是如此。但是，如果你想要某条语句在事件发生时自动执行，例如：</p><ul><li>新增记录时提示</li><li>删除记录时记录删除数据到另一张表【备份到另一张表】</li><li>修改记录时检验【保证数据的一致性（大小写、格式等）】</li></ul><p>触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句（或位于BEGIN和END语句之间的一组语句）：</p><ul><li>DELETE</li><li>INSERT</li><li>UPDATE</li></ul><p>其他SQL语句不支持触发器。</p><p><code>此外只有表才支持触发器!视图，临时表均不支持。</code></p><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>创建触发器需要四个信息：</p><ul><li>唯一的<strong>触发器名</strong>；</li><li>触发器<strong>关联的表</strong>；</li><li>触发器应该<strong>响应的活动</strong>（<code>DELETE</code> 、<code>INSERT</code> 或<code>UPDATE</code> ）；</li><li>触发器<strong>何时执行</strong>（处理之前<code>BEFORE</code>或之后<code>AFTER</code>）。</li></ul><blockquote><p><strong>保持每个数据库的触发器名唯一</strong> 在MySQL 5中，触发器名必须在每个表中唯一，但不是在每个数据库中唯一。这表示同一数据库中的两个表可具有相同名字的触发器。这在其他每个数据库触发器名必须唯一的DBMS中是不允许的，而且以后的MySQL版本很可能会使命名规则更为严格。因此，现在最好是在数据库范围内使用唯一的触发器名。</p></blockquote><p>触发器使用<code>CREATE TRIGGER</code>语句创建。</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Product added&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此语句中: <code>CREATE TRIGGER</code> 用来创建名为<code>newproduct</code> 的新触发器。触发器可在一个操作发生之前或之后执行，这里给出了<code>AFTER INSERT</code> ，所以此触发器将在<code>INSERT</code> 语句成功执行后执行。这个触发器还指定<code>FOR EACH ROW</code> ，因此代码对每个插入行执行。在这个例子中，文本<code>Product added</code> 将对每个插入的行显示一次。</p><p>为了测试这个触发器，使用INSERT语句添加一行或多行到products中，你将看到对每个成功的插入，显示Product added消息。</p><blockquote><p>注意：在MySQL8版本中，不允许触发器返回一个结果集，因此需要用到变量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Product added&#x27;</span> <span class="keyword">INTO</span> <span class="variable">@temp</span>_var;<span class="comment">-- 将结果存入变量中</span></span><br></pre></td></tr></table></figure><p>之后使用语句查询：<code>SELECT @temp_var;</code></p></blockquote><blockquote><p><strong>触发器失败</strong> 如果BEFORE触发器失败，则MySQL将不执行请求的操作。此外，如果BEFORE触发器或语句本身失败，MySQL将不执行AFTER触发器（如果有的话）。</p></blockquote><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p>使用语句：<code>DROP TRIGGER newproduct;</code></p><p>触发器不能更新或覆盖，修改一个触发器，必须要先删除它，然后再重新创建。</p><h3 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h3><h4 id="INSERT触发器"><a href="#INSERT触发器" class="headerlink" title="INSERT触发器"></a>INSERT触发器</h4><p>INSERT触发器在INSERT语句执行之前或之后执行。</p><ul><li>在INSERT触发器代码内，可引用一个名为<code>NEW</code>的虚拟表，访问被插入的行；</li><li>在<code>BEFORE INSERT</code> 触发器中，NEW中的值也可以被更新（允许更改被插入的值）；</li><li>对于<code>AUTO_INCREMENT</code> 列，NEW在INSERT执行之前包含0 ，在INSERT执行之后包含新的自动生成值。</li></ul><p>在创建表的章节中提到过可以使用<code>AUTO_INCREMENT</code>来自动赋予主键值，但是该值不好被确认：</p><p>因此可以使用如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> neworder AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> NEW.order_num <span class="keyword">INTO</span> <span class="variable">@order</span>_num;</span><br></pre></td></tr></table></figure><p><code>NEW</code>即当前插入的行，因此选择NEW.order_num即可得到所需要的当前值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders ( order_date, cust_id )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( NOW(), <span class="number">10001</span> );</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="variable">@order</span>_num;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="number">20010</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>BEFORE或AFTER？</strong> 通常，将BEFORE用于数据验证和净化（目的是保证插入表中的数据确实是需要的数据）。本提示也适用于UPDATE触发器。</p></blockquote><h4 id="DELETE触发器"><a href="#DELETE触发器" class="headerlink" title="DELETE触发器"></a>DELETE触发器</h4><ul><li>在DELETE触发器代码内，你可以引用一个名为OLD的虚拟表，访<br>问被删除的行；</li><li>OLD中的值全都是只读的，不能更新。</li></ul><p>将要被删除的数据保存到删除存档中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> archieve_orders ( </span><br><span class="line">order_num <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, </span><br><span class="line">order_date datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">cust_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( order_num ) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> deleteorder BEFORE <span class="keyword">DELETE</span> <span class="keyword">ON</span> orders <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> archieve_orders(order_num, order_date, cust_id)</span><br><span class="line"><span class="keyword">VALUES</span>(OLD.order_num, OLD.order_date, OLD.cust_id);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- delete data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- archieve_orders result;</span></span><br><span class="line"><span class="number">20010</span><span class="number">2021</span><span class="number">-10</span><span class="number">-03</span> <span class="number">14</span>:<span class="number">19</span>:<span class="number">44</span><span class="number">10001</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>多语句触发器</strong> 正如所见，触发器deleteorder使用BEGIN和END语句标记触发器体。这在此例子中并不是必需的，不过也没有害处。使用BEGIN END块的好处是触发器能容纳多条SQL语句（在BEGIN END块中一条挨着一条）。</p></blockquote><h4 id="UPDATE触发器"><a href="#UPDATE触发器" class="headerlink" title="UPDATE触发器"></a>UPDATE触发器</h4><ul><li>在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前（UPDATE语句前）的值，引用一个名为NEW的虚拟表访问新更新的值；</li><li>在BEFORE UPDATE触发器中，NEW中的值可能也被更新（允许更改将要用于UPDATE语句中的值）；</li><li>OLD中的值全都是只读的，不能更新。</li></ul><p>使用以下触发器保证UPDATE时，州名都是大写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors</span><br><span class="line">FOR EACH ROW SET NEW.vend_state = Upper(NEW.vend_state);</span><br></pre></td></tr></table></figure><h3 id="触发器的进一步介绍"><a href="#触发器的进一步介绍" class="headerlink" title="触发器的进一步介绍"></a>触发器的进一步介绍</h3><ul><li>与其他DBMS相比，MySQL 5中支持的触发器相当初级。未来的MySQL版本中有一些改进和增强触发器支持的计划。</li><li>创建触发器可能需要特殊的安全访问权限，但是，触发器的执行是自动的。如果INSERT、UPDATE或DELETE句能够执行，则相关的触发器也能执行。</li><li>应该用触发器来保证数据的一致性（大小写、格式等）。在触发器中执行这种类型的处理的优点是它总是进行这种处理，而且是透明地进行，与客户机应用无关。</li><li>触发器的一种非常有意义的使用是创建审计跟踪。使用触发器，把更改（如果需要，甚至还有之前和之后的状态）记录到另一个表非常容易。</li><li>遗憾的是，MySQL触发器中不支持CALL语句。这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器内。</li></ul><h2 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h2><p>可以使用COMMIT和ROLLBACK语句来管理事务处理：</p><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><blockquote><p><strong>并非所有引擎都支持事务处理</strong> MySQL支持几种基本的数据库引擎。并非所有引擎都支持明确的事务处理管理MyISAM和InnoDB是两种最常使用的引擎。前者不支持明确的事务处理管理，而后者支持。如果应用中需要事务处理功能，则一定要使用正确的引擎类型。</p></blockquote><p>假设需要执行以下操作：</p><p>(1) 检查数据库中是否存在相应的客户（从customers表查询），如果不存在则添加。<br>(2) 检索客户的ID。<br>(3) 添加一行到orders表，把它与客户ID关联。<br>(4) 检索orders表中赋予的新订单ID。<br>(5) 对于订购的每个物品在orderitems表中添加一行，通过检索出来的ID把它与orders表关联（以及通过产品ID与products表关联）。</p><p>假如由于某种数据库故障，导致这个过程没有完成，数据会出现什么状况呢？</p><p>如果故障发生在添加了客户之后，orders表添加之前，不会有什么问题。某些客户没有订单是完全合法的。在重新执行此过程时，所插入的客户记录将被检索和使用。可以有效地从出故障的地方开始执行此过程。</p><p>但是，如果故障发生在orders行添加之后，orderitems行添加之前，怎么办呢？现在，数据库中有一个空订单。更糟的是，如果系统在添加orderitems行之中出现故障。结果是数据库中存在不完整的订单，而且你还不知道。</p><p>所以我们需要使用事务管理，保证MySQL成批完成某些操作。利用事务处理，可以保证一组操作要么都不执行，要不作为整体都执行，若完全没有错误发生则进行回退（即撤销操作）将数据库恢复到安全的状态。</p><p>关于事务处理，有以下的关键词经常提及：</p><ul><li>事务（transaction）指一组SQL语句；</li><li>回退（rollback）指撤销指定SQL语句的过程；</li><li>提交（commit）指将未存储的SQL语句结果写入数据库表；</li><li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</li></ul><h3 id="控制事务处理"><a href="#控制事务处理" class="headerlink" title="控制事务处理"></a>控制事务处理</h3><p>管理事务处理的关键在于将SQL语句组分解为逻辑块，并明确规定数据何时应该回退，何时不应该回退。</p><p>MySQL 使用<code>START TRANSACTION</code>来进行事务的开始：</p><h4 id="使用ROLLBACK"><a href="#使用ROLLBACK" class="headerlink" title="使用ROLLBACK"></a>使用ROLLBACK</h4><p>MySQL使用<code>ROLLBACK</code>来进行回滚操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line">Query OK, <span class="number">6</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ROLLBACK</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> order_num <span class="operator">|</span> total_tax <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20005</span> <span class="operator">|</span>    <span class="number">158.86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20009</span> <span class="operator">|</span>     <span class="number">40.78</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20006</span> <span class="operator">|</span>     <span class="number">58.30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20007</span> <span class="operator">|</span>   <span class="number">1060.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span>    <span class="number">132.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20008</span> <span class="operator">|</span>    <span class="number">132.50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>显然，ROLLBACK只能在一个事务处理内使用（在执行一条STARTTRANSACTION命令之后）。</p><blockquote><p><strong>哪些语句可以回退</strong>？ 事务处理用来管理INSERT、UPDATE和DELETE语句。你不能回退SELECT语句。（这样做也没有什么意义。）你不能回退CREATE或DROP操作。事务处理块中可以使用这两条语句，但如果你执行回退，它们不会被撤销。</p></blockquote><h4 id="使用COMMIT"><a href="#使用COMMIT" class="headerlink" title="使用COMMIT"></a>使用COMMIT</h4><p>一般的MySQL语句都是直接对数据库表执行和编写的。即***隐含提交(implicit commit)***，即提交和保存操作是自动进行的。</p><p>但是在事务的处理块种，提交不会隐含地进行，为了明确提交的行为，请使用COMMIT语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在这个例子中，从系统中完全删除订单20010。因为涉及更新两个数据库表orders和orderItems，所以使用事务处理块来保证订单不被部分删除。最后的COMMIT语句仅在不出错时写出更改。如果第一条DELETE起作用，第二条失败，则DELETE不会提交（实际上，它是被自动撤销的）。</p><blockquote><p><strong>隐含事务关闭</strong> 当COMMIT或ROLLBACK语句执行后，事务会自动关闭（将来的更改会隐含提交）。</p></blockquote><h4 id="使用保留点"><a href="#使用保留点" class="headerlink" title="使用保留点"></a>使用保留点</h4><p>简单的ROLLBACK和COMMIT语句就可以写入或撤销整个事务处理。但是，只是对简单的事务处理才能这样做，更复杂的事务处理可能需要部分提交或回退。</p><p>为了支持回退部分事务处理，必须能在事务处理块种合适的位置放置占位符。需要回退时，可以只回退到某个占位符。</p><p>这些占位符被成为：保留点，可以使用<code>SAVEPOINT</code>来进行保留点的创建。</p><p><code>SAVEPOINT delete1;</code></p><p>每个保留点都取标识它的唯一名字，以便在回退时，MySQL知道要回退到何处。为了回退到保留点，可如下进行：</p><p><code>ROLLBACK TO delete1;</code></p><blockquote><p><strong>保留点越多越好</strong> 可以在MySQL代码中设置任意多的保留点，越多越好。为什么呢？因为保留点越多，你就越能按自己的意愿灵活地进行回退。</p></blockquote><blockquote><p><strong>释放保留点</strong> 保留点在事务处理完成（执行一条ROLLBACK或COMMIT）后自动释放。自MySQL 5以来，也可以用RELEASE SAVEPOINT明确地释放保留点。</p></blockquote><h4 id="更改默认的提交行为"><a href="#更改默认的提交行为" class="headerlink" title="更改默认的提交行为"></a>更改默认的提交行为</h4><p><strong>默认</strong>的MySQL行为是<strong>自动提交所有更改</strong>。换句话说，任何时候执行一条MySQL语句，该语句实际上都是针对表执行的，而且所做的更改立即生效。为指示MySQL不自动提交更改，需要使用以下语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;-- 设置为默认不提交</span><br><span class="line">SET autocommit=1;-- 设置为默认提交</span><br></pre></td></tr></table></figure><p><code>autocommit</code> 标志决定是否自动提交更改，不管有没有COMMIT语句。设置<code>autocommit</code> 为0（假）指示MySQL不自动提交更改（直到<code>autocommit</code> 被设置为真为止）。</p><blockquote><p><strong>标志为连接专用</strong> <code>autocommit</code> 标志是针对每个连接而不是服务器的。</p></blockquote><h2 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h2><h3 id="字符集和校对顺序"><a href="#字符集和校对顺序" class="headerlink" title="字符集和校对顺序"></a>字符集和校对顺序</h3><p>在讨论多种语言和字符集时，将会遇到以下重要术语：</p><ul><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对为规定字符如何比较的指令。</li></ul><h3 id="使用字符集和校对顺序"><a href="#使用字符集和校对顺序" class="headerlink" title="使用字符集和校对顺序"></a>使用字符集和校对顺序</h3><p>使用语句<code>SHOW CHARACTER SET;</code>可以显示所有可用地字符集以及每个字符集的描述和默认校对。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------+---------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Charset  <span class="operator">|</span> Description                     <span class="operator">|</span> <span class="keyword">Default</span> <span class="keyword">collation</span>   <span class="operator">|</span> Maxlen <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------+---------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> armscii8 <span class="operator">|</span> ARMSCII<span class="number">-8</span> Armenian              <span class="operator">|</span> armscii8_general_ci <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ascii    <span class="operator">|</span> US ASCII                        <span class="operator">|</span> ascii_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> big5     <span class="operator">|</span> Big5 Traditional Chinese        <span class="operator">|</span> big5_chinese_ci     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="type">binary</span>   <span class="operator">|</span> <span class="type">Binary</span> pseudo charset           <span class="operator">|</span> <span class="type">binary</span>              <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1250   <span class="operator">|</span> Windows Central European        <span class="operator">|</span> cp1250_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1251   <span class="operator">|</span> Windows Cyrillic                <span class="operator">|</span> cp1251_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1256   <span class="operator">|</span> Windows Arabic                  <span class="operator">|</span> cp1256_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1257   <span class="operator">|</span> Windows Baltic                  <span class="operator">|</span> cp1257_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp850    <span class="operator">|</span> DOS West European               <span class="operator">|</span> cp850_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp852    <span class="operator">|</span> DOS Central European            <span class="operator">|</span> cp852_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp866    <span class="operator">|</span> DOS Russian                     <span class="operator">|</span> cp866_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp932    <span class="operator">|</span> SJIS <span class="keyword">for</span> Windows Japanese       <span class="operator">|</span> cp932_japanese_ci   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> dec8     <span class="operator">|</span> <span class="type">DEC</span> West European               <span class="operator">|</span> dec8_swedish_ci     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eucjpms  <span class="operator">|</span> UJIS <span class="keyword">for</span> Windows Japanese       <span class="operator">|</span> eucjpms_japanese_ci <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> euckr    <span class="operator">|</span> EUC<span class="operator">-</span>KR Korean                   <span class="operator">|</span> euckr_korean_ci     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gb18030  <span class="operator">|</span> China <span class="type">National</span> Standard GB18030 <span class="operator">|</span> gb18030_chinese_ci  <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gb2312   <span class="operator">|</span> GB2312 Simplified Chinese       <span class="operator">|</span> gb2312_chinese_ci   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gbk      <span class="operator">|</span> GBK Simplified Chinese          <span class="operator">|</span> gbk_chinese_ci      <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> geostd8  <span class="operator">|</span> GEOSTD8 Georgian                <span class="operator">|</span> geostd8_general_ci  <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> greek    <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-7</span> Greek                <span class="operator">|</span> greek_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hebrew   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-8</span> Hebrew               <span class="operator">|</span> hebrew_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hp8      <span class="operator">|</span> HP West European                <span class="operator">|</span> hp8_english_ci      <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> keybcs2  <span class="operator">|</span> DOS Kamenicky Czech<span class="operator">-</span>Slovak      <span class="operator">|</span> keybcs2_general_ci  <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> koi8r    <span class="operator">|</span> KOI8<span class="operator">-</span>R Relcom Russian           <span class="operator">|</span> koi8r_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> koi8u    <span class="operator">|</span> KOI8<span class="operator">-</span>U Ukrainian                <span class="operator">|</span> koi8u_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin1   <span class="operator">|</span> cp1252 West European            <span class="operator">|</span> latin1_swedish_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin2   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-2</span> Central European     <span class="operator">|</span> latin2_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin5   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-9</span> Turkish              <span class="operator">|</span> latin5_turkish_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin7   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-13</span> Baltic              <span class="operator">|</span> latin7_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> macce    <span class="operator">|</span> Mac Central European            <span class="operator">|</span> macce_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> macroman <span class="operator">|</span> Mac West European               <span class="operator">|</span> macroman_general_ci <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sjis     <span class="operator">|</span> Shift<span class="operator">-</span>JIS Japanese              <span class="operator">|</span> sjis_japanese_ci    <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> swe7     <span class="operator">|</span> <span class="number">7</span>bit Swedish                    <span class="operator">|</span> swe7_swedish_ci     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tis620   <span class="operator">|</span> TIS620 Thai                     <span class="operator">|</span> tis620_thai_ci      <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ucs2     <span class="operator">|</span> UCS<span class="number">-2</span> Unicode                   <span class="operator">|</span> ucs2_general_ci     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ujis     <span class="operator">|</span> EUC<span class="operator">-</span>JP Japanese                 <span class="operator">|</span> ujis_japanese_ci    <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf16    <span class="operator">|</span> UTF<span class="number">-16</span> Unicode                  <span class="operator">|</span> utf16_general_ci    <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf16le  <span class="operator">|</span> UTF<span class="number">-16</span>LE Unicode                <span class="operator">|</span> utf16le_general_ci  <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf32    <span class="operator">|</span> UTF<span class="number">-32</span> Unicode                  <span class="operator">|</span> utf32_general_ci    <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf8     <span class="operator">|</span> UTF<span class="number">-8</span> Unicode                   <span class="operator">|</span> utf8_general_ci     <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf8mb4  <span class="operator">|</span> UTF<span class="number">-8</span> Unicode                   <span class="operator">|</span> utf8mb4_0900_ai_ci  <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------+---------------------+--------+</span></span><br></pre></td></tr></table></figure><p>查看完成的校对可以使用语句<code>SHOW COLLATION;</code></p><p>校对支持过于多，不在此处展示。<strong>例如，latin1对不同的欧洲语言有几种校对，而且许多校对出现两次，一次区分大小写（由_cs表示），一次不区分大小写（由_ci表示）。</strong></p><p>为了确定所用的字符集和校对，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;<span class="comment">-- 确定默认的字符集</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span>                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> character_set_client     <span class="operator">|</span> utf8mb4                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_connection <span class="operator">|</span> utf8mb4                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_database   <span class="operator">|</span> utf8mb4                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_filesystem <span class="operator">|</span> <span class="type">binary</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_results    <span class="operator">|</span> utf8mb4                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_server     <span class="operator">|</span> utf8mb4                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_system     <span class="operator">|</span> utf8mb3                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_sets_dir       <span class="operator">|</span> D:\SourceFiles\mysql\share\charsets\ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+--------------------------------------+</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;<span class="comment">-- 确定默认的校对</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name        <span class="operator">|</span> <span class="keyword">Value</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> collation_connection <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> collation_database   <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> collation_server     <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+--------------------+</span></span><br></pre></td></tr></table></figure><p>实际上，字符集很少是服务器范围（甚至数据库范围）的设置。不同的表，甚至不同的列都可能需要不同的字符集，而且两者都可以在创建表时指定。</p><p>为了给表指定字符集和校对，可使用带子句的<code>CREATE TABLE</code></p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure><p>此语句创建一个包含两列的表，并且指定一个默认字符集和一个校对顺序。</p><ul><li>如果指定CHARACTER SET和COLLATE两者，则使用这些值。</li><li>如果只指定CHARACTER SET，则使用此字符集及其默认的校对（如SHOW CHARACTER SET的结果中所示）。</li><li>如果既不指定CHARACTER SET，也不指定COLLATE，则使用数据库默认。</li></ul><p>除了能指定字符集和校对的表范围外，MySQL还允许对每个列设置它们：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">   column3    <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure><p><strong>临时支持大小写排序：</strong></p><p>如前所述，校对在对用ORDER BY子句检索出来的数据排序时起重要的作用。如果你需要用与创建表时不同的校对顺序排序特定的SELECT语句，可以在SELECT语句自身中进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lastname, firstname <span class="keyword">COLLATE</span> latin1_general_cs;<span class="comment">-- 临时指定校对为区分大小写</span></span><br></pre></td></tr></table></figure><blockquote><p>cs后缀区分大小写，而ci后缀不区分</p></blockquote><blockquote><p><strong>SELECT的其他COLLATE子句</strong> 除了这里看到的在ORDER BY子句中使用以外，COLLATE还可以用于GROUP BY、HAVING、聚集函数、别名等。</p></blockquote><h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p><strong>MySQL服务器的安全基础是：用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。换句话说，用户不能对过多的数据具有过多的访问权。</strong></p><ul><li>多数用户只需要对表进行读和写，但少数用户甚至需要能创建和删除表；</li><li>某些用户需要读表，但可能不需要更新表；</li><li>你可能想允许用户添加数据，但不允许他们删除数据；</li><li>某些用户（管理员）可能需要处理用户账号的权限，但多数用户不需要；</li><li>你可能想让用户通过存储过程访问数据，但不允许他们直接访问数据；</li><li>你可能想根据用户登录的地点限制对某些功能的访问。</li></ul><blockquote><p><strong>防止无意的错误</strong> 重要的是注意到，访问控制的目的不仅仅是防止用户的恶意企图。数据梦魇更为常见的是无意识错误的结果，如错打MySQL语句，在不合适的数据库中操作或其他一些用户错误。通过保证用户不能执行他们不应该执行的语句，访问控制有助于避免这些情况的发生。</p></blockquote><blockquote><p><strong>不要使用root</strong> 应该严肃对待root登录的使用。仅在绝对需要时使用它（或许在你不能登录其他管理账号时使用）。不应该在日常的MySQL操作中使用root。</p></blockquote><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><p>MySQL用户账号和信息存储在名为mysql的MySQL数据库中。一般不需要直接访问mysql数据库和表，但有时需要直接访问。</p><p>需要直接访问它的时机之一是在需要获得所有用户账号列表时。为此，可使用以下代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">USE mysql</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br></pre></td></tr></table></figure><h4 id="创建用户帐号"><a href="#创建用户帐号" class="headerlink" title="创建用户帐号"></a>创建用户帐号</h4><p>可以使用<code>CREATE USER</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> hello IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>指定散列口令</strong> <code>IDENTIFIED BY</code>指定的口令为纯文本，MySQL将在保存到user表之前对其进行加密。为了作为散列值指定口令，使用``IDENTIFIED BY PASSWORD`。</p></blockquote><p><strong>重命名用户账号</strong></p><p>可以使用<code>RENAME USER</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">USER</span> hello <span class="keyword">TO</span> dcm;</span><br></pre></td></tr></table></figure><h4 id="删除用户帐号"><a href="#删除用户帐号" class="headerlink" title="删除用户帐号"></a>删除用户帐号</h4><p>可以使用<code>DROP USER</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> dcm;</span><br></pre></td></tr></table></figure><h4 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h4><p>在创建用户账号后，必须接着分配访问权限。新创建的用户账号没有访问权限。它们能登录MySQL，但不能看到数据，不能执行任何数据库操作。</p><p>使用语句``SHOW GRANTS FOR user.name;`可以查看用户账号的权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> hello;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Grants <span class="keyword">for</span> hello@<span class="operator">%</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> `hello`@`<span class="operator">%</span>` <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="comment">-- 表示没有权限</span></span><br></pre></td></tr></table></figure><p>为了设置权限，需要使用GRANT语句。GRANT需要至少以下信息：</p><ul><li>要授予的权限；</li><li>被授予访问权限的数据库或表；</li><li>用户名。</li></ul><p>使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> hello;</span><br></pre></td></tr></table></figure><p>此语句允许用户<code>hello</code>在<code>crashcourse.*</code>中使用SELECT语句，通过只授予SELECT权限，用户<code>hello</code>对crashcourse数据库中的所有数据只具有只读访问权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> hello;</span><br><span class="line"><span class="comment">-- result</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Grants <span class="keyword">for</span> hello@<span class="operator">%</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> `hello`@`<span class="operator">%</span>`              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> `crashcourse`.<span class="operator">*</span> <span class="keyword">TO</span> `hello`@`<span class="operator">%</span>` <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- 增加了对表crashcourse的只读权限</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\DCM&gt; mysql -uhello -ppassword</span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 43</span><br><span class="line">Server version: 8.0.25 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| crashcourse        |</span><br><span class="line">| information_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>撤销权限</strong></p><p>使用<code>REVOKE</code>语句可以撤销特定的权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root.mysql<span class="operator">&gt;</span> <span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">FROM</span> hello;</span><br><span class="line">hello.mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>GRANT和REVOKE可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用<code>GRANT ALL</code>和<code>REVOKE ALL</code>；</li><li>整个数据库，使用<code>ON database.*</code>；</li><li>特定的表，使用<code>ON database.table</code>；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><table><thead><tr><th>权 限</th><th>说 明</th></tr></thead><tbody><tr><td>ALL</td><td>除GRANT OPTION 外的所有权限</td></tr><tr><td>ALTER</td><td>使用ALTER TABLE</td></tr><tr><td>ALTER ROUTINE</td><td>使用ALTER PROCEDURE 和DROP PROCEDURE</td></tr><tr><td>CREATE</td><td>使用CREATE TABLE</td></tr><tr><td>CREATE ROUTINE</td><td>使用CREATE PROCEDURE</td></tr><tr><td>CREATE TEMPORARY TABLES</td><td>使用CREATE TEMPORARY TABLE</td></tr><tr><td>CREATE USER</td><td>使用CREATE USER 、DROP USER 、RENAME USER 和REVOKE ALL PRIVILEGES</td></tr><tr><td>CREATE VIEW</td><td>使用CREATE VIEW</td></tr><tr><td>DELETE</td><td>使用DELETE</td></tr><tr><td>DROP</td><td>使用DROP TABLE</td></tr><tr><td>EXECUTE</td><td>使用CALL 和存储过程</td></tr><tr><td>FILE</td><td>使用SELECT INTO OUTFILE 和LOAD DATA INFILE</td></tr><tr><td>GRANT OPTION</td><td>使用GRANT 和REVOKE</td></tr><tr><td>INDEX</td><td>使用CREATE INDEX 和DROP INDEX</td></tr><tr><td>INSERT</td><td>使用INSERT</td></tr><tr><td>LOCK TABLES</td><td>使用LOCK TABLES</td></tr><tr><td>PROCESS</td><td>使用SHOW FULL PROCESSLIST</td></tr><tr><td>RELOAD</td><td>使用FLUSH</td></tr><tr><td>REPLICATION CLIENT</td><td>服务器位置的访问</td></tr><tr><td>REPLICATION SLAVE</td><td>由复制从属使用</td></tr><tr><td>SELECT</td><td>使用SELECT</td></tr><tr><td>SHOW DATABASES</td><td>使用SHOW DATABASES</td></tr><tr><td>SHOW VIEW</td><td>使用SHOW CREATE VIEW</td></tr><tr><td>SHUTDOWN</td><td>使用mysqladmin shutdown （用来关闭MySQL）</td></tr><tr><td>SUPER</td><td>使用CHANGE MASTER 、KILL 、LOGS 、PURGE 、MASTER 和SET GLOBAL 。还允许mysqladmin 调试登录</td></tr><tr><td>UPDATE</td><td>使用UPDATE</td></tr><tr><td>USAGE</td><td>无访问权限</td></tr></tbody></table><blockquote><p><strong>未来的授权</strong> 在使用GRANT和REVOKE时，用户账号必须存在，但对所涉及的对象没有这个要求。这允许管理员在创建数据库和表之前设计和实现安全措施。这样做的副作用是，当某个数据库或表被删除时（用DROP语句），相关的访问权限仍然存在。而且，如果将来重新创建该数据库或表，这些权限仍然起作用。</p></blockquote><blockquote><p><strong>简化多次授权可通过列出各权限并用逗号分隔</strong> 将多条GRANT语句串在一起，如下所示：</p><p><code>GRANT SELECT, INSERT ON crashcourse.* TO hello;</code></p></blockquote><h4 id="更改口令"><a href="#更改口令" class="headerlink" title="更改口令"></a>更改口令</h4><p>可以使用<code>SET PASSWORD</code>语句，对口令进行更换；</p><p>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uhello <span class="operator">-</span>ppassword</span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER USER &#x27;用户名&#x27; IDENTIFIED BY &#x27;新密码&#x27;;-- 8.0.25版本可执行语法</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> hello IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;<span class="comment">-- 样例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span></span><br><span class="line">UPDATE <span class="keyword">USER</span> <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;abc&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> <span class="operator">=</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h2><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>MySQL数据必须经常备份，由于MySQL数据库是基于磁盘的文件，因此使用普通的备份系统和例程就可以备份MySQL的数据；但是，由于这些文件总是处于打开和使用状态，普通的文件副本备份不一定总是有效。</p><ul><li>使用命令行实用程序mysqldump转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确地备份转储文件。</li><li>可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）。</li><li>可以使用MySQL的BACKUP TABLE或SELECT INTO OUTFILE转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，此系统文件必须不存在，否则会出错。数据可以用RESTORETABLE来复原。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">########## 备份表 ##########</span><br><span class="line">mysqldump <span class="operator">-</span>u username <span class="operator">-</span>p dbname table1 table2... <span class="operator">&gt;</span> BackupName.sql# 格式</span><br><span class="line"># 样例如下</span><br><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p crashcourse orders <span class="operator">&gt;</span> E:backupOrders.sql<span class="comment">-- 备份crashcourse.orders表</span></span><br><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p crashcourse <span class="operator">&gt;</span> E:backupCrashcourse.sql<span class="comment">-- 备份crashcourse数据库所有内容</span></span><br><span class="line"></span><br><span class="line">########## 备份数据库 ##########</span><br><span class="line">mysqldump <span class="operator">-</span>u username <span class="operator">-</span>p <span class="comment">--databases dbname1 dbname2 &gt; E:Backup.sql-- 同时备份多个数据库</span></span><br><span class="line"># 样例如下</span><br><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p <span class="comment">--databases db1 db2 &gt; E:backupdb1db2.sql-- 同时备份多个数据库</span></span><br><span class="line"></span><br><span class="line">########## 恢复数据库 ##########</span><br><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p [dbname] <span class="operator">&lt;</span> backup.sql# 格式</span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 dbtest <span class="operator">&lt;</span> E:backupOrders.sql</span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 crashcourse <span class="operator">&lt;</span>E:backupOrders.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 若产生报错，可以使用编辑器打开.sql脚本，将其编码转换为UTF-8，再进行恢复即可。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>首先刷新未写数据</strong> 为了保证所有数据被写到磁盘（包括索引数据），可能需要在进行备份前使用FLUSH TABLES语句。</p></blockquote><h3 id="进行数据库维护"><a href="#进行数据库维护" class="headerlink" title="进行数据库维护"></a>进行数据库维护</h3><p>MySQL提供了一系列的语句，可以保护数据库的正确和正常运行；</p><ul><li><code>ANALYZE TABLE</code> ，用来检查表键是否正确。<code>ANALYZE TABLE</code> 返回如下所示的状态信息：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ANALYZE <span class="keyword">TABLE</span> orders;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>              <span class="operator">|</span> Op      <span class="operator">|</span> Msg_type <span class="operator">|</span> Msg_text <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> crashcourse.orders <span class="operator">|</span> analyze <span class="operator">|</span> status   <span class="operator">|</span> OK       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------+----------+</span></span><br></pre></td></tr></table></figure><ul><li><code>CHECK TABLE</code>用来针对许多问题对表进行检查。在MyISAM表上还对索引进行检查。CHECK TABLE支持一系列的用于MyISAM表的方式。<code>CHANGED</code>检查自最后一次检查以来改动过的表。<code>EXTENDED</code>执行最彻底的检查，<code>FAST</code>只检查未正常关闭的表，<code>MEDIUM</code>检查所有被删除的链接并进行键检验，<code>QUICK</code>只进行快速扫描。如下所示，CHECKTABLE发现和修复问题：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> orders, orderitems;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>                  <span class="operator">|</span> Op    <span class="operator">|</span> Msg_type <span class="operator">|</span> Msg_text <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> crashcourse.orders     <span class="operator">|</span> <span class="keyword">check</span> <span class="operator">|</span> status   <span class="operator">|</span> OK       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> crashcourse.orderitems <span class="operator">|</span> <span class="keyword">check</span> <span class="operator">|</span> status   <span class="operator">|</span> OK       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+----------+----------+</span></span><br></pre></td></tr></table></figure><ul><li>如果<code>MyISAM</code> 表访问产生不正确和不一致的结果，可能需要用<code>REPAIR TABLE</code> 来修复相应的表。这条语句不应该经常使用，如果需要经常使用，可能会有更大的问题要解决。</li><li>如果从一个表中删除大量数据，应该使用<code>OPTIMIZE TABLE</code> 来收回所用的空间，从而优化表的性能。</li></ul><h3 id="诊断启动问题"><a href="#诊断启动问题" class="headerlink" title="诊断启动问题"></a>诊断启动问题</h3><p>服务器启动问题通常在对MySQL配置或服务器本身进行更改时出现。MySQL在这个问题发生时报告错误，但由于多数MySQL服务器是作为系统进程或服务自动启动的，这些消息可能看不到。</p><p>在排除系统启动问题时，首先应该尽量用手动启动服务器。MySQL服务器自身通过在命令行上执行<code>mysqld</code> 启动。下面是几个重要的<code>mysqld</code> 命令行选项：</p><ul><li><code>--help</code> 显示帮助——一个选项列表；</li><li><code>--safe-mode</code> 装载减去某些最佳配置的服务器；</li><li><code>--verbose</code> 显示全文本消息（为获得更详细的帮助消息与<code>--help</code> 联合使用）；</li><li><code>--version</code> 显示版本信息然后退出。</li></ul><h3 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h3><p>MySQL维护管理员依赖的一系列日志文件。主要的日志文件有以下几种。</p><ul><li>错误日志。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为<code>hostname.err</code>，位于<code>data</code> 目录中。此日志名可用<code>--log-error</code> 命令行选项更改。</li><li>查询日志。它记录所有MySQL活动，在诊断问题时非常有用。此日志文件可能会很快地变得非常大，因此不应该长期使用它。此日志通常名为<code>hostname.log</code> ，位于<code>data</code> 目录中。此名字可以用<code>--log</code> 命令行选项更改。</li><li>二进制日志。它记录更新过数据（或者可能更新过数据）的所有语句。此日志通常名为<code>hostname-bin</code> ，位于<code>data</code> 目录内。此名字可以用<code>--log-bin</code> 命令行选项更改。注意，这个日志文件是MySQL 5中添加的，以前的MySQL版本中使用的是更新日志。</li><li>缓慢查询日志。顾名思义，此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为<code>hostname-slow.log</code> ，位于<code>data</code> 目录中。此名字可以用<code>--log-slow-queries</code> 命令行选项更改。</li></ul><p>在使用日志时，可用<code>FLUSH LOGS</code> 语句来刷新和重新开始所有日志文件。</p><h2 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h2><p>以下内容并不能完全决定MySQL的性能。此处仅通过回顾前面各章的重点，提供进行性能优化探讨和分析的一个出发点。</p><ul><li>首先，MySQL（与所有DBMS一样）具有特定的硬件建议。在学习和研究MySQL时，使用任何旧的计算机作为服务器都可以。但对用于生产的服务器来说，应该坚持遵循这些硬件建议。</li><li>一般来说，关键的生产DBMS应该运行在自己的专用服务器上。</li><li>MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用<code>SHOW VARIABLES;</code> 和<code>SHOW STATUS;</code> 。）</li><li>MySQL一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用<code>SHOW PROCESS LIST</code> 显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用<code>KILL</code> 命令终结某个特定的进程（使用这个命令需要作为管理员登录）。【此处测试无法使用SHOW命令】</li><li>总是有不止一种方法编写同一条<code>SELECT</code> 语句。应该试验联结、并、子查询等，找出最佳的方法。</li><li>使用EXPLAIN语句让MySQL解释它将如何执行一条SELECT语句。</li><li>一般来说，<strong>存储过程</strong>执行得比一条一条地执行其中的各条MySQL语句快。</li><li>应该总是使用正确的数据类型。</li><li>决不要检索比需求还要多的数据。换言之，不要用<code>SELECT*</code> （除非你真正需要每个列）。</li><li>有的操作（包括<code>INSERT</code> ）支持一个可选的<code>DELAYED</code> 关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li><li>在导入数据时，应该关闭自动提交。你可能还想删除索引（包括<code>FULLTEXT</code> 索引），然后在导入完成后再重建它们。</li><li>必须索引数据库表以改善数据检索的性能。确定索引什么不是一件微不足道的任务，需要分析使用的<code>SELECT</code> 语句以找出重复的<code>WHERE</code> 和<code>ORDER BY</code> 子句。如果一个简单的<code>WHERE</code> 子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li><li>你的<code>SELECT</code> 语句中有一系列复杂的<code>OR</code> 条件吗？通过使用多条<code>SELECT</code> 语句和连接它们的<code>UNION</code>语句【组合查询】，你能看到极大的性能改进。</li><li><strong>索引改善数据检索的性能，但损害数据插入、删除和更新的性能。</strong>如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除。）</li><li><code>LIKE</code> 很慢。一般来说，最好是使用<code>FULLTEXT</code>【全文索引】 而不是<code>LIKE</code> 。</li><li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li><li>最重要的规则就是，<strong>每条规则在某些条件下都会被打破</strong>。</li></ul><h2 id="附录：数据类型"><a href="#附录：数据类型" class="headerlink" title="附录：数据类型"></a>附录：数据类型</h2><h3 id="串数据类型"><a href="#串数据类型" class="headerlink" title="串数据类型"></a>串数据类型</h3><p>最常用的数据类型是串数据类型。它们存储串，如名字、地址、电话号码、邮政编码等。有两种基本的串类型，分别为定长串和变长串。</p><p>定长串接受长度固定的字符串，其长度是在创建表时指定的。例如，名字列可允许30个字符，而社会安全号列允许11个字符（允许的字符数目中包括两个破折号）。<strong>定长列不允许多于指定的字符数目，它们分配的存储空间与指定的一样多</strong>。因此，如果串<code>HELLO WORLD</code> 存储到30个字符的名字字段，也占30个字符的空间，而<code>CHAR</code> 属于定长串类型。</p><p>变长串存储可变长度的文本。有些变长数据类型具有最大的定长，而有些则是完全变长的。不管是哪种，只有指定的数据得到保存（额外的数据不保存）<code>TEXT</code> 属于变长串类型。</p><p>既然变长数据类型这样灵活，为什么还要使用定长数据类型？回答是因为性能。<strong>MySQL处理定长列远比处理变长列快得多。此外，MySQL不允许对变长列（或一个列的可变部分）进行索引。这也会极大地影响性能。</strong></p><table><thead><tr><th>数据类型</th><th>说 明</th></tr></thead><tbody><tr><td>CHAR</td><td>1～255个字符的定长串。<strong>它的长度必须在创建时指定，否则MySQL假定为CHAR(1)</strong></td></tr><tr><td>ENUM</td><td>接受最多64 K个串组成的一个预定义集合的某个串</td></tr><tr><td>LONGTEXT</td><td>与TEXT 相同，但最大长度为4 GB</td></tr><tr><td>MEDIUMTEXT</td><td>与TEXT 相同，但最大长度为16 K</td></tr><tr><td>SET</td><td>接受最多64个串组成的一个预定义集合的零个或多个串</td></tr><tr><td>TEXT</td><td>最大长度为64 K的变长文本</td></tr><tr><td>TINYTEXT</td><td>与TEXT 相同，但最大长度为255字节</td></tr><tr><td>VARCHAR</td><td>长度可变， 最多不超过255 字节。如果在创建时指定为VARCHAR(n) ，则可存储0 到n 个字符的变长串（其中n ≤255）</td></tr></tbody></table><blockquote><p><strong>使用引号</strong> 不管使用何种形式的串数据类型，串值都必须括在引号内（通常单引号更好）。</p></blockquote><blockquote><p><strong>当数值不是数值时</strong> 你可能会认为电话号码和邮政编码应该存储在数值字段中（数值字段只存储数值数据），但是，这样做却是不可取的。如果在数值字段中存储邮政编码01234，则保存的将是数值1234，实际上丢失了一位数字。需要遵守的基本规则是：<strong>如果数值是计算（求和、平均等）中使用的数值，则应该存储在数值数据类型列中。如果作为字符串（可能只包含数字）使用，则应该保存在串数据类型列中。</strong></p></blockquote><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><p>数值数据类型存储数值。MySQL支持多种数值数据类型，每种存储的数值具有不同的取值范围。显然，支持的取值范围越大，所需存储空间越多。此外，有的数值数据类型支持使用十进制小数点（和小数），而有的则只支持整数。</p><table><thead><tr><th>数据类型</th><th>说 明</th></tr></thead><tbody><tr><td>BIT</td><td>位字段，1～64位。（在MySQL 5之前，BIT 在功能上等价于TINYINT</td></tr><tr><td>BIGINT</td><td>整数值，支持−9223372036854775808～9223372036854775807（如果是UNSIGNED ，为0～18446744073709551615）的数</td></tr><tr><td>BOOLEAN （或BOOL ）</td><td>布尔标志，或者为0或者为1，主要用于开/关（on/off）标志</td></tr><tr><td>DECIMAL （或DEC ）</td><td>精度可变的浮点值</td></tr><tr><td>DOUBLE</td><td>双精度浮点值</td></tr><tr><td>FLOAT</td><td>单精度浮点值</td></tr><tr><td>INT （或INTEGER ）</td><td>整数值，支持−2147483648～2147483647（如果是UNSIGNED ，为0～4294967295）的数</td></tr><tr><td>MEDIUMINT</td><td>整数值，支持−8388608～8388607（如果是UNSIGNED ，为0～16777215）的数</td></tr><tr><td>REAL</td><td>4字节的浮点值</td></tr><tr><td>SMALLINT</td><td>整数值，支持−32768～32767（如果是UNSIGNED ，为0～65535）的数</td></tr><tr><td>TINYINT</td><td>整数值，支持−128～127（如果为UNSIGNED ，为0～255）的数</td></tr></tbody></table><blockquote><p><strong>不使用引号</strong> 与串不一样，数值不应该括在引号内。</p></blockquote><blockquote><p><strong>存储货币数据类型</strong> MySQL中没有专门存储货币的数据类型，一般情况下使用<code>DECIMAL(8,2)</code></p></blockquote><h3 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h3><p>MySQL使用专门的数据类型来存储日期和时间值（见表D-3）。</p><p><strong>表D-3 日期和时间数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说 明</th></tr></thead><tbody><tr><td>DATE</td><td>表示1000-01-01～9999-12-31 的日期，格式为YYYY-MM-DD</td></tr><tr><td>DATETIME</td><td>DATE 和TIME 的组合</td></tr><tr><td>TIMESTAMP</td><td>功能和DATETIME 相同（但范围较小）</td></tr><tr><td>TIME</td><td>格式为HH:MM:SS</td></tr><tr><td>YEAR</td><td>用2位数字表示，范围是70（1970年）～69（2069年），用4位数字表示，范围是1901年～2155年</td></tr></tbody></table><h3 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h3><p>二进制数据类型可存储任何数据（甚至包括二进制信息），如图像、多媒体、字处理文档等（参见表D-4）。</p><p><strong>表D-4 二进制数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说 明</th></tr></thead><tbody><tr><td>BLOB</td><td>Blob最大长度为64 KB</td></tr><tr><td>MEDIUMBLOB</td><td>Blob最大长度为16 MB</td></tr><tr><td>LONGBLOB</td><td>Blob最大长度为4 GB</td></tr><tr><td>TINYBLOB</td><td>Blob最大长度为255字节</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] 福塔(Forta, B.). MySQL必知必会[M]. 刘晓霞，钟鸣，译. —北京：人民邮电出版社，2009.1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP网络编程初探</title>
      <link href="/articles/TCP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/"/>
      <url>/articles/TCP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>TCP协议也是应用最广泛的协议，许多高级协议都是建立在TCP协议之上的，例如HTTP、SMTP等。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>IP协议是一个分组交换，它不保证可靠传输。而TCP协议是传输控制协议，它是面向连接的协议，支持可靠传输和双向通信。TCP协议是建立在IP协议之上的，简单地说，IP协议只负责发数据包，不保证顺序和正确性，而TCP协议负责控制数据包传输，它在传输数据之前需要先建立连接，建立连接后才能传输数据，传输完后还需要断开连接。TCP协议之所以能保证数据的可靠传输，是通过接收确认、超时重传这些机制实现的。并且，TCP协议允许双向通信，即通信双方可以同时发送和接收数据。</p><h2 id="JAVA网络编程——TCP协议"><a href="#JAVA网络编程——TCP协议" class="headerlink" title="JAVA网络编程——TCP协议"></a>JAVA网络编程——TCP协议</h2><h3 id="Socket套接字"><a href="#Socket套接字" class="headerlink" title="Socket套接字"></a>Socket套接字</h3><p>Socket 的原意是“插座”，在计算机通信领域，Socket 被翻译为“套接字”，它是计算机之间进行通信的一种约定或一种方式。通过 Socket 这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。</p><p>当操作系统接收到一个数据包的时候，如果只有IP地址，它没法判断应该发给哪个应用程序，所以，操作系统抽象出Socket接口，每个应用程序需要各自对应到不同的Socket，数据包才能根据Socket正确地发到对应的应用程序。使用Socket套接字可以在IP地址的不同的端口下进行通信。</p><p>一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。端口号总是由操作系统分配，它是一个0～65535之间的数字，其中，小于1024的端口属于特权端口，需要管理员权限，大于1024的端口可以由任意用户的应用程序打开。</p><p>使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，双方后续就可以随时发送和接收数据。</p><p>因此，当Socket连接成功地在服务器端和客户端之间建立后：</p><ul><li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li><li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li></ul><h2 id="C-S通信模式，TCP网络编程初探"><a href="#C-S通信模式，TCP网络编程初探" class="headerlink" title="C/S通信模式，TCP网络编程初探"></a>C/S通信模式，TCP网络编程初探</h2><h3 id="Server端："><a href="#Server端：" class="headerlink" title="Server端："></a>Server端：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Com.Dcm.Chat.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8866</span>); <span class="comment">// 监听指定端口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket sock = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            Thread t = <span class="keyword">new</span> Handler(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Socket sock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = <span class="keyword">this</span>.sock.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream output = <span class="keyword">this</span>.sock.getOutputStream()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Client &quot;</span> + sock.getRemoteSocketAddress() + <span class="string">&quot; has connect to Server &quot;</span></span><br><span class="line">                + sock.getLocalSocketAddress() + <span class="string">&quot; Success!&quot;</span>);</span><br><span class="line">                handle(input, output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                ioe.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;client disconnected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">        writer.write(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            String s = reader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;bye&quot;</span>)) &#123;      <span class="comment">//读取bye后断开连接</span></span><br><span class="line">                writer.write(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line">                writer.flush();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Instant ins = Instant.now();</span><br><span class="line">            ZonedDateTime zdt = ins.atZone(ZoneId.systemDefault());</span><br><span class="line">            System.out.println(zdt + <span class="string">&quot; &gt;&gt;&gt; &quot;</span> + s);</span><br><span class="line">            writer.write(<span class="string">&quot;ok: &quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client端："><a href="#Client端：" class="headerlink" title="Client端："></a>Client端：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Com.Dcm.Chat.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//centOS主机 ： 121.43.173.31; 本机IP：localhost或127.0.0.1;</span></span><br><span class="line">        Socket sock = <span class="keyword">new</span> Socket(<span class="string">&quot;121.43.173.31&quot;</span>, <span class="number">8866</span>); <span class="comment">// 连接指定服务器和端口</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream input = sock.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream output = sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sock.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;disconnected.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;[server] &quot;</span> + reader.readLine());</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>); <span class="comment">// 打印提示</span></span><br><span class="line">            String s = scanner.nextLine(); <span class="comment">// 读取一行输入</span></span><br><span class="line">            writer.write(s);</span><br><span class="line">            writer.newLine();</span><br><span class="line">            writer.flush();</span><br><span class="line">            String resp = reader.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;&lt;&lt; &quot;</span> + resp);</span><br><span class="line">            <span class="keyword">if</span> (resp.equals(<span class="string">&quot;bye&quot;</span>)) &#123;       <span class="comment">//读取bye后，客户端关闭连接</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署到服务器进行测试："><a href="#部署到服务器进行测试：" class="headerlink" title="部署到服务器进行测试："></a>部署到服务器进行测试：</h3><p>在部署到本地（localhost）测试成功后，我尝试在阿里云服务器上运行<code>Server</code>测试。</p><p>首先，使用xftp建立连接传输项目到服务器：</p><p><img src="1.jpg" alt="使用xftp建立连接传输项目到服务器"></p><p>之后使用Xshell连接到服务器对项目进行操作：</p><p>输入相关代码启动服务：</p><p><strong>注意：需要在阿里云控制台启用相关的端口，本次Server端使用8866端口，需要提前开启！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~]# cd /usr/local/src/ChatTogether</span><br><span class="line">[root@CentOS ChatTogether]# cd out/production/ChatTogether/</span><br><span class="line">[root@CentOS ChatTogether]# java Com.Dcm.Chat.Server.ServerDemo</span><br></pre></td></tr></table></figure><p>使用IDEA开启Client端，向Server端传输数据：</p><p><img src="2.jpg" alt="使用IDEA开启Client端，向Server端传输数据"></p><p>客户端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">D:\SourceFiles\Java\jdk-11.0.5\bin\java.exe &quot;-javaagent:D:\SourceFiles\JetBrains\IntelliJ IDEA 2021.1.1\lib\idea_rt.jar=61812:D:\SourceFiles\JetBrains\IntelliJ IDEA 2021.1.1\bin&quot; -Dfile.encoding=UTF-8 -classpath E:\ProgramDemo\ChatTogether\out\production\ChatTogether Com.Dcm.Chat.Client.ClientDemo</span><br><span class="line">[server] hello</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 你好，hello world！</span></span><br><span class="line">&lt;&lt;&lt; ok: 你好，hello world！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 不要回答！</span></span><br><span class="line">&lt;&lt;&lt; ok: 不要回答！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 消灭人类暴政，世界属于三体！</span></span><br><span class="line">&lt;&lt;&lt; ok: 消灭人类暴政，世界属于三体！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 我们是同志了！</span></span><br><span class="line">&lt;&lt;&lt; ok: 我们是同志了！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 北海，要多想！</span></span><br><span class="line">&lt;&lt;&lt; ok: 北海，要多想！</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 没关系的都一样。</span></span><br><span class="line">&lt;&lt;&lt; ok: 没关系的都一样。</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ChatTogether]# java Com.Dcm.Chat.Server.ServerDemo</span><br><span class="line">server is running...</span><br><span class="line">connected from /119.102.250.226:61814</span><br><span class="line">Client /119.102.250.226:61814 has connect to Server /172.30.89.4:8866 Success!</span><br><span class="line">2021-08-08T20:44:06.982581+08:00[Asia/Shanghai] &gt;&gt;&gt; 你好，hello world！</span><br><span class="line">2021-08-08T20:44:14.471235+08:00[Asia/Shanghai] &gt;&gt;&gt; 不要回答！</span><br><span class="line">2021-08-08T20:44:26.662957+08:00[Asia/Shanghai] &gt;&gt;&gt; 消灭人类暴政，世界属于三体！</span><br><span class="line">2021-08-08T20:44:33.162085+08:00[Asia/Shanghai] &gt;&gt;&gt; 我们是同志了！</span><br><span class="line">2021-08-08T20:44:47.791487+08:00[Asia/Shanghai] &gt;&gt;&gt; 北海，要多想！</span><br><span class="line">2021-08-08T20:44:59.515964+08:00[Asia/Shanghai] &gt;&gt;&gt; 没关系的都一样。</span><br></pre></td></tr></table></figure><blockquote><p>参考：廖雪峰Java教程 TCP编程 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1305207629676577">https://www.liaoxuefeng.com/wiki/1252599548343744/1305207629676577</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java网络编程 </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>二叉树有多种遍历方法，例如深度优先遍历，广度优先遍历，层次遍历等，本文将对这些遍历方式进行归纳。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><p>所谓遍历是指对树中所有结点的信息的访问，即依次对树中每个结点访问一次且仅访问一次，我们把这种对所有结点的访问称为遍历(traversal)。那么树的两种重要的遍历模式是深度优先遍历和广度优先遍历，深度优先一般用递归或堆栈，广度优先一般用队列。</p><p>我们对二叉树的结点做出如下所示的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> val; </span><br><span class="line">    TreeNode left; </span><br><span class="line">    TreeNode right; </span><br><span class="line">    TreeNode() &#123;&#125; </span><br><span class="line">    TreeNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val; </span><br><span class="line">        <span class="keyword">this</span>.left = left; </span><br><span class="line">        <span class="keyword">this</span>.right = right; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h2><p>深度优先遍历通常有以下三种方式，即先序遍历，中序遍历，后序遍历三种。</p><p><img src="Tree.jpg" alt="奇奇怪怪的二叉树"></p><p>例如如图所示的二叉树，若采用深度优先遍历，有三种方案：</p><ul><li>1.先序遍历，即根左右，先遍历根结点，再依次遍历左结点，右结点。</li><li>2.中序遍历，即左根右，先遍历左结点，再依次遍历根结点，右结点。</li><li>3.后序遍历，即左右根，先依次遍历左结点，右结点，最后再遍历根结点。</li></ul><p>若使用先序遍历，手动得到的结果为：57842913；若使用中序遍历，得到的结果为：87245913；若使用后序遍历，得到的结果为：82473195。</p><p>每一种深度优先遍历方案都有使用显式栈的非递归算法和递归算法。</p><blockquote><p>LeetCode上有关于深度优先遍历的题目，分别是：</p><ul><li>144.二叉树的前序遍历</li><li>145.二叉树的后序遍历</li><li>94.二叉树的中序遍历</li></ul></blockquote><h3 id="递归思路"><a href="#递归思路" class="headerlink" title="递归思路"></a>递归思路</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>递归思路都很简单，即使用递归的方式，依次访问根结点，左结点，右结点。其他的递归方法也与此基本相似。</p><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>所有的递归算法，都要按照三要素来书写：</p><p><strong>1.确定递归函数的参数与返回值</strong><br>即：确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。<br><strong>2.确定边界条件</strong><br>即：写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。<br><strong>3.确定递归的逻辑</strong><br>即：确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</p><p>以当前的先序遍历为例：</p><p><strong>1.确定递归函数的参数与返回值:</strong> 本题需要将所有的数据存入ArrayList中，因此并不需要返回值，返回值即<code>void</code>，需要的参数即为根结点的值<code>TreeNode cur</code>和<code>List list</code>。代码为<code>private void preorder(TreeNode cur, List list)</code></p><p><strong>2.确定边界条件:</strong> 边界条件即为若当前遍历的结点值为空，则直接return终止递归。<code>if (cur == NULL) return;</code></p><p><strong>3.确定递归的逻辑:</strong> 递归的逻辑即先访问根结点，再访问左结点，再访问右结点。因此调用的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.add(cur.val);              <span class="comment">//访问根结点，将其存入list</span></span><br><span class="line">preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br></pre></td></tr></table></figure><p>递归算法的时间复杂度为：<code>O(n)</code>，空间复杂度为：<code>O(n)</code>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode cur, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) &#123;       <span class="comment">//访问到了空结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(cur.val);      <span class="comment">//访问根结点</span></span><br><span class="line">        preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">        preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode cur, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) &#123;       <span class="comment">//访问到了空结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">        list.add(cur.val);      <span class="comment">//访问根结点</span></span><br><span class="line">        preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode cur, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) &#123;       <span class="comment">//访问到了空结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preorder(cur.left, list);       <span class="comment">//访问左结点</span></span><br><span class="line">        preorder(cur.right, list);      <span class="comment">//访问右结点</span></span><br><span class="line">        list.add(cur.val);      <span class="comment">//访问根结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归思路"><a href="#非递归思路" class="headerlink" title="非递归思路"></a>非递归思路</h3><p>以先序遍历为例：因为要在遍历完结点的左子树后接着遍历结点的右子树，为了能找到该结点，需要使用栈来进行暂存。中序和后序也都涉及到回溯，所以都需要用到栈。因此需要手动维护一个栈用来进行数据的暂存。</p><h4 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();     <span class="comment">//用来存放遍历的结果，即访问顺序</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();      <span class="comment">//用来暂存结点，便于继续搜索</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;     <span class="comment">//当栈不空或root不为null说明没有遍历完成</span></span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.add(root.val);     <span class="comment">//访问根结点将数值存入Arraylist</span></span><br><span class="line">                stack.push(root);       <span class="comment">//将root压入栈中，进行暂存</span></span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();     <span class="comment">//将栈中的结点出栈，准备对其右子树进行访问</span></span><br><span class="line">            root = root.right;      <span class="comment">//访问结点的右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 前序遍历，根左右，使用栈来实现前序遍历</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            TreeNode temp = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            result.add(temp.val);</span><br><span class="line">            stack.push(temp.right);</span><br><span class="line">            stack.push(temp.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">PreorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; List = <span class="keyword">new</span> ArrayList&lt;&gt;();     <span class="comment">//用来存放遍历的结果，即访问顺序</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();      <span class="comment">//用来暂存结点，便于继续搜索</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;     <span class="comment">//当栈不空或root不为null说明没有遍历完成</span></span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若上层出循环，说明已经遍历到左子树的最底层，此时可以将底层数据存入。</span></span><br><span class="line">            list.add(root.val);     <span class="comment">//访问底层结点</span></span><br><span class="line">            root = stack.pop();     <span class="comment">//将上一个结点出栈，尝试访问其右子树</span></span><br><span class="line">            root = root.right;      <span class="comment">//访问右结点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><h5 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h5><p>思路一则是后序遍历在决定是否可以访问当前结点的值的时候，需要考虑其左右子树是否都已经遍历完成。所以需要设置一个lastVisited标记。若lastVisited等于当前考查结点的右子树(说明右侧子树已经遍历完成)，或者当前表示该结点的左右子树都已经遍历完成，则可以访问当前结点。</p><p>因此可以使用如下代码进行后序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode lastVisited = root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;        <span class="comment">//压栈到左子树全部在栈中</span></span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.peek();        <span class="comment">//查看栈顶的元素，若栈顶元素右结点与lastVisited相等或右结点为null说明以遍历完成</span></span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="keyword">null</span> || root.right == lastVisited)&#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                lastVisited = root;</span><br><span class="line">                root = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.right;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h5><p>思路二算是一种简单的奇技淫巧，本质上并不算是后序遍历。我们可以思考：先序遍历是<code>根左右</code>我们可以调整代码的顺序使其很容易变成<code>根右左</code>反转list数组可以使得顺序变为<code>左右根</code>，我们发现此时再进行了两次简单的修改之后，由前序遍历变成了后序遍历。此时我们希望向List的头插入元素实现反转的操作，所以我们使用LinkedList可以有较好的时间性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();        <span class="comment">//使用链表便于头插性能较好</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();      <span class="comment">//使用栈进行结点的暂存</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);       <span class="comment">//暂存root结点</span></span><br><span class="line">                list.add(<span class="number">0</span>, root.val);      <span class="comment">//访问根结点，将结点内容头插加入链表中，实现由根右左到左右根的反转</span></span><br><span class="line">                root = root.right;      <span class="comment">//实现从先序遍历根左右到根右左的转变</span></span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();     <span class="comment">//获取栈顶结点</span></span><br><span class="line">            root = root.left;       <span class="comment">//范围左结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 后续遍历，左右根</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            stack.push(temp.left);</span><br><span class="line">            stack.push(temp.right);</span><br><span class="line">            result.add(<span class="number">0</span>, temp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法的时间性能略逊于后序遍历的一般解法。使用思路一在LeetCode中提交击败100% Java提交，此方法击败49.89%提交。</p><p>至此所有的非递归算法都保证了格式上的基本统一，方便记忆以及面试时的书写。</p><h2 id="二叉树的广度优先遍历"><a href="#二叉树的广度优先遍历" class="headerlink" title="二叉树的广度优先遍历"></a>二叉树的广度优先遍历</h2><p>在进行深度优先遍历的时候，我们知道了应该使用数据结构栈。那么如何进行广度优先遍历呢，我们可以使用队列这一数据结构。思路如下，首先根结点若不为空，则将根结点放入队列中，每次循环取出队列中的队首元素，将队首元素进行暂存，判断是否可以将该队首节点的左结点右结点入队列(不为null)，并进行计数。当前计数递减为0时，说明一层已经遍历完毕，可以对下一层进行遍历。依次进行相关操作，最终可以得到层序遍历的结果。</p><blockquote><p><strong>LeetCode题目 102.二叉树的层序遍历</strong><br>给你一个二叉树，请你返回其按<strong>层序遍历</strong>得到的节点值。(即逐层地，从左到右访问所有节点)。<br>例如[3,9,20,null,null,15,7]，应返回[ [3], [9,20], [15,7] ]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;      <span class="comment">//设置第一层的结点个数为1</span></span><br><span class="line">        queue.offer(root);      <span class="comment">//将头结点入队列</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                root = queue.poll();        <span class="comment">//将第i层结点出队列</span></span><br><span class="line">                row.add(root.val);          <span class="comment">//将第i层结点放入行中</span></span><br><span class="line">                <span class="keyword">if</span>(root.left != <span class="keyword">null</span>) &#123;     <span class="comment">//将第i+i层结点入队列</span></span><br><span class="line">                    temp++;</span><br><span class="line">                    queue.offer(root.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    temp++;</span><br><span class="line">                    queue.offer(root.right);</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            count = temp;</span><br><span class="line">            list.add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IKBC_C104键盘安装白色LED背光</title>
      <link href="/articles/IKBC_C104%E9%94%AE%E7%9B%98%E5%AE%89%E8%A3%85%E7%99%BD%E8%89%B2LED%E8%83%8C%E5%85%89/"/>
      <url>/articles/IKBC_C104%E9%94%AE%E7%9B%98%E5%AE%89%E8%A3%85%E7%99%BD%E8%89%B2LED%E8%83%8C%E5%85%89/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><h2 id="键盘的痛点及改灯的理由"><a href="#键盘的痛点及改灯的理由" class="headerlink" title="键盘的痛点及改灯的理由"></a>键盘的痛点及改灯的理由</h2><p>我在19年大一进入学校的时候购入了一把机械键盘，型号是IKBC C104。特色是轴体使用了cherry红轴，PBT键帽，非常适合我这种重度硫酸手的人，此外该键盘性价比极高，在200-300元价位中无出其右。但是有个痛点就是键盘没有带灯，寝室熄灯后敲代码会有些难受(虽然可以盲打，但是仍需要手指去寻找J和F的触点，摸黑还是很难受)因此决定尝试自行安装LED背光。</p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="键盘的拆卸"><a href="#键盘的拆卸" class="headerlink" title="键盘的拆卸"></a>键盘的拆卸</h2><p><img src="1.jpg" alt="IKBC C104键盘的外观"></p><p>键盘的拆卸十分容易，键盘本身并未通过螺丝或者胶水进行固定，仅使用了8个卡扣进行上壳和底板的咬合固定。因此使用一字螺丝刀和小拨片去翘一下键盘的接缝处，可以很轻松的将上壳和底座分离，分离后如图所示，且可以看到红色的PCB板。</p><p><img src="2.jpg" alt="键盘进行上下外壳的分离"></p><p>在对外壳进行分离后，我们可以将钢板与PCB板拿离底座，注意，底座和PCB板之间存在排线，需要先将排线分离，再将钢板与PCB板取出。不要直接扯下排线，连接比较紧密，可以不断地晃动排线公口，之后松弛后可以很轻松地拔出排线。</p><p><img src="3.jpg" alt="红色的PCB底座与排线"></p><p>可以看到排线如下所示，不断晃动，即可拔出排线。</p><p><img src="4.jpg" alt="排线的示意图"></p><p>在取下底座之后，即可将键盘的键帽全部拔出(记得拍照作为键盘键位的标记，不然凭借记忆中的键位安装键帽会较为困难)，将所有的键帽拔出之后，可以看到红轴的轴体，在轴体上侧有一个安装F3规格的LED灯的开口，键盘的PCB板上已经存在线路和引脚，只需要将LED安装之后进行焊接即可。</p><p><img src="5.jpg" alt="拆下键帽后的钢板以及PCB板"></p><p>但是拆下键帽后，会发现钢板上有非常多的灰尘和程序猿的头发(头发，我的头发，呜呜呜)，所有使用镊子夹一块医用酒精棉进行擦拭，将油脂，毛发等脏东西清除干净。(PS:感谢舍友淳宝提供的酒精棉，阿里嘎多！)</p><p><img src="6.jpg" alt="用酒精棉擦拭钢板表面，并使用镊子夹出毛发"></p><h2 id="焊接LED灯珠"><a href="#焊接LED灯珠" class="headerlink" title="焊接LED灯珠"></a>焊接LED灯珠</h2><p>在使用了6片酒精棉擦拭(约30min)后，感觉还是键盘的干净度还算是可以看了，如下图，还算比较干净了。此时我们准备这次需要的耗材及工具：</p><blockquote><ul><li>LED灯珠 F3规格 * 104(考虑到存在亮度不均衡，损坏的情况，建议采购120颗起步)       <strong>成本 0.03元 * 104</strong></li><li>电焊及支架 * 1      <strong>成本20元 * 1</strong></li><li>松香 * 1        <strong>成本1元 * 1</strong></li><li>电焊丝 * 1      <strong>成本1元 * 1</strong></li><li>剪线钳 * 1      <strong>成本3元 * 1</strong></li><li>镊子        <strong>成本2元 * 1</strong></li></ul></blockquote><p>使用的这些工具已经在下图中给出，可以按照图片直接购入相应的工具耗材即可。</p><p><img src="7.jpg" alt="耗材工具及清洁后的pcb板"></p><p>将pcb板翻到背面，可以看到为了防止排线线材与较尖的金属触点发生刮蹭导致线材受损，使用了一块比较光滑的硬质塑料片，贴在了背板上。我们可以将这块塑料片拿下，便于LED灯珠的装配与焊接。</p><p><img src="8.jpg" alt="将背板的塑料防护片取下"></p><p>现在开始进行焊接操作，我们可以使用两个手指分别抵住LED灯防止移位和供应焊锡丝(PS:为了翘背板特意留的长指甲，但是并未使用到？拨片一翘就分离了)。这么操作的好处是焊接得到的引脚都非常正，不会弯曲，若之后LED出现故障，可以很轻易地将其取下；但是这样操作也会存在不便，安装到中间的部分将变得异常困难(也可以使用镊子夹住灯珠进行焊接)。所以我为了偷懒使用了较为简单的方式去进行焊接，即将两根引脚分别向两侧弯曲，这样引脚本身的倾斜就导致了不会出现灯珠移位的情况(缺点是若出现故障需要返工，很难将灯珠拔出来)，注意引脚的正负，PCB板上已经标记出了正极引脚。</p><p><img src="9.jpg" alt="对灯珠的引脚进行焊接"></p><p>焊接完成一排之后，我们对灯珠进行点亮测试，可以看到第一排一次性全部被点亮。</p><p><img src="10.jpg" alt="第一排一次点亮"></p><p>有了成功点亮的经验，艺高人胆大(感谢学校的电工实习，咳咳咳)我直接对接下来的两排一并安装灯珠，且全部一次点亮。</p><p><img src="11.jpg" alt="三排成功点亮"></p><p>最后将剩下的三排全部焊接，所有的灯珠在通电后全部一次点亮，非常完美。</p><p><img src="12.jpg" alt="全部灯珠一次点亮"></p><p>我们翻到PCB板的背面，焊点都还能保证比较饱满，由于引脚是歪着焊接的，看上去是歪歪扭扭的，但是还是能保证电气性能良好大。</p><p><img src="13.jpg" alt="PCB背板焊点"></p><p>由于买了150颗灯珠，所以最后还剩下了很多的灯珠，下图是剩下的灯珠和剪断的引脚。</p><p><img src="14.jpg" alt="剩下的灯珠和剪断的引脚"></p><p>装配完成后来看看效果吧！</p><p><img src="15.jpg" alt="装配完成后点亮的效果"></p><p>键盘有很多的灯光方案，老版本的C104有8种点亮方式，新版本的更换过主控后似乎只有3种基本点亮方式了。本人的键盘是在2019年10月购入，此时的版本为老版本，之后是新版本的可能性就大很多了。</p><blockquote><p><strong>点亮效果</strong></p><ul><li>Fn + 1  键盘灯常亮</li><li>Fn + 2  流水闪烁效果(跑马灯)</li><li>Fn + 3  按哪里亮哪里</li><li>Fn + 4  随机闪烁</li><li>Fn + 5  涟漪效果</li><li>Fn + 6  呼吸灯</li><li>Fn + 7  Esc、ASDW、方向键常亮</li><li>Fn + 8  QWER处常亮(可能是LOL的按键)</li><li>Fn + ↑  背光亮度增加</li><li>Fn + ↓  背光亮度降低</li><li>Fn + →  闪烁频率增加</li><li>Fn + ←  闪烁频率降低</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 摸鱼中的小确幸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用的基本技巧</title>
      <link href="/articles/git%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7/"/>
      <url>/articles/git%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><h2 id="导语：git是什么"><a href="#导语：git是什么" class="headerlink" title="导语：git是什么"></a>导语：git是什么</h2><blockquote><p>git是用于Linux内核开发的版本控制工具。与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git的速度很快，这对于诸如Linux内核这样的大项目来说自然很重要。git最为出色的是它的合并追踪（merge tracing）能力。</p></blockquote><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="下载git并直接安装"><a href="#下载git并直接安装" class="headerlink" title="下载git并直接安装"></a>下载git并直接安装</h3><p>在Windows上可以直接在官网下载<a href="https://git-scm.com/downloads">Git安装程序</a>，下载完成后，直接按照步骤进行安装即可，记得选中Add to Path以将其bin目录添加进系统环境中，方便使用。安装完成后，右键选中git bash here，开启bash。</p><h3 id="配置全局参数"><a href="#配置全局参数" class="headerlink" title="配置全局参数"></a>配置全局参数</h3><p>在bash下输入以下代码，全局配置参数，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>输入<code>git config --global --list</code>命令可以显示设置过的全局变量，如下图所示：<br><img src="git_config.png" alt="git config --global --list显示的结果"></p><h2 id="git的基础使用"><a href="#git的基础使用" class="headerlink" title="git的基础使用"></a>git的基础使用</h2><h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>git仓库即repository，在其中的所有文件均可以被git进行管理，对于文件的新建，修改，删除，git均可以对其进行记录，在进行记录之后，任何事件都可以对历史版本进行追踪、还原等操作。</p><p>创建git仓库的方法非常简单，首先将跳转到合适的路径下，创建一个文件夹（也可以是已经包含文件的文件夹），在bash下可以使用如下代码创建一个git仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /e/ProgramDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir Learn_git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/e/ProgramDemo/Learn_git</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><p>在输入完成后可以发现路径下出现了一个以.git命名的隐藏文件夹，说明仓库创建成功。</p><h3 id="将文件添加到版本库"><a href="#将文件添加到版本库" class="headerlink" title="将文件添加到版本库"></a>将文件添加到版本库</h3><p>在使用<code>git init</code>对git仓库进行建立后，即可在该路径下进行相关项目的创建与书写。</p><p>git可以对这些文件进行跟踪，告知每次文件的修改情况（注意：只能跟踪文本文件，可以监测到添加删除的内容。但对二进制文件无法进行跟踪，只能检测到文件大小发生了变化，因此word文档无法进行跟踪，因为其是二进制文件）在进行文本编辑时，建议使用utf8编码，减少冲突的可能。</p><p>下面对如何将git中的文件添加到仓库进行演示：</p><p>首先在仓库路径下右键选择git bash here打开bash。使用touch命令新建一个测试文件test1.txt，向文件中随意写入一些内容，并进行保存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch test1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim test1.txt         <span class="comment"># 随意写入一些内容</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test1.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">This is HeavyTiger!</span><br></pre></td></tr></table></figure><p>写入内容后，可以使用git对文件进行管理了。首先使用命令<code>git status</code>可以看到，git已经检测到我们在路径中创建了新文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        test1.txt</span><br></pre></td></tr></table></figure><p>使用git add命令对文件进行添加，建文件添加到仓库。如果想添加所有的文件，只需要使用<code>git add .</code>命令，即可添加所有文件，如果有不想追踪的文件格式，例如.class文件，可以创建 .gitignore文件对匹配到的相关后缀文件进行忽视。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add test1.txt</span><br><span class="line">git status</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   test1.txt</span><br></pre></td></tr></table></figure><h3 id="查看修改的内容"><a href="#查看修改的内容" class="headerlink" title="查看修改的内容"></a>查看修改的内容</h3><p>对test1.txt的文件内容进行修改，修改后，可以使用<code>git diff test1.txt</code>命令查看对文件的修改情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim test1.txt     <span class="comment">#对文本文件进行编辑，做出修改</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test1.txt</span></span><br><span class="line">This is HeavyTiger! how are you?</span><br><span class="line">This is a new line which I insert on the second day!</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff test1.txt</span></span><br><span class="line">diff --git a/test1.txt b/test1.txt</span><br><span class="line">index 02e6d3d..6eac541 100644</span><br><span class="line">--- a/test1.txt</span><br><span class="line">+++ b/test1.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Hello world!</span><br><span class="line">-This is HeavyTiger!</span><br><span class="line">+This is HeavyTiger! how are you?</span><br><span class="line">+This is a new line which I insert on the second day!</span><br></pre></td></tr></table></figure><p>可以看到，文件已经被修改，<code>git diff</code>命令详细给出了行的改变情况。在查询到修改的内容没有问题后，即可放心地将文件进行add与commit操作。（建议在add与commit之前使用<code>git status</code>命令了解代码是否经过了修改，若发现存在修改，可以使用<code>git diff</code>命令查看修改的详细位置）。</p><h3 id="暂存区修改提交至本地仓库"><a href="#暂存区修改提交至本地仓库" class="headerlink" title="暂存区修改提交至本地仓库"></a>暂存区修改提交至本地仓库</h3><p><code>git commit</code>命令可以将暂存区中的修改提交至<strong>本地</strong>的版本库。使用<code>git commit</code>命令会在本地的版本库中生成一个40位的哈希值（原因是多人对项目进行commit时，若使用常规的编码如0、1、2等，会导致产生冲突），称为commit-id，在进行版本回退（<code>git reset</code>）时，需要通过该值进行回退。</p><p>通常会使用命令<code>git commit -m &quot;message&quot;</code>进行版本提交，在添加了-m参数后，可以输入提交信息，在message中需要简洁地对此次提交进行描述，方便查看版本信息。若提交的message过长，想进行更加清楚的描述，可以使用以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;</span><br><span class="line">message1</span><br><span class="line">message2</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>此外，若已经提交了一个版本至服务器中（即已进行<code>git commit</code>和<code>git push</code>操作，未被<code>git merge</code>），但是发现版本中出现了小bug，不想再重新提交一个新的版本，可以使用<code>git commit --amend</code>命令进行追加提交提交至前一次版本的commit-id。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>如果在上一次使用<code>git add</code>或<code>git commit</code>之后，你对文件又进行了修改，文件的内容发生了改变，但是我们发现开发出现了不可逆的错误，想直接回退到上次<code>git add</code>或<code>git commit</code>时的状态，撤销工作区中的所有修改，可以使用<code>git checkout -- file</code>命令对其作出修改(如果不添加– file即切换分支，注意<code>git checkout</code>命令是一个危险的命令，可能会替换当前的工作区，请务必在再三确认之后，再键入该命令)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">this is a new line which I add the second time!</span><br><span class="line">And I deleted the raw second line.</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">this is a new line which I add the second time!</span><br><span class="line">And I deleted the raw second line.</span><br><span class="line">Add a line which I don&#x27;t want to save.</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">this is a new line which I add the second time!</span><br><span class="line">And I deleted the raw second line.</span><br></pre></td></tr></table></figure><p>如果此时的修改不止存在于工作区下，并且非常憨憨地使用了<code>git add .</code>将所有地修改全部添加到了暂存区，此时显然使用<code>git checkout -- file</code>已经不可能起作用，但是仍然可以进行撤销操作。使用<code>git reset HEAD &lt;file&gt;</code>可以将暂存区中的修改回退到工作区中，使用HEAD表示回退到最新版本。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>我们已经知道了如何对工作区和暂存区中的文件进行版本回退，那么是否可以对已经使用<code>git commit</code>命令提交到本地的版本库中的内容进行回退呢？</p><p>答案是可以的，也需要使用<code>git reset</code>命令进行回退。在向前回退时，可以使用<code>git log</code>命令查看commit-id，通过该id进行版本的回退与更改。查看得到的结果如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit a52f403b886f5168b00ad1c91897cf808d26a990 (HEAD -&gt; master)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:23:43 2021 +0800</span><br><span class="line"></span><br><span class="line">    The second commitment</span><br><span class="line"></span><br><span class="line">commit 4369702618f9fe107a9e2629446ce4e1d4b2a6a8</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:19:26 2021 +0800</span><br><span class="line"></span><br><span class="line">    The first commitment</span><br><span class="line"></span><br><span class="line">commit dcd812278c90f6c66a622ae2e6202054d1740f80 (origin/master, origin/HEAD)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:10:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure><p>通过commit-id可以进行版本的回退。使用<code>git reset --hard ID</code>，例如：<code>git reset --hard dcd812</code>回退到Initial commit版本，也可以通过<strong>HEAD</strong>参数进行版本回退，HEAD参数表示当前的版本，在右上角附带^表示上一个版本，故<code>git reset --hard HEAD^</code>表示回退到上一个版本，<code>git reset --hard HEAD^^</code>表示回退到前两个版本。如果回退到前100个版本，也可以使用如下的方法进行回退<code>git reset --hard HEAD~100</code></p><p>但是在进行版本回退之后将无法看到新版本的commit-id，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 4369702 The first commitment</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (HEAD -&gt; master)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:19:26 2021 +0800</span><br><span class="line"></span><br><span class="line">    The first commitment</span><br><span class="line"></span><br><span class="line">commit dcd812278c90f6c66a622ae2e6202054d1740f80 (origin/master, origin/HEAD)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:10:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以此时如何找到最新的版本号呢？可以使用<code>git reflog</code>命令查看commit记录，在reflog中记录了commit-id，因此可以很方便地向后进行跳转，找到最新commit的代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">a52f403 HEAD@&#123;1&#125;: reset: moving to a52f</span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to 4369</span><br><span class="line">a52f403 HEAD@&#123;3&#125;: commit: The second commitment</span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;4&#125;: commit: The first commitment</span><br><span class="line">dcd8122 (origin/master, origin/HEAD) HEAD@&#123;5&#125;: clone: from github.com:HeavyTiger/Learn_git.git</span><br></pre></td></tr></table></figure><h2 id="git的目录结构"><a href="#git的目录结构" class="headerlink" title="git的目录结构"></a>git的目录结构</h2><p>git中加入了暂存区的概念，分为工作区，版本库中的暂存区，分支等概念。git版本库的模型如下图所示：</p><p><img src="git_model.png" alt="git版本库的模型"></p><p>上图描述了 git 对象的在不同的生命周期中不同的存储位置，通过不同的 git 命令改变 git 对象的存储生命周期。</p><h3 id="工作区-workspace"><a href="#工作区-workspace" class="headerlink" title="工作区(workspace)"></a>工作区(workspace)</h3><p>就是我们当前工作空间，也就是我们当前能在本地文件夹下面看到的文件结构。初始化工作空间或者工作空间 clean 的时候，文件内容和 index 暂存区是一致的，随着修改，工作区文件在没有 add 到暂存区时候，工作区将和暂存区是不一致的。</p><h3 id="暂存区-index"><a href="#暂存区-index" class="headerlink" title="暂存区 (index)"></a>暂存区 (index)</h3><p>老版本概念也叫 Cache 区，就是文件暂时存放的地方，所有暂时存放在暂存区中的文件将随着一个 commit 一起提交到 local repository 此时 local repository 里面文件将完全被暂存区所取代。暂存区是 git 架构设计中非常重要和难理解的一部分。</p><h3 id="本地仓库-local-repository"><a href="#本地仓库-local-repository" class="headerlink" title="本地仓库 (local repository)"></a>本地仓库 (local repository)</h3><p>git 是分布式版本控制系统，和其他版本控制系统不同的是他可以完全去中心化工作，你可以不用和中央服务器 (remote server) 进行通信，在本地即可进行全部离线操作，包括 log，history，commit，diff 等等。完成离线操作最核心是因为 git 有一个几乎和远程一样的本地仓库，所有本地离线操作都可以在本地完成，等需要的时候再和远程服务进行交互。</p><h3 id="远程仓库-remote-repository"><a href="#远程仓库-remote-repository" class="headerlink" title="远程仓库 (remote repository)"></a>远程仓库 (remote repository)</h3><p>中心化仓库，所有人共享，本地仓库会需要和远程仓库进行交互，也就能将其他所有人内容更新到本地仓库把自己内容上传分享给其他人。结构大体和本地仓库一样。</p><h3 id="git命令后文件的变化"><a href="#git命令后文件的变化" class="headerlink" title="git命令后文件的变化"></a>git命令后文件的变化</h3><p><img src="git_fileChange.png" alt="git命令后文件的变化"></p><p>Git管理的是修改，当使用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>所以在每次使用<code>git commit</code>之前，所有修改过的文件都必须重新进行<code>git add</code>，将工作区(workspace)中的修改提交到暂存区(index)中，否则即使进行了<code>git commit</code>本地仓库中也将不会出现修改。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>在<a href="https://github.com/">github</a>或者<a href="https://gitee.com/">gitee</a>网站中注册帐号，创建Repository，作为本地的远程仓库。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在GitHub中，得到仓库的SSH链接或者HTTPS链接，将该链接手动绑定到本地。例如，本人学习git的项目的SSH链接为：<a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#109;</a>:HeavyTiger/Learn_git.git，故可以在本地的仓库中，使用bash输入<code>git remote add origin git@github.com:HeavyTiger/Learn_git.git</code>命令，使用此命令可以让远端仓库与本地仓库建立远程连接，而该远程仓库名叫做<code>origin</code>(初始建立的远程连接，一般都叫做origin，clone得到的仓库亦叫origin)。</p><p>下一步即可及那个本地库中的内容推送到远程库上：使用命令<code>git push</code>，第一次进行数据上传建议使用<code>git push -u origin master</code>加上了-u参数后，Git会将本地的master分支与远程的master分支进行关联，在之后的推送中即可简化命令<code>git push origin master</code>。</p><p>使用该方法时，记得查看GitHub与本地的文件是否一致，GitHub在创建仓库时会添加readME.md以及.gitignore文件，若本地不存在这些文件，即两边的版本库不同步，在使用<code>git push</code>命令时会产生报错，因此建议使用此方法时，需要将本地的版本库与远程的版本库进行同步。使用<code>git pull</code>命令从远端进行拉取，将版本库与远端同步，之后即可正常的提交代码。因此不建议采用方法一中的方法。因为较为复杂，可以使用方法二中的方法。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>先创建一个远程库，直接进行远程库克隆，即使用<code>git clone</code>命令将远程库与本地库直接关联并且同步数据，由于账户中保存了本机的公匙，因此可以直接将本机的文件进行推送，如果clone他人的项目，自然无法进行推送。如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>你也许还注意到，GitHub给出的地址不止一个，还可以用https之类的协议进行上传，例如<a href="https://github.com/HeavyTiger/Learn_git.git">https://github.com/HeavyTiger/Learn_git.git</a> 这样的地址。实际上，Git支持多种协议，默认的Git使用SSH进行连接，但也可以使用https等其他协议。</p><p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>使用<code>git checkout -b name</code>创建分支并转到新建的分支上。例如创建dev分支，即可以使用<code>git ckeckout -b dev</code>创建dev分支并跳转到dev分支上。</p><p>使用<code>git branch</code>命令可以查看当前的所有分支，在当前分支前会有一个<code>*</code>号。</p><p>可以在<code>dev</code>分支上进行修改以及提交而不会影响<code>master</code>分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev</span></span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span> &gt; hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;the first dev modify&quot;</span></span></span><br><span class="line">[dev a1d3fec] the first dev modify</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  test.txt</span><br></pre></td></tr></table></figure><p>可以看到对dev分支下新建了hello.txt并提交之后，转到master分支，并不存在dev分支下新建立的hello.txt文件。</p><p>但是若要转到master分支后本地工作区中的文件不被直接同步为dev分支下创建的内容，必须要执行<code>git add</code>和<code>git commit</code>命令，否则会导致出错，本地的工作区文件将在跳转后直接被同步为dev分支下修改的内容。</p><h4 id="git-stash暂存"><a href="#git-stash暂存" class="headerlink" title="git stash暂存"></a>git stash暂存</h4><p>如果不想使用<code>git commit</code>进行一次提交该如何操作？比方说，正在对dev分支进行修改，已经做出了部分修改，此时收到了新的命令，即再去另一个分支对bug进行修复，若此时不进行<code>git commit</code>去提交<code>dev</code>分支，在转换分支时会导致数据被合并到出现bug的分支上，回退会导致数据丢失。因此我们可以先使用<code>git add .</code>将工作区中的修改储存到暂存区(<strong>重要</strong>)，再使用<code>git stash</code>命令进行暂存区的暂存。再处理完另一个分支的bug后，可以回退到<code>dev</code>分支下，进行数据的恢复，演示操作如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;this is a temp file.&quot;</span> &gt; temp1.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;this is a temp file.&quot;</span> &gt; temp2.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  temp1.txt  temp2.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch dev</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        temp1.txt</span><br><span class="line">        temp2.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line">Saved working directory and index state WIP on dev: a1d3fec the first dev modify</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line">stash@&#123;0&#125;: WIP on dev: a1d3fec the first dev modify</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   temp1.txt</span><br><span class="line">        new file:   temp2.txt</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (77cfbe0f5b75e14d8118f607d88d42c7e0ac3bc4)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  temp1.txt  temp2.txt  test.txt</span><br></pre></td></tr></table></figure><p>可以看到此时的数据被成功恢复。</p><blockquote><p>(储存)</p></blockquote><ul><li>首先使用<code>git add .</code></li><li>再使用<code>git stash save &quot;备注&quot;</code></li><li>最后使用<code>git stash list</code>查看stash的情况是否正常 </li></ul><blockquote><p>(恢复)</p></blockquote><ul><li>当bug修复完毕时，使用<code>git stash pop</code>(当前现场需要在栈顶)</li><li>若暂存多次，可以使用<code>git stash apply stash@&#123;1&#125;</code>命令进行恢复，</li><li><code>stash@&#123;1&#125;</code>即stash内容的版本，可以使用<code>git stash list</code>进行查看，<br>但是使用<code>git stash apply</code>恢复会导致stash内容不被删除，毕竟使用到了栈，需要手动使用<code>git stash drop</code>来删除。</li></ul><h4 id="快速修复其他分支的相同问题"><a href="#快速修复其他分支的相同问题" class="headerlink" title="快速修复其他分支的相同问题"></a>快速修复其他分支的相同问题</h4><p>同时，在修复bug的情景下，我们可能会想到修复的bug在其他分支上也存在，有没有办法仅仅将修改bug的位置同步到其他分支呢？为此，git提供了<code>cherry-pick</code>命令，允许进行相应的此操作，将一次提交中所做出的修改提交到当前分支上，找到<code>fix bug</code>的<code>commit-id</code>，对当前的分支使用命令<code>git cherry-pick commit-id</code>即可将修改的bug同步到当前的分支。git会自动给当前分支进行一次<code>git commit</code>操作。两次提交的<code>commit-id</code>不相同，原因是这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在当前分支上手动再把修bug的过程重复一遍。</p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>合并分支需要使用到<code>git merge branch</code>命令，将其他的分支合并到HEAD所指向的分支上，如果有冲突，则无法合并，需要手动对冲突进行修复后才能进行合并。如果能够直接合并，会使用Fast-forward的方式进行合并。即直接将当前的分支指针(被合并的)指向合并的分支上，所以速度非常快。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is up to date with &#x27;origin/master&#x27;.</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line">Updating 4369702..a1d3fec</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 1 +</span><br><span class="line"> test.txt  | 5 +++--</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 hello.txt</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>在合并完分支后，对于无用的分支，即可直接删除，使用<code>git branch -d dev</code>命令即可将dev分支删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br><span class="line">Deleted branch dev (was a1d3fec).</span><br></pre></td></tr></table></figure><h3 id="合并冲突处理"><a href="#合并冲突处理" class="headerlink" title="合并冲突处理"></a>合并冲突处理</h3><p>首先，git在对分支进行合并的时候，可能会出现无法合并的情况。例如，同一篇作文，老师对开头进行了修改，而作者对结尾进行了修改，这种情况是可以直接进行合并的，使用<code>git merge</code>命令可以自动进行合并。但是如果老师修改了开头，作者也想修改开头，则没有办法对文章进行自动合并，需要作者或老师对文章开头的修改进行手动合并，在手动处理冲突完成后(即决定将谁对开头的修改作为整篇文章的修改)，之后才能够进行文章的自动合并。举例说明如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world means ni hao in chinese!</span><br><span class="line">I modified this file.</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">&quot;修改了hello.txt，对HelloWorld含义做出解释&quot;</span></span></span><br><span class="line">[dev f5228b6] 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">f5228b6a8d1b5c52d3672369b13227217d5ea339 (HEAD -&gt; dev) 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev, master) the first dev modify</span><br><span class="line">0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (dev)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 2 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world, this is another way to modify.</span><br><span class="line">ni hao!</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">&quot;在主分支中修改了hello.txt，欲展示合并冲突处理过程&quot;</span></span></span><br><span class="line">[master 42eede8] 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">42eede8aed5975b65ee866223ce642b3f8cc23e7 (HEAD -&gt; master) 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit --all</span></span><br><span class="line">* 42eede8 (HEAD -&gt; master) 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">| * f5228b6 (dev) 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">|/</span><br><span class="line">* a1d3fec (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8 the first modify in branch dev</span><br><span class="line">* 4369702 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd8122 Initial commit</span><br></pre></td></tr></table></figure><p>可以使用<code>git log --graph --pretty=oneline --abbrev-commit --all</code>语句以图表的形式展示所有<code>git commit</code>的情况，其中：</p><blockquote><ul><li><code>--graph</code>参数表示以图标的形式进行显示提交情况。</li><li><code>--pretty=oneline</code>参数表示精简输出，每一次<code>git commit</code>提交均在一行内进行显示。</li><li><code>--abbrev-commit</code>参数表示将commit-ID进行简写，将40个十六进制数的SHA1散列值进行简写，使用7位16进制数进行表示。</li><li><code>--all</code>参数表示展示所有分支中的提交情况，否则只会展示当前分支下的提交情况</li></ul></blockquote><p>图中带有(origin/dev)等字样的表示在远程仓库中进行过提交，存在提交记录，可以直接进行恢复。</p><p>此时对修改进行合并，合并到主分支上，可以看到git提示我们在hello.txt中出现了冲突，自动合并失败，需要我们手动将HEAD所指向的分支中的文件修改后，直接进行提交，才可以进行合并。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>查看当前路径下hello.txt文件中的内容，可以看到，git使用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</code>将出现冲突的地方进行了标记，我们对冲突进行判断并保留，之后进行提交，即可完成合并的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Hello world, this is another way to modify.</span><br><span class="line">ni hao!</span><br><span class="line"> =======</span><br><span class="line">Hello world means ni hao in chinese!</span><br><span class="line">I modified this file.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; dev</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim hello.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat hello.txt</span></span><br><span class="line">Hello world, this is another way to modify.</span><br><span class="line">ni hao!I modified this file.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master|MERGING)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">&quot;conflict fixed&quot;</span></span></span><br><span class="line">[master 7373637] conflict fixed</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit --all</span></span><br><span class="line">*   7373637 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6 (dev) 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8 the first modify in branch dev</span><br><span class="line">* 4369702 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd8122 Initial commit</span><br></pre></td></tr></table></figure><h3 id="禁用Fast-forward模式"><a href="#禁用Fast-forward模式" class="headerlink" title="禁用Fast forward模式"></a>禁用Fast forward模式</h3><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。即如果不禁用，若可以以此模式合并，会直接将HEAD移动到最新的dev版本上，会导致分支的信息直接丢失，在多人开发的情况下这样是不好的，需要再强制进行一次<code>git commit</code>操作，则会生成两个节点，将HEAD指向新生成的节点即可。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline</span></span><br><span class="line">*   73736377bbeccfefe5121f2bab028b13784b66e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6a8d1b5c52d3672369b13227217d5ea339 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8aed5975b65ee866223ce642b3f8cc23e7 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">* 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">  develop</span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --all</span></span><br><span class="line">* 20a793580c3af6a1f9117a2142e589ebffe2d3a3 (develop) 在develop分支中增加对noff.txt文件的修改</span><br><span class="line">*   73736377bbeccfefe5121f2bab028b13784b66e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6a8d1b5c52d3672369b13227217d5ea339 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8aed5975b65ee866223ce642b3f8cc23e7 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">* 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge develop</span></span><br><span class="line">Updating 7373637..20a7935</span><br><span class="line">Fast-forward</span><br><span class="line"> noff.txt | 3 +++</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line"> create mode 100644 noff.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --all</span></span><br><span class="line">* 20a793580c3af6a1f9117a2142e589ebffe2d3a3 (HEAD -&gt; master, develop) 在develop分支中增加对noff.txt文件的修改</span><br><span class="line">*   73736377bbeccfefe5121f2bab028b13784b66e4 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6a8d1b5c52d3672369b13227217d5ea339 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8aed5975b65ee866223ce642b3f8cc23e7 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec8d4b76de78627db0c9c41a9d0e16d0769 (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8dd1b842302270dac680fa01fccbe3e002 the first modify in branch dev</span><br><span class="line">* 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd812278c90f6c66a622ae2e6202054d1740f80 Initial commit</span><br></pre></td></tr></table></figure><p>在进行Fast forward之后，可以看到，当前的HEAD直接指向了master以及develop，相当于丢失了一次分支，我们再对develop分支进行一次更新提交，禁止Fast forward。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout develop</span></span><br><span class="line">Switched to branch &#x27;develop&#x27;</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md  hello.txt  noff.txt  test.txt</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim noff.txt</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;尝试对develop分支进行修改，此次尝试不使用Fast forward合并&quot;</span></span></span><br><span class="line">[develop d6bc5fc] 尝试对develop分支进行修改，此次尝试不使用Fast forward合并</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (develop)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">&quot;进制Fast forward模式合并&quot;</span> develop</span></span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> noff.txt | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">DCM@DESKTOP-GN199F8 MINGW64 /e/ProgramDemo/Learn_git (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit --all</span></span><br><span class="line">*   e0aa011 (HEAD -&gt; master) 进制Fast forward模式合并</span><br><span class="line">|\</span><br><span class="line">| * d6bc5fc (develop) 尝试对develop分支进行修改，此次尝试不使用Fast forward合并</span><br><span class="line">|/</span><br><span class="line">* 20a7935 在develop分支中增加对noff.txt文件的修改</span><br><span class="line">*   7373637 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * f5228b6 修改了hello.txt，对HelloWorld含义做出解释</span><br><span class="line">* | 42eede8 在主分支中修改了hello.txt，欲展示合并冲突处理过程</span><br><span class="line">|/</span><br><span class="line">* a1d3fec (origin/dev) the first dev modify</span><br><span class="line">* 0ccccf8 the first modify in branch dev</span><br><span class="line">* 4369702 (origin/master, origin/HEAD) The first commitment</span><br><span class="line">* dcd8122 Initial commit</span><br></pre></td></tr></table></figure><p>可以看到再这次提交之后，使用<code>-m</code>参数进行了一次版本提交，因此保留了该分支存在的证据和记录，而之前没有使用<code>--no-ff</code>参数合并的develop版本已经找不到存在的证据了。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h3 id="开发中的分支策略"><a href="#开发中的分支策略" class="headerlink" title="开发中的分支策略"></a>开发中的分支策略</h3><p>在实际开发中，我们应该保证master分支的永远稳定，仅用来发布最新的使用版本，不允许直接在master分支上进行开发。</p><p>我们应该使用dev分支（即develop开发分支）进行开发，对于已经稳定的版本再合并到master分支上。</p><p>每个开发人员都有自己的分支，同时，也可以一个人开辟多条分支，进行修改与特性增加。在经过项目管理人员的批准后，时不时向dev分支上合并即可。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 代码版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
