<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git使用的基本技巧</title>
      <link href="/articles/git%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7/"/>
      <url>/articles/git%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><h2 id="导语：git是什么"><a href="#导语：git是什么" class="headerlink" title="导语：git是什么"></a>导语：git是什么</h2><blockquote><p>git是用于Linux内核开发的版本控制工具。与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git的速度很快，这对于诸如Linux内核这样的大项目来说自然很重要。git最为出色的是它的合并追踪（merge tracing）能力。</p></blockquote><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="下载git并直接安装"><a href="#下载git并直接安装" class="headerlink" title="下载git并直接安装"></a>下载git并直接安装</h3><p>在Windows上可以直接在官网下载<a href="https://git-scm.com/downloads">Git安装程序</a>，下载完成后，直接按照步骤进行安装即可，记得选中Add to Path以将其bin目录添加进系统环境中，方便使用。安装完成后，右键选中git bash here，开启bash。</p><h3 id="配置全局参数"><a href="#配置全局参数" class="headerlink" title="配置全局参数"></a>配置全局参数</h3><p>在bash下输入以下代码，全局配置参数，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>输入<code>git config --global --list</code>命令可以显示设置过的全局变量，如下图所示：<br><img src="git_config.png" alt="git config --global --list显示的结果"></p><h2 id="git的目录结构"><a href="#git的目录结构" class="headerlink" title="git的目录结构"></a>git的目录结构</h2><p>git中加入了暂存区的概念，分为工作区，版本库中的暂存区，分支等概念。</p><h3 id="工作区（）"><a href="#工作区（）" class="headerlink" title="工作区（）"></a>工作区（）</h3><h2 id="git的基础使用"><a href="#git的基础使用" class="headerlink" title="git的基础使用"></a>git的基础使用</h2><h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>git仓库即repository，在其中的所有文件均可以被git进行管理，对于文件的新建，修改，删除，git均可以对其进行记录，在进行记录之后，任何事件都可以对历史版本进行追踪、还原等操作。</p><p>创建git仓库的方法非常简单，首先将跳转到合适的路径下，创建一个文件夹（也可以是已经包含文件的文件夹），在bash下可以使用如下代码创建一个git仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /e/ProgramDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir Learn_git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/e/ProgramDemo/Learn_git</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><p>在输入完成后可以发现路径下出现了一个以.git命名的隐藏文件夹，说明仓库创建成功。</p><h3 id="将文件添加到版本库"><a href="#将文件添加到版本库" class="headerlink" title="将文件添加到版本库"></a>将文件添加到版本库</h3><p>在使用<code>git init</code>对git仓库进行建立后，即可在该路径下进行相关项目的创建与书写。</p><p>git可以对这些文件进行跟踪，告知每次文件的修改情况（注意：只能跟踪文本文件，可以监测到添加删除的内容。但对二进制文件无法进行跟踪，只能检测到文件大小发生了变化，因此word文档无法进行跟踪，因为其是二进制文件）在进行文本编辑时，建议使用utf8编码，减少冲突的可能。</p><p>下面对如何将git中的文件添加到仓库进行演示：</p><p>首先在仓库路径下右键选择git bash here打开bash。使用touch命令新建一个测试文件test1.txt，向文件中随意写入一些内容，并进行保存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch test1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim test1.txt         <span class="comment"># 随意写入一些内容</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test1.txt</span></span><br><span class="line">Hello world!</span><br><span class="line">This is HeavyTiger!</span><br></pre></td></tr></table></figure><p>写入内容后，可以使用git对文件进行管理了。首先使用命令<code>git status</code>可以看到，git已经检测到我们在路径中创建了新文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        test1.txt</span><br></pre></td></tr></table></figure><p>使用git add命令对文件进行添加，建文件添加到仓库。如果想添加所有的文件，只需要使用<code>git add .</code>命令，即可添加所有文件，如果有不想追踪的文件格式，例如.class文件，可以创建 .gitignore文件对匹配到的相关后缀文件进行忽视。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add test1.txt</span><br><span class="line">git status</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   test1.txt</span><br></pre></td></tr></table></figure><h3 id="查看修改的内容"><a href="#查看修改的内容" class="headerlink" title="查看修改的内容"></a>查看修改的内容</h3><p>对test1.txt的文件内容进行修改，修改后，可以使用<code>git diff test1.txt</code>命令查看对文件的修改情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim test1.txt     <span class="comment">#对文本文件进行编辑，做出修改</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat test1.txt</span></span><br><span class="line">This is HeavyTiger! how are you?</span><br><span class="line">This is a new line which I insert on the second day!</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff test1.txt</span></span><br><span class="line">diff --git a/test1.txt b/test1.txt</span><br><span class="line">index 02e6d3d..6eac541 100644</span><br><span class="line">--- a/test1.txt</span><br><span class="line">+++ b/test1.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Hello world!</span><br><span class="line">-This is HeavyTiger!</span><br><span class="line">+This is HeavyTiger! how are you?</span><br><span class="line">+This is a new line which I insert on the second day!</span><br></pre></td></tr></table></figure><p>可以看到，文件已经被修改，<code>git diff</code>命令详细给出了行的改变情况。在查询到修改的内容没有问题后，即可放心地将文件进行add与commit操作。（建议在add与commit之前使用<code>git status</code>命令了解代码是否经过了修改，若发现存在修改，可以使用<code>git diff</code>命令查看修改的详细位置）。</p><h3 id="暂存区修改提交至本地仓库"><a href="#暂存区修改提交至本地仓库" class="headerlink" title="暂存区修改提交至本地仓库"></a>暂存区修改提交至本地仓库</h3><p><code>git commit</code>命令可以将暂存区中的修改提交至<strong>本地</strong>的版本库。使用<code>git commit</code>命令会在本地的版本库中生成一个40位的哈希值（原因是多人对项目进行commit时，若使用常规的编码如0、1、2等，会导致产生冲突），称为commit-id，在进行版本回退（<code>git reset</code>）时，需要通过该值进行回退。</p><p>通常会使用命令<code>git commit -m &quot;message&quot;</code>进行版本提交，在添加了-m参数后，可以输入提交信息，在message中需要简洁地对此次提交进行描述，方便查看版本信息。若提交的message过长，想进行更加清楚的描述，可以使用以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;</span><br><span class="line">message1</span><br><span class="line">message2</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>此外，若已经提交了一个版本至服务器中（即已进行<code>git commit</code>和<code>git push</code>操作，未被<code>git merge</code>），但是发现版本中出现了小bug，不想再重新提交一个新的版本，可以使用<code>git commit --amend</code>命令进行追加提交提交至前一次版本的commit-id。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>可以对已经使用<code>git commit</code>命令的本地版本进行回退。需要使用<code>git reset</code>命令进行回退，在向前回退时，可以使用<code>git log</code>命令查看commit-id，通过该id进行版本的回退与更改。查看得到的结果如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit a52f403b886f5168b00ad1c91897cf808d26a990 (HEAD -&gt; master)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:23:43 2021 +0800</span><br><span class="line"></span><br><span class="line">    The second commitment</span><br><span class="line"></span><br><span class="line">commit 4369702618f9fe107a9e2629446ce4e1d4b2a6a8</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:19:26 2021 +0800</span><br><span class="line"></span><br><span class="line">    The first commitment</span><br><span class="line"></span><br><span class="line">commit dcd812278c90f6c66a622ae2e6202054d1740f80 (origin/master, origin/HEAD)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:10:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure><p>通过commit-id可以进行版本的回退。使用<code>git reset --hard ID</code>，例如：<code>git reset --hard dcd812</code>回退到Initial commit版本，也可以通过<strong>HEAD</strong>参数进行版本回退，HEAD参数表示当前的版本，在右上角附带^表示上一个版本，故<code>git reset --hard HEAD^</code>表示回退到上一个版本，<code>git reset --hard HEAD^^</code>表示回退到前两个版本。如果回退到前100个版本，也可以使用如下的方法进行回退<code>git reset --hard HEAD~100</code></p><p>但是在进行版本回退之后将无法看到新版本的commit-id，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 4369702 The first commitment</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit 4369702618f9fe107a9e2629446ce4e1d4b2a6a8 (HEAD -&gt; master)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:19:26 2021 +0800</span><br><span class="line"></span><br><span class="line">    The first commitment</span><br><span class="line"></span><br><span class="line">commit dcd812278c90f6c66a622ae2e6202054d1740f80 (origin/master, origin/HEAD)</span><br><span class="line">Author: HeavyTiger &lt;462857080@qq.com&gt;</span><br><span class="line">Date:   Mon Jun 14 16:10:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以此时如何找到最新的版本号呢？可以使用<code>git reflog</code>命令查看commit记录，在reflog中记录了commit-id，因此可以很方便地向后进行跳转，找到最新commit的代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">a52f403 HEAD@&#123;1&#125;: reset: moving to a52f</span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to 4369</span><br><span class="line">a52f403 HEAD@&#123;3&#125;: commit: The second commitment</span><br><span class="line">4369702 (HEAD -&gt; master) HEAD@&#123;4&#125;: commit: The first commitment</span><br><span class="line">dcd8122 (origin/master, origin/HEAD) HEAD@&#123;5&#125;: clone: from github.com:HeavyTiger/Learn_git.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 代码版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello_world</title>
      <link href="/articles/hello-world/"/>
      <url>/articles/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/articles/test-draft/"/>
      <url>/articles/test-draft/</url>
      
        <content type="html"><![CDATA[<!--此处为希望博客在首页显示的内容--><p>此样例用来对博客的内容以及markdown格式进行测试</p><img src="/articles/test-draft/avatar.png" class="" title="这是一张图"><p><img src="/images/bg.jpg" alt="测试图片是否能正常开启"></p><span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><hr><p>World of tanks </p><p>panzer vor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">    stdio.h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>坏起来了</p><p><a href="https://www.baidu.com/">百度一下你就知道</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
          <category> today </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
